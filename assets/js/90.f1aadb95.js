(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{1037:function(a,t,s){"use strict";s.r(t);var r=s(1),e=Object(r.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"第13天"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第13天"}},[a._v("#")]),a._v(" 第13天")]),a._v(" "),t("blockquote",[t("p",[a._v("记得定时站起来活动活动，久坐对身体不好呢～")])]),a._v(" "),t("p",[a._v("今天认识 Character 类")]),a._v(" "),t("p",[a._v("Character 类用于对单个字符进行操作。")]),a._v(" "),t("p",[a._v("Character 类在对象中包装一个基本类型 char 的值")]),a._v(" "),t("h2",{attrs:{id:"character-类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#character-类"}},[a._v("#")]),a._v(" Character 类")]),a._v(" "),t("p",[t("code",[a._v("Character")]),a._v(" 类是 Java 编程语言中的一个类，位于 "),t("code",[a._v("java.lang")]),a._v(" 包中。它用于表示单个字符。这个类提供了许多方法来操作和检查字符，例如判断字符是否为字母、数字、空白字符等。")]),a._v(" "),t("h3",{attrs:{id:"实现原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现原理"}},[a._v("#")]),a._v(" 实现原理")]),a._v(" "),t("p",[t("code",[a._v("Character")]),a._v(" 类内部使用一个 "),t("code",[a._v("char")]),a._v(" 类型的变量来存储字符。"),t("code",[a._v("char")]),a._v(" 类型在 Java 中占用 2 个字节（16 位），可以表示 Unicode 字符集中的字符。")]),a._v(" "),t("h3",{attrs:{id:"主要方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#主要方法"}},[a._v("#")]),a._v(" 主要方法")]),a._v(" "),t("ol",[t("li",[t("p",[t("strong",[a._v("判断字符类型的方法")]),a._v("：")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("isDigit(char ch)")]),a._v(": 判断字符是否为数字。")]),a._v(" "),t("li",[t("code",[a._v("isLetter(char ch)")]),a._v(": 判断字符是否为字母。")]),a._v(" "),t("li",[t("code",[a._v("isLetterOrDigit(char ch)")]),a._v(": 判断字符是否为字母或数字。")]),a._v(" "),t("li",[t("code",[a._v("isWhitespace(char ch)")]),a._v(": 判断字符是否为空白字符（如空格、制表符、换行符等）。")]),a._v(" "),t("li",[t("code",[a._v("isUpperCase(char ch)")]),a._v(": 判断字符是否为大写字母。")]),a._v(" "),t("li",[t("code",[a._v("isLowerCase(char ch)")]),a._v(": 判断字符是否为小写字母。")])])]),a._v(" "),t("li",[t("p",[t("strong",[a._v("转换字符大小写的方法")]),a._v("：")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("toUpperCase(char ch)")]),a._v(": 将字符转换为大写。")]),a._v(" "),t("li",[t("code",[a._v("toLowerCase(char ch)")]),a._v(": 将字符转换为小写。")])])]),a._v(" "),t("li",[t("p",[t("strong",[a._v("获取字符的 Unicode 编码")]),a._v("：")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("charValue()")]),a._v(": 返回 "),t("code",[a._v("Character")]),a._v(" 对象表示的 "),t("code",[a._v("char")]),a._v(" 值。")])])]),a._v(" "),t("li",[t("p",[t("strong",[a._v("比较字符的方法")]),a._v("：")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("compareTo(char anotherChar)")]),a._v(": 按字典顺序比较两个字符。")]),a._v(" "),t("li",[t("code",[a._v("equals(Object obj)")]),a._v(": 判断两个字符是否相等。")])])])]),a._v(" "),t("h3",{attrs:{id:"用途"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用途"}},[a._v("#")]),a._v(" 用途")]),a._v(" "),t("p",[t("code",[a._v("Character")]),a._v(" 类在处理字符串和字符时非常有用，尤其是在需要判断字符类型、转换大小写、比较字符等操作时。例如，在用户输入验证、文本处理、数据加密等领域，"),t("code",[a._v("Character")]),a._v(" 类提供的方法可以简化开发工作。")]),a._v(" "),t("h3",{attrs:{id:"注意事项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[a._v("#")]),a._v(" 注意事项")]),a._v(" "),t("ol",[t("li",[t("strong",[a._v("字符编码")]),a._v("："),t("code",[a._v("char")]),a._v(" 类型使用 Unicode 编码，可以表示全球范围内的字符。")]),a._v(" "),t("li",[t("strong",[a._v("性能考虑")]),a._v("：对于大量字符的处理，直接使用 "),t("code",[a._v("char")]),a._v(" 类型可能比使用 "),t("code",[a._v("Character")]),a._v(" 类更高效，因为 "),t("code",[a._v("Character")]),a._v(" 类的方法调用可能引入额外的开销。")]),a._v(" "),t("li",[t("strong",[a._v("线程安全")]),a._v("："),t("code",[a._v("Character")]),a._v(" 类是线程安全的，因为它的实例是不可变的（immutable）。")])]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("char")]),a._v(" ch "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token char"}},[a._v("'a'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// Unicode 字符表示形式")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("char")]),a._v(" uniChar "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token char"}},[a._v("'\\u039A'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" \n \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 字符数组")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("char")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" charArray "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token char"}},[a._v("'a'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token char"}},[a._v("'b'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token char"}},[a._v("'c'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token char"}},[a._v("'d'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token char"}},[a._v("'e'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("Character类提供了一系列方法来操纵字符。可以使用Character的构造方法创建一个Character类对象，例如：")]),a._v(" "),t("p",[a._v("Character ch = new Character('a');")]),a._v(" "),t("p",[a._v("在某些情况下，Java编译器会自动创建一个Character对象。")]),a._v(" "),t("p",[a._v("例如，将一个char类型的参数传递给需要一个Character类型参数的方法时，那么编译器会自动地将char类型参数转换为Character对象。 这种特征称为装箱，反过来称为拆箱。")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 原始字符 'a' 装箱到 Character 对象 ch 中")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Character")]),a._v(" ch "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token char"}},[a._v("'a'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 原始字符 'x' 用 test 方法装箱")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 返回拆箱的值到 'c'")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("char")]),a._v(" c "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token char"}},[a._v("'x'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("如果 test 方法内部需要使用对象类型，可以通过调用 Character 类的静态方法 valueOf 来进行装箱操作")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("char")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("char")]),a._v(" c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 假设这里有一些操作")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//在这个方法中，参数 c 是一个原始字符类型。如果 test 方法内部需要使用对象类型，可以通过调用 Character 类的静态方法 valueOf 来进行装箱操作。")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Character")]),a._v(" ch "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Character")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("valueOf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//如果 test 方法内部需要使用原始类型，可以通过调用 Character 对象的 charValue 方法来进行拆箱操作。例如：")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("char")]),a._v(" c "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" ch"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("charValue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),t("h2",{attrs:{id:"用途-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用途-2"}},[a._v("#")]),a._v(" 用途：")]),a._v(" "),t("p",[a._v("装箱和拆箱操作在Java中是常见的，特别是在需要将原始数据类型传递给需要对象类型的方法时。")]),a._v(" "),t("p",[a._v("装箱操作允许原始数据类型在集合框架中使用，因为集合框架中的元素必须是对象类型。")]),a._v(" "),t("p",[a._v("拆箱操作允许在需要原始数据类型的地方使用对象类型。")]),a._v(" "),t("h2",{attrs:{id:"注意事项-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注意事项-2"}},[a._v("#")]),a._v(" 注意事项：")]),a._v(" "),t("p",[a._v("装箱和拆箱操作会带来一定的性能开销，因为它们涉及到对象的创建和销毁。")]),a._v(" "),t("p",[a._v("在性能敏感的应用中，应该尽量避免不必要的装箱和拆箱操作。")]),a._v(" "),t("p",[a._v("装箱和拆箱操作可能会引入空指针异常，如果尝试对一个 null 的 Character 对象进行拆箱操作，将会抛出 NullPointerException。")]),a._v(" "),t("p",[t("img",{attrs:{src:s(549),alt:"img_24.png"}})]),a._v(" "),t("hr"),a._v(" "),t("blockquote",[t("p",[a._v("学完这一篇，是不是对编程又有了新的理解呢？继续加油，下一篇等着你哦～")])])])}),[],!1,null,null,null);t.default=e.exports},549:function(a,t,s){a.exports=s.p+"assets/img/img_24.eae018b1.png"}}]);