(window.webpackJsonp=window.webpackJsonp||[]).push([[237],{1031:function(t,a,e){"use strict";e.r(a);var l=e(1),s=Object(l.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("blockquote",[a("p",[t._v("点击勘误"),a("a",{attrs:{href:"https://github.com/webVueBlog/JavaPlusDoc/issues",target:"_blank",rel:"noopener noreferrer"}},[t._v("issues"),a("OutboundLink")],1),t._v("，哪吒感谢大家的阅读")])]),t._v(" "),a("img",{attrs:{align:"right",width:"100",src:"https://cdn.jsdelivr.net/gh/YunYouJun/yun/images/yun-alpha-compressed.png"}}),t._v(" "),a("h2",{attrs:{id:"基本数据类型的转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型的转换"}},[t._v("#")]),t._v(" 基本数据类型的转换")]),t._v(" "),a("p",[t._v("数据类型转换的目的是确保在表达式求值时，不同类型的数据能够相互兼容。")]),t._v(" "),a("h3",{attrs:{id:"自动类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自动类型转换"}},[t._v("#")]),t._v(" 自动类型转换")]),t._v(" "),a("p",[t._v("自动类型转换（自动类型提升）是 Java 编译器在不需要显式转换的情况下，将一种基本数据类型自动转换为另一种基本数据类型的过程。这种转换通常发生在表达式求值期间，当不同类型的数据需要相互兼容时。自动类型转换遵循以下规则：")]),t._v(" "),a("ul",[a("li",[t._v("如果任一操作数是 double 类型，其他操作数将被转换为 double 类型。")]),t._v(" "),a("li",[t._v("否则，如果任一操作数是 float 类型，其他操作数将被转换为 float 类型。")]),t._v(" "),a("li",[t._v("否则，如果任一操作数是 long 类型，其他操作")]),t._v(" "),a("li",[t._v("否则，所有操作数将被转换为 int 类型。")])]),t._v(" "),a("p",[t._v("需要注意的是，自动类型转换只发生在兼容类型之间。例如，从较小的数据类型（如 int）到较大的数据类型（如 long 或 double）的转换是安全的，因为较大的数据类型可以容纳较小数据类型的所有可能值。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("byte -> short -> int -> long -> float -> double\nchar -> int -> long -> float -> double\n")])])]),a("p",[t._v("编译器帮我们自动做了隐式转换，一个值是 int 类型，但是它的值在 byte 类型的取值范围（-127到 128）内，那么编译器会自动将 int 类型转换为 byte 类型。")]),t._v(" "),a("p",[t._v("自动类型转换并不局限于小类型到大类型，也可以是大类型到小类型，只要值在小类型的取值范围内，编译器就会自动帮我们做隐式转换。")]),t._v(" "),a("p",[t._v("注意：char 类型比较特殊，char 自动转换成 int、long、float 和 double，但 byte 和 short 不能自动转换为 char，而且 char 也不能自动转换为 byte 或 short。")]),t._v(" "),a("h3",{attrs:{id:"强制类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#强制类型转换"}},[t._v("#")]),t._v(" 强制类型转换")]),t._v(" "),a("p",[t._v("强制类型转换是 Java 中将一种数据类型显式转换为另一种数据类型的过程。与自动类型转换不同，强制类型转换需要程序员显式地指定要执行的转换。强制类型转换在以下情况中可能需要：")]),t._v(" "),a("ul",[a("li",[t._v("将较大的数据类型转换为较小的数据类型。")]),t._v(" "),a("li",[t._v("将浮点数转换为整数。")]),t._v(" "),a("li",[t._v("将字符类型转换为数值类型。")])]),t._v(" "),a("p",[t._v("需要注意的是，强制类型转换可能会导致数据丢失或精度降低，因为目标类型可能无法容纳原始类型的所有可能值。因此，在进行强制类型转换时，需要确保转换后的值仍然在目标类型的范围内。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("double -> float -> long -> int -> char -> short -> byte\n")])])]),a("p",[t._v("需要注意的是，将 doubleValue 转换为 int 类型时，小数部分将被截断。因此，输出结果将是：Integer value: 42。在这种情况下，精度丢失是可以接受的，但在其他情况下，我们可能需要更加小心地处理类型转换以避免数据丢失。")])])}),[],!1,null,null,null);a.default=s.exports}}]);