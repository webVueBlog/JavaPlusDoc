(window.webpackJsonp=window.webpackJsonp||[]).push([[413],{1244:function(t,n,s){"use strict";s.r(n);var a=s(1),e=Object(a.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("blockquote",[n("p",[t._v("点击勘误"),n("a",{attrs:{href:"https://github.com/webVueBlog/JavaPlusDoc/issues",target:"_blank",rel:"noopener noreferrer"}},[t._v("issues"),n("OutboundLink")],1),t._v("，哪吒感谢大家的阅读")])]),t._v(" "),n("img",{attrs:{align:"right",width:"100",src:"https://cdn.jsdelivr.net/gh/YunYouJun/yun/images/yun-alpha-compressed.png"}}),t._v(" "),n("h2",{attrs:{id:"synchronized和lock有什么区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#synchronized和lock有什么区别"}},[t._v("#")]),t._v(" synchronized和lock有什么区别")]),t._v(" "),n("p",[t._v("synchronized和lock他们都是锁的实现，进行并发控制，synchronized它是一个关键字，而lock它是一个接口，lock接口下有多个实现类，如ReentrantLock，ReentrantReadWriteLock等。synchronized是非公平锁，ReentrantLock是可重入锁，也是公平锁，公平锁和非公平锁的区别是，公平锁是按照线程请求的顺序来分配锁，而非公平锁是随机分配的。")]),t._v(" "),n("p",[t._v("在Java中，"),n("code",[t._v("synchronized")]),t._v("和"),n("code",[t._v("Lock")]),t._v("都是用于实现线程同步的机制，但它们有一些关键的区别：")]),t._v(" "),n("ol",[n("li",[n("p",[n("strong",[t._v("使用方式")]),t._v("：")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("synchronized")]),t._v("是Java关键字，可以用于方法或代码块。当用于方法时，整个方法会被同步；当用于代码块时，只有代码块内的代码会被同步。")]),t._v(" "),n("li",[n("code",[t._v("Lock")]),t._v("是一个接口，需要显式地创建对象，并且需要手动获取和释放锁。")])])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("锁的粒度")]),t._v("：")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("synchronized")]),t._v("的锁是对象级别的，即一个对象只能有一个线程可以访问。")]),t._v(" "),n("li",[n("code",[t._v("Lock")]),t._v("的锁可以是对象级别的，也可以是更细粒度的，比如ReentrantLock可以锁住代码块中的某个变量。")])])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("锁的释放")]),t._v("：")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("synchronized")]),t._v("的锁会在方法执行完毕或者抛出异常时自动释放。")]),t._v(" "),n("li",[n("code",[t._v("Lock")]),t._v("的锁需要显式地调用"),n("code",[t._v("unlock()")]),t._v("方法释放。")])])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("锁的获取")]),t._v("：")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("synchronized")]),t._v("的锁获取是自动的，不需要显式地调用方法。")]),t._v(" "),n("li",[n("code",[t._v("Lock")]),t._v("的锁获取需要显式地调用"),n("code",[t._v("lock()")]),t._v("方法。")])])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("锁的公平性")]),t._v("：")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("synchronized")]),t._v("的锁是非公平的，即先请求锁的线程不一定会先获得锁。")]),t._v(" "),n("li",[n("code",[t._v("Lock")]),t._v("的实现可以是公平的，也可以是非公平的，这取决于具体的"),n("code",[t._v("Lock")]),t._v("实现。")])])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("异常处理")]),t._v("：")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("synchronized")]),t._v("的锁在发生异常时，会自动释放锁。")]),t._v(" "),n("li",[n("code",[t._v("Lock")]),t._v("的锁在发生异常时，需要手动释放锁，否则会导致锁无法释放，其他线程无法获得锁。")])])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("可中断性")]),t._v("：")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("synchronized")]),t._v("的锁是不可中断的，即一旦线程获得锁，除非释放锁，否则线程会一直阻塞。")]),t._v(" "),n("li",[n("code",[t._v("Lock")]),t._v("的锁是可中断的，可以通过"),n("code",[t._v("lockInterruptibly()")]),t._v("方法获取锁，如果线程在等待锁的过程中被中断，会抛出"),n("code",[t._v("InterruptedException")]),t._v("。")])])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("可重入性")]),t._v("：")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("synchronized")]),t._v("的锁是可重入的，即一个线程可以多次获得同一个锁。")]),t._v(" "),n("li",[n("code",[t._v("Lock")]),t._v("的锁也是可重入的，但需要显式地调用"),n("code",[t._v("lock()")]),t._v("方法获取锁。")])])])]),t._v(" "),n("p",[t._v("可重入性是指一个线程可以多次获得同一个锁，而不会导致死锁。")]),t._v(" "),n("p",[t._v("总的来说，"),n("code",[t._v("synchronized")]),t._v("和"),n("code",[t._v("Lock")]),t._v("都可以用于实现线程同步，但"),n("code",[t._v("Lock")]),t._v("提供了更多的灵活性和控制，可以更好地满足复杂的同步需求。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SynchronizedExample")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" count "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("increment")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        count"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("incrementWithLock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReentrantLock")]),t._v(" lock "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReentrantLock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            count"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);n.default=e.exports}}]);