(window.webpackJsonp=window.webpackJsonp||[]).push([[240],{1069:function(t,a,s){"use strict";s.r(a);var n=s(1),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"第37天"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第37天"}},[t._v("#")]),t._v(" 第37天")]),t._v(" "),a("h2",{attrs:{id:"java-iterator-迭代器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-iterator-迭代器"}},[t._v("#")]),t._v(" Java Iterator（迭代器）")]),t._v(" "),a("p",[t._v("Java迭代器（Iterator）是 Java 集合框架中的一种机制，是一种用于遍历集合（如列表、集合和映射等）的接口。")]),t._v(" "),a("p",[t._v("它提供了一种统一的方式来访问集合中的元素，而不需要了解底层集合的具体实现细节。")]),t._v(" "),a("p",[t._v("Java Iterator（迭代器）不是一个集合，它是一种用于访问集合的方法，可用于迭代 ArrayList 和 HashSet 等集合。")]),t._v(" "),a("p",[t._v("Iterator 是 Java 迭代器最简单的实现，ListIterator 是 Collection API 中的接口， 它扩展了 Iterator 接口。")]),t._v(" "),a("h3",{attrs:{id:"迭代器接口定义了几个方法-最常用的是以下三个"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迭代器接口定义了几个方法-最常用的是以下三个"}},[t._v("#")]),t._v(" 迭代器接口定义了几个方法，最常用的是以下三个：")]),t._v(" "),a("p",[t._v("next() - 返回迭代器的下一个元素，并将迭代器的指针移到下一个位置。")]),t._v(" "),a("p",[t._v("hasNext() - 用于判断集合中是否还有下一个元素可以访问。")]),t._v(" "),a("p",[t._v("remove() - 从集合中删除迭代器最后访问的元素（可选操作）。")]),t._v(" "),a("p",[a("code",[t._v("Iterator")]),t._v(" 是 Java 集合框架中的一个接口，它用于遍历集合中的元素。"),a("code",[t._v("Iterator")]),t._v(" 提供了一种标准的方法来遍历集合，而不需要了解集合的具体实现。"),a("code",[t._v("Iterator")]),t._v(" 接口定义了三个方法："),a("code",[t._v("hasNext()")]),t._v("、"),a("code",[t._v("next()")]),t._v(" 和 "),a("code",[t._v("remove()")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现原理"}},[t._v("#")]),t._v(" 实现原理")]),t._v(" "),a("p",[a("code",[t._v("Iterator")]),t._v(" 接口由集合类（如 "),a("code",[t._v("ArrayList")]),t._v("、"),a("code",[t._v("HashSet")]),t._v("、"),a("code",[t._v("HashMap")]),t._v(" 等）实现。当需要遍历集合时，可以调用集合的 "),a("code",[t._v("iterator()")]),t._v(" 方法获取一个 "),a("code",[t._v("Iterator")]),t._v(" 对象，然后使用 "),a("code",[t._v("Iterator")]),t._v(" 的方法来遍历集合。")]),t._v(" "),a("h3",{attrs:{id:"主要方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主要方法"}},[t._v("#")]),t._v(" 主要方法")]),t._v(" "),a("ol",[a("li",[a("strong",[a("code",[t._v("hasNext()")])]),t._v("：判断集合中是否还有元素。")]),t._v(" "),a("li",[a("strong",[a("code",[t._v("next()")])]),t._v("：返回集合中的下一个元素。")]),t._v(" "),a("li",[a("strong",[a("code",[t._v("remove()")])]),t._v("：从集合中删除当前元素。")])]),t._v(" "),a("h3",{attrs:{id:"用途"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用途"}},[t._v("#")]),t._v(" 用途")]),t._v(" "),a("p",[a("code",[t._v("Iterator")]),t._v(" 主要用于遍历集合中的元素。通过使用 "),a("code",[t._v("Iterator")]),t._v("，可以避免直接操作集合，从而提高代码的安全性和可维护性。")]),t._v(" "),a("h3",{attrs:{id:"注意事项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[t._v("#")]),t._v(" 注意事项")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("线程安全")]),t._v("："),a("code",[t._v("Iterator")]),t._v(" 本身不是线程安全的，如果需要在多线程环境下使用 "),a("code",[t._v("Iterator")]),t._v("，需要手动同步。")]),t._v(" "),a("li",[a("strong",[t._v("并发修改")]),t._v("：如果在遍历过程中修改集合（除了通过 "),a("code",[t._v("Iterator")]),t._v(" 的 "),a("code",[t._v("remove()")]),t._v(" 方法），可能会抛出 "),a("code",[t._v("ConcurrentModificationException")]),t._v(" 异常。")]),t._v(" "),a("li",[a("strong",[t._v("泛型")]),t._v("：使用泛型可以避免类型转换，提高代码的安全性和可读性。")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Iterator")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IteratorExample")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建 ArrayList")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"World"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取 Iterator")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Iterator")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" iterator "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("iterator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用 Iterator 遍历集合")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iterator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasNext")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" element "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" iterator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出:")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Hello")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// World")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("这段代码展示了如何使用 "),a("code",[t._v("Iterator")]),t._v(" 来遍历一个 "),a("code",[t._v("ArrayList")]),t._v(" 集合。在 "),a("code",[t._v("main")]),t._v(" 方法中，我们首先创建了一个 "),a("code",[t._v("ArrayList")]),t._v(" 并添加了两个元素。然后，我们通过调用 "),a("code",[t._v("list.iterator()")]),t._v(" 方法获取了一个 "),a("code",[t._v("Iterator")]),t._v(" 对象。接着，我们使用 "),a("code",[t._v("Iterator")]),t._v(" 的 "),a("code",[t._v("hasNext()")]),t._v(" 方法来检查集合中是否还有元素，如果有，则使用 "),a("code",[t._v("next()")]),t._v(" 方法获取下一个元素并打印出来。最后，我们遍历了整个集合并打印出了所有元素。")]),t._v(" "),a("hr"),t._v(" "),a("blockquote",[a("p",[t._v("编程路上的每一步都值得庆祝，下一篇继续我们的学习之旅！")])])])}),[],!1,null,null,null);a.default=e.exports}}]);