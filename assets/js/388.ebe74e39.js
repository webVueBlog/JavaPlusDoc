(window.webpackJsonp=window.webpackJsonp||[]).push([[388],{1213:function(t,n,e){"use strict";e.r(n);var i=e(1),v=Object(i.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("blockquote",[n("p",[t._v("点击勘误"),n("a",{attrs:{href:"https://github.com/webVueBlog/JavaPlusDoc/issues",target:"_blank",rel:"noopener noreferrer"}},[t._v("issues"),n("OutboundLink")],1),t._v("，哪吒感谢大家的阅读")])]),t._v(" "),n("img",{attrs:{align:"right",width:"100",src:"https://cdn.jsdelivr.net/gh/YunYouJun/yun/images/yun-alpha-compressed.png"}}),t._v(" "),n("h2",{attrs:{id:"springioc扫盲"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#springioc扫盲"}},[t._v("#")]),t._v(" SpringIoC扫盲")]),t._v(" "),n("p",[t._v("控制反转就是把创建和管理 bean 的过程转移给了第三方。而这个第三方，就是 Spring IoC Container，对于 IoC 来说，最重要的就是容器。")]),t._v(" "),n("p",[t._v("容器负责创建、配置和管理 bean，也就是它管理着 bean 的生命，控制着 bean 的依赖注入。")]),t._v(" "),n("p",[t._v("通俗点讲，因为项目中每次创建对象是很麻烦的，所以我们使用 Spring IoC 容器来管理这些对象，需要的时候你就直接用，不用管它是怎么来的、什么时候要销毁，只管用就好了。")]),t._v(" "),n("p",[t._v("举个例子，就好像父母没时间管孩子，就把小朋友交给托管所，就安心的去上班而不用管孩子了。托儿所，就是第三方容器，负责管理小朋友的吃喝玩乐；父母，相当于程序员，只管接送孩子，不用管他们吃喝。")]),t._v(" "),n("p",[t._v("等下，bean 又是什么？")]),t._v(" "),n("p",[t._v("Bean 其实就是包装了的 Object，无论是控制反转还是依赖注入，它们的主语都是 object，而 bean 就是由第三方包装好了的 object（想一下别人送礼物给你的时候都是要包装一下的，自己造的就免了）。")]),t._v(" "),n("p",[t._v("Bean 是 Spring 的主角，有种说法叫 Spring 就是面向 bean 的编程（Bean Oriented Programming, BOP）。")]),t._v(" "),n("h3",{attrs:{id:"深入理解-ioc"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#深入理解-ioc"}},[t._v("#")]),t._v(" 深入理解 IoC")]),t._v(" "),n("p",[t._v("这里用经典 class Rectangle 来举例：")]),t._v(" "),n("p",[t._v("两个变量：长和宽")]),t._v(" "),n("p",[t._v("自动生成 set() 方法和 toString() 方法")]),t._v(" "),n("p",[t._v("注意 ⚠️：一定要生成 set() 方法，因为 Spring IoC 就是通过这个 set() 方法注入的；toString() 方法是为了我们方便打印查看。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('public class Rectangle {\n\tprivate int width;\n\tprivate int length;\n\n\tpublic Rectangle() {\n\t\tSystem.out.println("Hello World!");\n\t}\n\n\n\tpublic void setWidth(int widTth) {\n\t\tthis.width = widTth;\n\t}\n\n\tpublic void setLength(int length) {\n\t\tthis.length = length;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn "Rectangle{" +\n\t\t\t\t"width=" + width +\n\t\t\t\t", length=" + length +\n\t\t\t\t\'}\';\n\t}\n}\n')])])]),n("p",[t._v("嗯，其实这个就是「解藕」的过程！")]),t._v(" "),n("p",[t._v("其实这就是 IoC 给属性赋值的实现方法，我们把「创建对象的过程」转移给了 set() 方法，而不是靠自己去 new，就不是自己创建的了。")]),t._v(" "),n("p",[t._v("这里我所说的“自己创建”，指的是直接在对象内部来 new，是程序主动创建对象的正向的过程；这里使用 set() 方法，是别人（test）给我的；而 IoC 是用它的容器来创建、管理这些对象的，其实也是用的这个 set() 方法，不信，你把这个这个方法去掉或者改个名字试试？")]),t._v(" "),n("p",[t._v("几个关键问题：")]),t._v(" "),n("p",[t._v("何为控制，控制的是什么？")]),t._v(" "),n("p",[t._v("答：是 bean 的创建、管理的权利，控制 bean 的整个生命周期。")]),t._v(" "),n("p",[t._v("何为反转，反转了什么？")]),t._v(" "),n("p",[t._v("答：把这个权利交给了 Spring 容器，而不是自己去控制，就是反转。由之前的自己主动创建对象，变成现在被动接收别人给我们的对象的过程，这就是反转。")]),t._v(" "),n("p",[t._v("举个生活中的例子，主动投资和被动投资。")]),t._v(" "),n("p",[t._v("自己炒股、选股票的人就是主动投资，主动权掌握在自己的手中；而买基金的人就是被动投资，把主动权交给了基金经理，除非你把这个基金卖了，否则具体选哪些投资产品都是基金经理决定的")]),t._v(" "),n("h2",{attrs:{id:"为何"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为何"}},[t._v("#")]),t._v(" 为何")]),t._v(" "),n("p",[t._v("那么为什么要用 IoC 这种思想呢？换句话说，IoC 能给我们带来什么好处？")]),t._v(" "),n("p",[t._v("答：解藕。")])])}),[],!1,null,null,null);n.default=v.exports}}]);