(window.webpackJsonp=window.webpackJsonp||[]).push([[189],{985:function(e,a,n){"use strict";n.r(a);var t=n(1),s=Object(t.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"设备网关后端设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设备网关后端设计"}},[e._v("#")]),e._v(" 设备网关后端设计")]),e._v(" "),a("h2",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),a("p",[e._v("设备网关是物联网系统中的核心组件，负责连接海量设备与云端服务，提供设备接入、协议转换、数据处理、消息路由等功能。本文档详细介绍基于Netty、Kafka和数据库的设备网关后端架构设计。")]),e._v(" "),a("h2",{attrs:{id:"系统架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#系统架构"}},[e._v("#")]),e._v(" 系统架构")]),e._v(" "),a("h3",{attrs:{id:"整体架构图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整体架构图"}},[e._v("#")]),e._v(" 整体架构图")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐\n│   设备层        │    │   网关层        │    │   服务层        │\n│                 │    │                 │    │                 │\n│ ┌─────────────┐ │    │ ┌─────────────┐ │    │ ┌─────────────┐ │\n│ │ IoT设备     │ │    │ │ 设备网关    │ │    │ │ 业务服务    │ │\n│ │ - 传感器    │ │◄──►│ │ - 协议适配  │ │◄──►│ │ - 设备管理  │ │\n│ │ - 执行器    │ │    │ │ - 数据处理  │ │    │ │ - 数据分析  │ │\n│ │ - 控制器    │ │    │ │ - 消息路由  │ │    │ │ - 告警服务  │ │\n│ └─────────────┘ │    │ └─────────────┘ │    │ └─────────────┘ │\n└─────────────────┘    └─────────────────┘    └─────────────────┘\n                              │\n                              ▼\n                    ┌─────────────────┐\n                    │   存储层        │\n                    │                 │\n                    │ ┌─────────────┐ │\n                    │ │ MySQL       │ │\n                    │ │ Redis       │ │\n                    │ │ InfluxDB    │ │\n                    │ └─────────────┘ │\n                    └─────────────────┘\n")])])]),a("h3",{attrs:{id:"核心组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心组件"}},[e._v("#")]),e._v(" 核心组件")]),e._v(" "),a("ol",[a("li",[a("strong",[e._v("设备接入层")]),e._v("：基于Netty实现高并发设备连接")]),e._v(" "),a("li",[a("strong",[e._v("协议适配层")]),e._v("：支持多种IoT协议（MQTT、CoAP、HTTP等）")]),e._v(" "),a("li",[a("strong",[e._v("消息处理层")]),e._v("：基于Kafka实现消息队列和流处理")]),e._v(" "),a("li",[a("strong",[e._v("数据存储层")]),e._v("：多种数据库满足不同存储需求")]),e._v(" "),a("li",[a("strong",[e._v("服务治理层")]),e._v("：提供监控、限流、熔断等功能")])]),e._v(" "),a("h2",{attrs:{id:"技术选型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#技术选型"}},[e._v("#")]),e._v(" 技术选型")]),e._v(" "),a("h3",{attrs:{id:"netty网络框架"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#netty网络框架"}},[e._v("#")]),e._v(" Netty网络框架")]),e._v(" "),a("p",[a("strong",[e._v("选择理由：")])]),e._v(" "),a("ul",[a("li",[e._v("高性能异步事件驱动")]),e._v(" "),a("li",[e._v("支持多种协议")]),e._v(" "),a("li",[e._v("内存管理优秀")]),e._v(" "),a("li",[e._v("社区活跃，生态完善")])]),e._v(" "),a("p",[a("strong",[e._v("核心特性：")])]),e._v(" "),a("ul",[a("li",[e._v("NIO/Epoll模型")]),e._v(" "),a("li",[e._v("零拷贝技术")]),e._v(" "),a("li",[e._v("内存池管理")]),e._v(" "),a("li",[e._v("编解码器链")])]),e._v(" "),a("h3",{attrs:{id:"kafka消息队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kafka消息队列"}},[e._v("#")]),e._v(" Kafka消息队列")]),e._v(" "),a("p",[a("strong",[e._v("选择理由：")])]),e._v(" "),a("ul",[a("li",[e._v("高吞吐量")]),e._v(" "),a("li",[e._v("分布式架构")]),e._v(" "),a("li",[e._v("持久化存储")]),e._v(" "),a("li",[e._v("流处理能力")])]),e._v(" "),a("p",[a("strong",[e._v("应用场景：")])]),e._v(" "),a("ul",[a("li",[e._v("设备数据采集")]),e._v(" "),a("li",[e._v("实时数据流处理")]),e._v(" "),a("li",[e._v("系统解耦")]),e._v(" "),a("li",[e._v("事件驱动架构")])]),e._v(" "),a("h3",{attrs:{id:"数据库设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库设计"}},[e._v("#")]),e._v(" 数据库设计")]),e._v(" "),a("p",[a("strong",[e._v("MySQL（关系型数据库）：")])]),e._v(" "),a("ul",[a("li",[e._v("设备元数据管理")]),e._v(" "),a("li",[e._v("用户权限管理")]),e._v(" "),a("li",[e._v("配置信息存储")])]),e._v(" "),a("p",[a("strong",[e._v("Redis（缓存数据库）：")])]),e._v(" "),a("ul",[a("li",[e._v("设备状态缓存")]),e._v(" "),a("li",[e._v("会话管理")]),e._v(" "),a("li",[e._v("热点数据缓存")])]),e._v(" "),a("p",[a("strong",[e._v("InfluxDB（时序数据库）：")])]),e._v(" "),a("ul",[a("li",[e._v("设备数据存储")]),e._v(" "),a("li",[e._v("监控指标存储")]),e._v(" "),a("li",[e._v("历史数据查询")])]),e._v(" "),a("h2",{attrs:{id:"详细设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#详细设计"}},[e._v("#")]),e._v(" 详细设计")]),e._v(" "),a("h3",{attrs:{id:"设备接入模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设备接入模块"}},[e._v("#")]),e._v(" 设备接入模块")]),e._v(" "),a("h4",{attrs:{id:"netty服务器配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#netty服务器配置"}},[e._v("#")]),e._v(" Netty服务器配置")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@Component\npublic class DeviceGatewayServer {\n    \n    private final EventLoopGroup bossGroup;\n    private final EventLoopGroup workerGroup;\n    private final DeviceChannelInitializer channelInitializer;\n    \n    public DeviceGatewayServer() {\n        this.bossGroup = new NioEventLoopGroup(1);\n        this.workerGroup = new NioEventLoopGroup();\n        this.channelInitializer = new DeviceChannelInitializer();\n    }\n    \n    public void start(int port) throws InterruptedException {\n        ServerBootstrap bootstrap = new ServerBootstrap();\n        bootstrap.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(channelInitializer)\n                .option(ChannelOption.SO_BACKLOG, 1024)\n                .childOption(ChannelOption.SO_KEEPALIVE, true)\n                .childOption(ChannelOption.TCP_NODELAY, true);\n                \n        ChannelFuture future = bootstrap.bind(port).sync();\n        log.info("设备网关启动成功，端口：{}", port);\n        future.channel().closeFuture().sync();\n    }\n}\n')])])]),a("h4",{attrs:{id:"协议处理器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协议处理器"}},[e._v("#")]),e._v(" 协议处理器")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@ChannelHandler.Sharable\npublic class DeviceProtocolHandler extends ChannelInboundHandlerAdapter {\n    \n    private final DeviceMessageProcessor messageProcessor;\n    private final DeviceSessionManager sessionManager;\n    \n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) {\n        if (msg instanceof DeviceMessage) {\n            DeviceMessage deviceMessage = (DeviceMessage) msg;\n            \n            // 设备认证\n            if (!authenticateDevice(deviceMessage)) {\n                ctx.close();\n                return;\n            }\n            \n            // 会话管理\n            sessionManager.updateSession(ctx.channel(), deviceMessage.getDeviceId());\n            \n            // 消息处理\n            messageProcessor.process(deviceMessage);\n        }\n    }\n    \n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n        log.error("设备连接异常", cause);\n        ctx.close();\n    }\n}\n')])])]),a("h3",{attrs:{id:"消息处理模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消息处理模块"}},[e._v("#")]),e._v(" 消息处理模块")]),e._v(" "),a("h4",{attrs:{id:"kafka生产者配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kafka生产者配置"}},[e._v("#")]),e._v(" Kafka生产者配置")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@Configuration\npublic class KafkaProducerConfig {\n    \n    @Bean\n    public ProducerFactory<String, Object> producerFactory() {\n        Map<String, Object> props = new HashMap<>();\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");\n        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);\n        props.put(ProducerConfig.ACKS_CONFIG, "all");\n        props.put(ProducerConfig.RETRIES_CONFIG, 3);\n        props.put(ProducerConfig.BATCH_SIZE_CONFIG, 16384);\n        props.put(ProducerConfig.LINGER_MS_CONFIG, 1);\n        props.put(ProducerConfig.BUFFER_MEMORY_CONFIG, 33554432);\n        \n        return new DefaultKafkaProducerFactory<>(props);\n    }\n    \n    @Bean\n    public KafkaTemplate<String, Object> kafkaTemplate() {\n        return new KafkaTemplate<>(producerFactory());\n    }\n}\n')])])]),a("h4",{attrs:{id:"消息路由服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消息路由服务"}},[e._v("#")]),e._v(" 消息路由服务")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@Service\npublic class MessageRoutingService {\n    \n    private final KafkaTemplate<String, Object> kafkaTemplate;\n    private final DeviceTopicResolver topicResolver;\n    \n    public void routeMessage(DeviceMessage message) {\n        // 根据消息类型和设备类型确定Topic\n        String topic = topicResolver.resolveTopic(message);\n        \n        // 构建Kafka消息\n        DeviceDataEvent event = DeviceDataEvent.builder()\n                .deviceId(message.getDeviceId())\n                .messageType(message.getMessageType())\n                .payload(message.getPayload())\n                .timestamp(System.currentTimeMillis())\n                .build();\n        \n        // 发送到Kafka\n        kafkaTemplate.send(topic, message.getDeviceId(), event)\n                .addCallback(\n                    result -> log.info("消息发送成功：{}", result),\n                    failure -> log.error("消息发送失败", failure)\n                );\n    }\n}\n')])])]),a("h3",{attrs:{id:"数据存储模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据存储模块"}},[e._v("#")]),e._v(" 数据存储模块")]),e._v(" "),a("h4",{attrs:{id:"设备实体设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设备实体设计"}},[e._v("#")]),e._v(" 设备实体设计")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@Entity\n@Table(name = "device_info")\npublic class DeviceInfo {\n    \n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    \n    @Column(unique = true, nullable = false)\n    private String deviceId;\n    \n    @Column(nullable = false)\n    private String deviceName;\n    \n    @Column(nullable = false)\n    private String deviceType;\n    \n    @Column(nullable = false)\n    private String protocol;\n    \n    @Enumerated(EnumType.STRING)\n    private DeviceStatus status;\n    \n    @Column(name = "last_online_time")\n    private LocalDateTime lastOnlineTime;\n    \n    @Column(name = "created_time")\n    private LocalDateTime createdTime;\n    \n    @Column(name = "updated_time")\n    private LocalDateTime updatedTime;\n    \n    // getters and setters\n}\n')])])]),a("h4",{attrs:{id:"时序数据存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时序数据存储"}},[e._v("#")]),e._v(" 时序数据存储")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@Service\npublic class TimeSeriesDataService {\n    \n    private final InfluxDBTemplate influxDBTemplate;\n    \n    public void saveDeviceData(DeviceDataPoint dataPoint) {\n        Point point = Point.measurement("device_data")\n                .tag("device_id", dataPoint.getDeviceId())\n                .tag("device_type", dataPoint.getDeviceType())\n                .tag("data_type", dataPoint.getDataType())\n                .addField("value", dataPoint.getValue())\n                .addField("unit", dataPoint.getUnit())\n                .time(dataPoint.getTimestamp(), TimeUnit.MILLISECONDS)\n                .build();\n        \n        influxDBTemplate.write(point);\n    }\n    \n    public List<DeviceDataPoint> queryDeviceData(String deviceId, \n                                                  LocalDateTime start, \n                                                  LocalDateTime end) {\n        String query = String.format(\n            "SELECT * FROM device_data WHERE device_id=\'%s\' AND time >= \'%s\' AND time <= \'%s\'",\n            deviceId, start.toString(), end.toString()\n        );\n        \n        QueryResult result = influxDBTemplate.query(new Query(query));\n        return parseQueryResult(result);\n    }\n}\n')])])]),a("h2",{attrs:{id:"性能优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能优化"}},[e._v("#")]),e._v(" 性能优化")]),e._v(" "),a("h3",{attrs:{id:"连接池优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#连接池优化"}},[e._v("#")]),e._v(" 连接池优化")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@Configuration\npublic class NettyServerConfig {\n    \n    @Bean\n    public EventLoopGroup bossGroup() {\n        return new NioEventLoopGroup(1, new DefaultThreadFactory("boss"));\n    }\n    \n    @Bean\n    public EventLoopGroup workerGroup() {\n        int workerThreads = Runtime.getRuntime().availableProcessors() * 2;\n        return new NioEventLoopGroup(workerThreads, new DefaultThreadFactory("worker"));\n    }\n}\n')])])]),a("h3",{attrs:{id:"内存管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存管理"}},[e._v("#")]),e._v(" 内存管理")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class DeviceMessageDecoder extends ByteToMessageDecoder {\n    \n    @Override\n    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) {\n        // 使用直接内存，避免内存拷贝\n        if (in.readableBytes() < 4) {\n            return;\n        }\n        \n        in.markReaderIndex();\n        int length = in.readInt();\n        \n        if (in.readableBytes() < length) {\n            in.resetReaderIndex();\n            return;\n        }\n        \n        // 使用slice避免内存拷贝\n        ByteBuf frame = in.readSlice(length);\n        out.add(parseMessage(frame));\n    }\n}\n")])])]),a("h3",{attrs:{id:"批量处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#批量处理"}},[e._v("#")]),e._v(" 批量处理")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("@Service\npublic class BatchMessageProcessor {\n    \n    private final List<DeviceMessage> messageBuffer = new ArrayList<>();\n    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\n    \n    @PostConstruct\n    public void init() {\n        // 每秒批量处理一次\n        scheduler.scheduleAtFixedRate(this::processBatch, 1, 1, TimeUnit.SECONDS);\n    }\n    \n    public void addMessage(DeviceMessage message) {\n        synchronized (messageBuffer) {\n            messageBuffer.add(message);\n            if (messageBuffer.size() >= 1000) {\n                processBatch();\n            }\n        }\n    }\n    \n    private void processBatch() {\n        List<DeviceMessage> batch;\n        synchronized (messageBuffer) {\n            if (messageBuffer.isEmpty()) {\n                return;\n            }\n            batch = new ArrayList<>(messageBuffer);\n            messageBuffer.clear();\n        }\n        \n        // 批量处理消息\n        batchProcess(batch);\n    }\n}\n")])])]),a("h2",{attrs:{id:"监控与运维"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#监控与运维"}},[e._v("#")]),e._v(" 监控与运维")]),e._v(" "),a("h3",{attrs:{id:"健康检查"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#健康检查"}},[e._v("#")]),e._v(" 健康检查")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@Component\npublic class GatewayHealthIndicator implements HealthIndicator {\n    \n    private final DeviceSessionManager sessionManager;\n    private final KafkaTemplate<String, Object> kafkaTemplate;\n    \n    @Override\n    public Health health() {\n        Health.Builder builder = new Health.Builder();\n        \n        try {\n            // 检查活跃连接数\n            int activeConnections = sessionManager.getActiveConnectionCount();\n            builder.withDetail("activeConnections", activeConnections);\n            \n            // 检查Kafka连接\n            kafkaTemplate.send("health-check", "ping").get(1, TimeUnit.SECONDS);\n            builder.withDetail("kafkaStatus", "UP");\n            \n            builder.up();\n        } catch (Exception e) {\n            builder.down(e);\n        }\n        \n        return builder.build();\n    }\n}\n')])])]),a("h3",{attrs:{id:"指标监控"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指标监控"}},[e._v("#")]),e._v(" 指标监控")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@Component\npublic class GatewayMetrics {\n    \n    private final Counter messageCounter;\n    private final Timer messageProcessingTimer;\n    private final Gauge activeConnectionsGauge;\n    \n    public GatewayMetrics(MeterRegistry meterRegistry, \n                         DeviceSessionManager sessionManager) {\n        this.messageCounter = Counter.builder("gateway.messages.total")\n                .description("Total number of messages processed")\n                .register(meterRegistry);\n                \n        this.messageProcessingTimer = Timer.builder("gateway.message.processing.time")\n                .description("Message processing time")\n                .register(meterRegistry);\n                \n        this.activeConnectionsGauge = Gauge.builder("gateway.connections.active")\n                .description("Number of active connections")\n                .register(meterRegistry, sessionManager, \n                         DeviceSessionManager::getActiveConnectionCount);\n    }\n    \n    public void incrementMessageCount() {\n        messageCounter.increment();\n    }\n    \n    public Timer.Sample startTimer() {\n        return Timer.start();\n    }\n}\n')])])]),a("h2",{attrs:{id:"安全设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安全设计"}},[e._v("#")]),e._v(" 安全设计")]),e._v(" "),a("h3",{attrs:{id:"设备认证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设备认证"}},[e._v("#")]),e._v(" 设备认证")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@Service\npublic class DeviceAuthenticationService {\n    \n    private final DeviceRepository deviceRepository;\n    private final RedisTemplate<String, String> redisTemplate;\n    \n    public boolean authenticate(String deviceId, String token) {\n        // 检查设备是否存在\n        DeviceInfo device = deviceRepository.findByDeviceId(deviceId);\n        if (device == null || device.getStatus() != DeviceStatus.ACTIVE) {\n            return false;\n        }\n        \n        // 验证Token\n        String cachedToken = redisTemplate.opsForValue().get("device:token:" + deviceId);\n        if (!Objects.equals(token, cachedToken)) {\n            return false;\n        }\n        \n        // 更新最后在线时间\n        device.setLastOnlineTime(LocalDateTime.now());\n        deviceRepository.save(device);\n        \n        return true;\n    }\n}\n')])])]),a("h3",{attrs:{id:"数据加密"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据加密"}},[e._v("#")]),e._v(" 数据加密")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("@Component\npublic class MessageEncryption {\n    \n    private final AESUtil aesUtil;\n    \n    public String encryptMessage(String message, String deviceId) {\n        String key = getDeviceKey(deviceId);\n        return aesUtil.encrypt(message, key);\n    }\n    \n    public String decryptMessage(String encryptedMessage, String deviceId) {\n        String key = getDeviceKey(deviceId);\n        return aesUtil.decrypt(encryptedMessage, key);\n    }\n    \n    private String getDeviceKey(String deviceId) {\n        // 从安全存储中获取设备密钥\n        return keyManager.getDeviceKey(deviceId);\n    }\n}\n")])])]),a("h2",{attrs:{id:"部署架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#部署架构"}},[e._v("#")]),e._v(" 部署架构")]),e._v(" "),a("h3",{attrs:{id:"docker容器化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker容器化"}},[e._v("#")]),e._v(" Docker容器化")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('FROM openjdk:11-jre-slim\n\nVOLUME /tmp\n\nCOPY target/device-gateway-*.jar app.jar\n\nEXPOSE 8080 1883 5683\n\nENTRYPOINT ["java", "-jar", "/app.jar"]\n')])])]),a("h3",{attrs:{id:"kubernetes部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes部署"}},[e._v("#")]),e._v(" Kubernetes部署")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: device-gateway\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: device-gateway\n  template:\n    metadata:\n      labels:\n        app: device-gateway\n    spec:\n      containers:\n      - name: device-gateway\n        image: device-gateway:latest\n        ports:\n        - containerPort: 8080\n        - containerPort: 1883\n        - containerPort: 5683\n        env:\n        - name: KAFKA_SERVERS\n          value: "kafka:9092"\n        - name: MYSQL_URL\n          value: "jdbc:mysql://mysql:3306/gateway"\n        resources:\n          requests:\n            memory: "512Mi"\n            cpu: "500m"\n          limits:\n            memory: "1Gi"\n            cpu: "1000m"\n')])])]),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),a("p",[e._v("本设计文档详细介绍了基于Netty、Kafka和数据库的设备网关后端架构，涵盖了系统架构、技术选型、详细设计、性能优化、监控运维、安全设计和部署架构等方面。该架构具有以下特点：")]),e._v(" "),a("ol",[a("li",[a("strong",[e._v("高性能")]),e._v("：基于Netty的异步非阻塞架构，支持海量设备并发连接")]),e._v(" "),a("li",[a("strong",[e._v("高可用")]),e._v("：分布式架构设计，支持水平扩展和故障转移")]),e._v(" "),a("li",[a("strong",[e._v("高可靠")]),e._v("：基于Kafka的消息队列保证数据不丢失")]),e._v(" "),a("li",[a("strong",[e._v("可扩展")]),e._v("：模块化设计，支持多种协议和设备类型")]),e._v(" "),a("li",[a("strong",[e._v("可监控")]),e._v("：完善的监控指标和健康检查机制")]),e._v(" "),a("li",[a("strong",[e._v("安全性")]),e._v("：设备认证、数据加密等安全措施")])]),e._v(" "),a("p",[e._v("该架构能够满足大规模物联网场景下的设备接入和数据处理需求，为构建稳定可靠的物联网平台提供了坚实的技术基础。")])])}),[],!1,null,null,null);a.default=s.exports}}]);