(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{1398:function(e,s,n){"use strict";n.r(s);var t=n(1),a=Object(t.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("blockquote",[s("p",[e._v("点击勘误"),s("a",{attrs:{href:"https://github.com/webVueBlog/JavaPlusDoc/issues",target:"_blank",rel:"noopener noreferrer"}},[e._v("issues"),s("OutboundLink")],1),e._v("，哪吒感谢大家的阅读")])]),e._v(" "),s("img",{attrs:{align:"right",width:"100",src:"https://cdn.jsdelivr.net/gh/YunYouJun/yun/images/yun-alpha-compressed.png"}}),e._v(" "),s("h2",{attrs:{id:"docker-jenkins-nginx-阿里云服务器实现前端自动化部署"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-jenkins-nginx-阿里云服务器实现前端自动化部署"}},[e._v("#")]),e._v(" Docker+Jenkins+Nginx+阿里云服务器实现前端自动化部署")]),e._v(" "),s("p",[e._v("搭建Docker+Nginx+Jenkins环境，用于实现前端自动化部署的流程。push提交代码到指定分支，自动触发jenkins进行持续集成和自动化部署。")]),e._v(" "),s("p",[e._v("部署完成后通过钉钉通知，部署的成功与否，成功后会将打包后的文件上传到服务器，通过nginx反向代理展现页面，失败则会打印相关的错误日志。")]),e._v(" "),s("p",[e._v("云服务器ECS")]),e._v(" "),s("p",[e._v("注意安全组配置TCP端口问题")]),e._v(" "),s("p",[s("img",{attrs:{src:n(803),alt:"img_68.png"}})]),e._v(" "),s("p",[e._v("进入实战，连接远程数据库")]),e._v(" "),s("p",[s("img",{attrs:{src:n(804),alt:"img_69.png"}})]),e._v(" "),s("h2",{attrs:{id:"centos-docker-安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#centos-docker-安装"}},[e._v("#")]),e._v(" CentOS Docker 安装")]),e._v(" "),s("p",[e._v("Docker 支持以下的 64 位 CentOS 版本：")]),e._v(" "),s("p",[e._v("CentOS 9 (stream)")]),e._v(" "),s("p",[e._v("更高版本...")]),e._v(" "),s("p",[e._v("必须启用 centos-extras 仓库，该仓库默认启用，如果您禁用了它，需要重新启用。")]),e._v(" "),s("p",[e._v("使用官方安装脚本自动安装")]),e._v(" "),s("p",[e._v("安装命令如下：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ curl -fsSL https://get.docker.com -o install-docker.sh\n$ sudo sh install-docker.sh\n")])])]),s("p",[e._v("手动安装")]),e._v(" "),s("p",[e._v("卸载旧版本")]),e._v(" "),s("p",[e._v("较旧的 Docker 版本称为 docker 或 docker-engine，如果已安装这些程序，请卸载它们以及相关的依赖项。")]),e._v(" "),s("p",[e._v("运行以下命令卸载旧版本：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("sudo dnf remove docker \\\ndocker-client \\\ndocker-client-latest \\\ndocker-common \\\ndocker-latest \\\ndocker-latest-logrotate \\\ndocker-logrotate \\\ndocker-engine\n")])])]),s("p",[e._v("安装")]),e._v(" "),s("p",[e._v("使用 Docker 仓库进行安装")]),e._v(" "),s("p",[e._v("在新主机上首次安装 Docker 之前，需要设置 Docker 仓库。之后，您可以从仓库安装和更新 Docker。")]),e._v(" "),s("p",[e._v("设置仓库")]),e._v(" "),s("p",[e._v("安装 dnf-plugins-core 包（提供管理 DNF 仓库的命令），并设置仓库。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("sudo dnf -y install dnf-plugins-core\n")])])]),s("p",[e._v("使用以下命令来设置稳定的仓库。")]),e._v(" "),s("p",[e._v("使用官方源地址（比较慢）")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n")])])]),s("p",[e._v("可以执行以下命令换成清华大学的镜像源：")]),e._v(" "),s("p",[e._v("清华大学镜像源")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("sed -i 's+https://download.docker.com+https://mirrors.tuna.tsinghua.edu.cn/docker-ce+' /etc/yum.repos.d/docker-ce.repo\n")])])]),s("p",[e._v("参考地址：https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/")]),e._v(" "),s("p",[e._v("安装")]),e._v(" "),s("p",[e._v("运行以下命令安装Docker：：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("sudo dnf install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n")])])]),s("p",[e._v("如果提示接受 GPG 密钥，验证指纹是否与 060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35 匹配，如果匹配则接受。")]),e._v(" "),s("p",[e._v("安装成功后，启动 Docker 引擎：")]),e._v(" "),s("p",[e._v("sudo systemctl start docker")]),e._v(" "),s("p",[e._v("如果希望 Docker 在系统启动时也启动可以使用以下命令：")]),e._v(" "),s("p",[e._v("sudo systemctl enable --now docker")]),e._v(" "),s("p",[e._v("以上命令会配置 Docker 的 systemd 服务，在系统启动时自动启动 Docker。")]),e._v(" "),s("p",[e._v("Docker 安装完默认未启动。并且已经创建好 docker 用户组，但该用户组下没有用户。")]),e._v(" "),s("p",[e._v("运行以下命令来验证安装是否成功：")]),e._v(" "),s("p",[e._v("sudo docker run hello-world")]),e._v(" "),s("p",[e._v("此命令会下载一个测试镜像，并在容器中运行，当容器运行时，会打印确认消息并退出。")]),e._v(" "),s("p",[e._v("卸载 docker")]),e._v(" "),s("p",[e._v("删除安装包：")]),e._v(" "),s("p",[e._v("yum remove docker-ce")]),e._v(" "),s("p",[e._v("删除镜像、容器、配置文件等内容：")]),e._v(" "),s("p",[e._v("rm -rf /var/lib/docker")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("sudo yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine\n\n")])])]),s("ol",[s("li",[e._v("安装Docker的依赖库。")])]),e._v(" "),s("p",[e._v("安装需要依赖库。yum-utils 提供了 yum-config-manager ，并且 device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2。")]),e._v(" "),s("p",[e._v("CentOS内并没有Docker相关的软件包，如果不执行下面命令，使用 yum安装Docker时，则找不到软件包。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("yum install -y yum-utils device-mapper-persistent-data lvm2\n\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[e._v("添加Docker CE的软件源信息")])]),e._v(" "),s("p",[e._v("下面两个软件源，选择一个使用")]),e._v(" "),s("p",[e._v("这个是官方软件源，但是比较慢。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("sudo yum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n\n")])])]),s("p",[e._v("这个是阿里云软件源，国内的话推荐使用这个。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("sudo yum-config-manager \\\n    --add-repo \\\n    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[e._v("安装Docker CE。")])]),e._v(" "),s("p",[e._v("注意：这里会自动安装相关的docker-ce、containerd.io、docker-ce-cli 和 docker-ce-rootless-extras 依赖，如果有询问直接 y 即可")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("sudo yum install docker-ce\n\n")])])]),s("ol",{attrs:{start:"4"}},[s("li",[e._v("启动Docker服务。")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// 设置开机自启\nsudo systemctl enable docker \n\n//  启动docker\nsudo systemctl start docker \n\n")])])]),s("p",[e._v("通过执行测试映像验证是否安装正确")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("sudo docker run hello-world\n\n")])])]),s("p",[e._v("Docker相关命令")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("sudo systemctl restart docker  // 重启Docker\nsudo docker version // 查看版本\nsudo docker info    // 查看相关信息\nsudo docker iamges  // 查看安装镜像\n\n")])])]),s("h2",{attrs:{id:"docker安装docker-compose"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker安装docker-compose"}},[e._v("#")]),e._v(" Docker安装docker-compose")]),e._v(" "),s("p",[e._v("docker-compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。下载docker-compose:")]),e._v(" "),s("p",[e._v("注意：请先看完所有安装方法再操作")]),e._v(" "),s("p",[e._v("Compose 简介")]),e._v(" "),s("p",[e._v("Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。")]),e._v(" "),s("p",[e._v("如果你还不了解 YML 文件配置，可以先阅读 YAML 入门教程。")]),e._v(" "),s("p",[e._v("Compose 使用的三个步骤：")]),e._v(" "),s("p",[e._v("使用 Dockerfile 定义应用程序的环境。")]),e._v(" "),s("p",[e._v("使用 docker-compose.yml 定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。")]),e._v(" "),s("p",[e._v("最后，执行 docker-compose up 命令来启动并运行整个应用程序。")]),e._v(" "),s("p",[e._v("docker-compose.yml 的配置案例如下（配置参数参考下文）：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("# yaml 配置实例\nversion: '3'\nservices:\n  web:\n    build: .\n    ports:\n    - \"5000:5000\"\n    volumes:\n    - .:/code\n    - logvolume01:/var/log\n    links:\n    - redis\n  redis:\n    image: redis\nvolumes:\n  logvolume01: {}\n")])])]),s("h2",{attrs:{id:"compose-安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#compose-安装"}},[e._v("#")]),e._v(" Compose 安装")]),e._v(" "),s("p",[e._v("Linux 上我们可以从 Github 上下载它的二进制包来使用，最新发行的版本地址："),s("code",[e._v("https://github.com/docker/compose/releases。")])]),e._v(" "),s("p",[e._v("运行以下命令以下载 Docker Compose 的当前稳定版本：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('$ sudo curl -L "https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose\n\n')])])]),s("p",[e._v("要安装其他版本的 Compose，请替换 v2.2.2。")]),e._v(" "),s("p",[e._v("Docker Compose 存放在 GitHub，不太稳定。")]),e._v(" "),s("p",[e._v("你可以也通过执行下面的命令，高速安装 Docker Compose。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("curl -L https://get.daocloud.io/docker/compose/releases/download/v2.4.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n")])])]),s("p",[e._v("将可执行权限应用于二进制文件：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ sudo chmod +x /usr/local/bin/docker-compose\n")])])]),s("p",[e._v("创建软链：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n")])])]),s("p",[e._v("测试是否安装成功：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ docker-compose version\ncker-compose version 1.24.1, build 4667896b\n")])])]),s("p",[e._v("注意： 对于 alpine，需要以下依赖包： py-pip，python-dev，libffi-dev，openssl-dev，gcc，libc-dev，和 make。")]),e._v(" "),s("h2",{attrs:{id:"macos"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#macos"}},[e._v("#")]),e._v(" macOS")]),e._v(" "),s("p",[e._v("Mac 的 Docker 桌面版和 Docker Toolbox 已经包括 Compose 和其他 Docker 应用程序，因此 Mac 用户不需要单独安装 Compose。Docker 安装说明可以参阅 MacOS Docker 安装。")]),e._v(" "),s("h2",{attrs:{id:"windows-pc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#windows-pc"}},[e._v("#")]),e._v(" windows PC")]),e._v(" "),s("p",[e._v("Windows 的 Docker 桌面版和 Docker Toolbox 已经包括 Compose 和其他 Docker 应用程序，因此 Windows 用户不需要单独安装 Compose。Docker 安装说明可以参阅 Windows Docker 安装。")]),e._v(" "),s("p",[e._v("使用")]),e._v(" "),s("p",[e._v("1、准备")]),e._v(" "),s("p",[e._v("创建一个测试目录：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ mkdir composetest\n$ cd composetest\n")])])]),s("p",[e._v("在测试目录中创建一个名为 app.py 的文件，并复制粘贴以下内容：")]),e._v(" "),s("p",[e._v("composetest/app.py 文件代码")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("import time\n\nimport redis\nfrom flask import Flask\n\napp = Flask(__name__)\ncache = redis.Redis(host='redis', port=6379)\n\n\ndef get_hit_count():\n    retries = 5\n    while True:\n        try:\n            return cache.incr('hits')\n        except redis.exceptions.ConnectionError as exc:\n            if retries == 0:\n                raise exc\n            retries -= 1\n            time.sleep(0.5)\n\n\n@app.route('/')\ndef hello():\n    count = get_hit_count()\n    return 'Hello World! I have been seen {} times.\\n'.format(count)\n")])])]),s("p",[e._v("在此示例中，redis 是应用程序网络上的 redis 容器的主机名，该主机使用的端口为 6379。")]),e._v(" "),s("p",[e._v("在 composetest 目录中创建另一个名为 requirements.txt 的文件，内容如下：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("flask\nredis\n")])])]),s("p",[e._v("2、创建 Dockerfile 文件")]),e._v(" "),s("p",[e._v("在 composetest 目录中，创建一个名为 Dockerfile 的文件，内容如下：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('FROM python:3.7-alpine\nWORKDIR /code\nENV FLASK_APP app.py\nENV FLASK_RUN_HOST 0.0.0.0\nRUN apk add --no-cache gcc musl-dev linux-headers\nCOPY requirements.txt requirements.txt\nRUN pip install -r requirements.txt\nCOPY . .\nCMD ["flask", "run"]\n')])])]),s("p",[e._v("Dockerfile 内容解释：")]),e._v(" "),s("p",[e._v("FROM python:3.7-alpine: 从 Python 3.7 映像开始构建镜像。")]),e._v(" "),s("p",[e._v("WORKDIR /code: 将工作目录设置为 /code。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("ENV FLASK_APP app.py\nENV FLASK_RUN_HOST 0.0.0.0\n")])])]),s("p",[e._v("设置 flask 命令使用的环境变量。")]),e._v(" "),s("p",[e._v("RUN apk add --no-cache gcc musl-dev linux-headers: 安装 gcc，以便诸如 MarkupSafe 和 SQLAlchemy 之类的 Python 包可以编译加速。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("COPY requirements.txt requirements.txt\nRUN pip install -r requirements.txt\n")])])]),s("p",[e._v("复制 requirements.txt 并安装 Python 依赖项。")]),e._v(" "),s("p",[e._v("COPY . .: 将 . 项目中的当前目录复制到 . 镜像中的工作目录。")]),e._v(" "),s("p",[e._v("CMD "),s("code",[e._v('["flask", "run"]')]),e._v(": 容器提供默认的执行命令为：flask run。")]),e._v(" "),s("p",[e._v("3、创建 docker-compose.yml")]),e._v(" "),s("p",[e._v("在测试目录中创建一个名为 docker-compose.yml 的文件，然后粘贴以下内容：")]),e._v(" "),s("p",[e._v("docker-compose.yml 配置文件")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('# yaml 配置\nversion: \'3\'\nservices:\n  web:\n    build: .\n    ports:\n      - "5000:5000"\n  redis:\n    image: "redis:alpine"\n')])])]),s("p",[e._v("该 Compose 文件定义了两个服务：web 和 redis。")]),e._v(" "),s("p",[e._v("web：该 web 服务使用从 Dockerfile 当前目录中构建的镜像。然后，它将容器和主机绑定到暴露的端口 5000。此示例服务使用 Flask Web 服务器的默认端口 5000 。")]),e._v(" "),s("p",[e._v("redis：该 redis 服务使用 Docker Hub 的公共 Redis 映像。")]),e._v(" "),s("p",[e._v("4、使用 Compose 命令构建和运行您的应用")]),e._v(" "),s("p",[e._v("在测试目录中，执行以下命令来启动应用程序：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker-compose up\n")])])]),s("p",[e._v("如果你想在后台执行该服务可以加上 -d 参数：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker-compose up -d\n")])])]),s("h2",{attrs:{id:"yml-配置指令参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#yml-配置指令参考"}},[e._v("#")]),e._v(" yml 配置指令参考")]),e._v(" "),s("p",[e._v("version")]),e._v(" "),s("p",[e._v("指定本 yml 依从的 compose 哪个版本制定的。")]),e._v(" "),s("p",[e._v("build")]),e._v(" "),s("p",[e._v("指定为构建镜像上下文路径：")]),e._v(" "),s("p",[e._v("例如 webapp 服务，指定为从上下文路径 ./dir/Dockerfile 所构建的镜像：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('version: "3.7"\nservices:\n  webapp:\n    build: ./dir\n')])])]),s("p",[e._v("或者，作为具有在上下文指定的路径的对象，以及可选的 Dockerfile 和 args：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('version: "3.7"\nservices:\n  webapp:\n    build:\n      context: ./dir\n      dockerfile: Dockerfile-alternate\n      args:\n        buildno: 1\n      labels:\n        - "com.example.description=Accounting webapp"\n        - "com.example.department=Finance"\n        - "com.example.label-with-empty-value"\n      target: prod\n')])])]),s("p",[e._v("context：上下文路径。")]),e._v(" "),s("p",[e._v("dockerfile：指定构建镜像的 Dockerfile 文件名。")]),e._v(" "),s("p",[e._v("args：添加构建参数，这是只能在构建过程中访问的环境变量。")]),e._v(" "),s("p",[e._v("labels：设置构建镜像的标签。")]),e._v(" "),s("p",[e._v("target：多层构建，可以指定构建哪一层。")]),e._v(" "),s("h2",{attrs:{id:"cap-add-cap-drop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cap-add-cap-drop"}},[e._v("#")]),e._v(" cap_add，cap_drop")]),e._v(" "),s("p",[e._v("添加或删除容器拥有的宿主机的内核功能。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("cap_add:\n  - ALL # 开启全部权限\n\ncap_drop:\n  - SYS_PTRACE # 关闭 ptrace权限\n")])])]),s("p",[e._v("cgroup_parent")]),e._v(" "),s("p",[e._v("为容器指定父 cgroup 组，意味着将继承该组的资源限制。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("cgroup_parent: m-executor-abcd\n")])])]),s("p",[e._v("command")]),e._v(" "),s("p",[e._v("覆盖容器启动的默认命令。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('command: ["bundle", "exec", "thin", "-p", "3000"]\n')])])]),s("p",[e._v("container_name")]),e._v(" "),s("p",[e._v("指定自定义容器名称，而不是生成的默认名称。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("container_name: my-web-container\n")])])]),s("h2",{attrs:{id:"depends-on"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#depends-on"}},[e._v("#")]),e._v(" depends_on")]),e._v(" "),s("p",[e._v("设置依赖关系。")]),e._v(" "),s("p",[e._v("docker-compose up ：以依赖性顺序启动服务。在以下示例中，先启动 db 和 redis ，才会启动 web。")]),e._v(" "),s("p",[e._v("docker-compose up SERVICE ：自动包含 SERVICE 的依赖项。在以下示例中，docker-compose up web 还将创建并启动 db 和 redis。")]),e._v(" "),s("p",[e._v("docker-compose stop ：按依赖关系顺序停止服务。在以下示例中，web 在 db 和 redis 之前停止。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('version: "3.7"\nservices:\n  web:\n    build: .\n    depends_on:\n      - db\n      - redis\n  redis:\n    image: redis\n  db:\n    image: postgres\n')])])]),s("p",[e._v("注意：web 服务不会等待 redis db 完全启动 之后才启动。")]),e._v(" "),s("p",[e._v("deploy")]),e._v(" "),s("p",[e._v("指定与服务的部署和运行有关的配置。只在 swarm 模式下才会有用。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("version: \"3.7\"\nservices:\n  redis:\n    image: redis:alpine\n    deploy:\n      mode：replicated\n      replicas: 6\n      endpoint_mode: dnsrr\n      labels: \n        description: \"This redis service label\"\n      resources:\n        limits:\n          cpus: '0.50'\n          memory: 50M\n        reservations:\n          cpus: '0.25'\n          memory: 20M\n      restart_policy:\n        condition: on-failure\n        delay: 5s\n        max_attempts: 3\n        window: 120s\n")])])]),s("p",[e._v("可以选参数：")]),e._v(" "),s("p",[e._v("endpoint_mode：访问集群服务的方式。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("endpoint_mode: vip \n# Docker 集群服务一个对外的虚拟 ip。所有的请求都会通过这个虚拟 ip 到达集群服务内部的机器。\nendpoint_mode: dnsrr\n# DNS 轮询（DNSRR）。所有的请求会自动轮询获取到集群 ip 列表中的一个 ip 地址。\n")])])]),s("p",[e._v("labels：在服务上设置标签。可以用容器上的 labels（跟 deploy 同级的配置） 覆盖 deploy 下的 labels。")]),e._v(" "),s("p",[e._v("mode：指定服务提供的模式。")]),e._v(" "),s("p",[e._v("replicated：复制服务，复制指定服务到集群的机器上。")]),e._v(" "),s("p",[e._v("global：全局服务，服务将部署至集群的每个节点。")]),e._v(" "),s("p",[e._v("图解：下图中黄色的方块是 replicated 模式的运行情况，灰色方块是 global 模式的运行情况。")]),e._v(" "),s("p",[s("img",{attrs:{src:n(805),alt:"img_70.png"}})]),e._v(" "),s("p",[e._v("replicas：mode 为 replicated 时，需要使用此参数配置具体运行的节点数量。")]),e._v(" "),s("p",[e._v("resources：配置服务器资源使用的限制，例如上例子，配置 redis 集群运行需要的 cpu 的百分比 和 内存的占用。避免占用资源过高出现异常。")]),e._v(" "),s("p",[e._v("restart_policy：配置如何在退出容器时重新启动容器。")]),e._v(" "),s("ul",[s("li",[e._v("condition：可选 none，on-failure 或者 any（默认值：any）。")]),e._v(" "),s("li",[e._v("delay：设置多久之后重启（默认值：0）。")]),e._v(" "),s("li",[e._v("max_attempts：尝试重新启动容器的次数，超出次数，则不再尝试（默认值：一直重试）。")]),e._v(" "),s("li",[e._v("window：设置容器重启超时时间（默认值：0）。")])]),e._v(" "),s("p",[e._v("rollback_config：配置在更新失败的情况下应如何回滚服务。")]),e._v(" "),s("ul",[s("li",[e._v("parallelism：一次要回滚的容器数。如果设置为0，则所有容器将同时回滚。")]),e._v(" "),s("li",[e._v("delay：每个容器组回滚之间等待的时间（默认为0s）。")]),e._v(" "),s("li",[e._v("failure_action：如果回滚失败，该怎么办。其中一个 continue 或者 pause（默认pause）。")]),e._v(" "),s("li",[e._v("monitor：每个容器更新后，持续观察是否失败了的时间 (ns|us|ms|s|m|h)（默认为0s）。")]),e._v(" "),s("li",[e._v("max_failure_ratio：在回滚期间可以容忍的故障率（默认为0）。")]),e._v(" "),s("li",[e._v("order：回滚期间的操作顺序。其中一个 stop-first（串行回滚），或者 start-first（并行回滚）（默认 stop-first ）。")])]),e._v(" "),s("p",[e._v("update_config：配置应如何更新服务，对于配置滚动更新很有用。")]),e._v(" "),s("ul",[s("li",[e._v("parallelism：一次更新的容器数。")]),e._v(" "),s("li",[e._v("delay：在更新一组容器之间等待的时间。")]),e._v(" "),s("li",[e._v("failure_action：如果更新失败，该怎么办。其中一个 continue，rollback 或者pause （默认：pause）。")]),e._v(" "),s("li",[e._v("monitor：每个容器更新后，持续观察是否失败了的时间 (ns|us|ms|s|m|h)（默认为0s）。")]),e._v(" "),s("li",[e._v("max_failure_ratio：在更新过程中可以容忍的故障率。")]),e._v(" "),s("li",[e._v("order：回滚期间的操作顺序。其中一个 stop-first（串行回滚），或者 start-first（并行回滚）（默认stop-first）。")])]),e._v(" "),s("p",[e._v("注：仅支持 V3.4 及更高版本。")]),e._v(" "),s("p",[e._v("devices")]),e._v(" "),s("p",[e._v("指定设备映射列表。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('devices:\n  - "/dev/ttyUSB0:/dev/ttyUSB0"\n\n')])])]),s("p",[e._v("dns")]),e._v(" "),s("p",[e._v("自定义 DNS 服务器，可以是单个值或列表的多个值。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("dns: 8.8.8.8\n\ndns:\n  - 8.8.8.8\n  - 9.9.9.9\n")])])]),s("p",[e._v("dns_search")]),e._v(" "),s("p",[e._v("自定义 DNS 搜索域。可以是单个值或列表。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("dns_search: example.com\n\ndns_search:\n  - dc1.example.com\n  - dc2.example.com\n")])])]),s("p",[e._v("entrypoint")]),e._v(" "),s("p",[e._v("覆盖容器默认的 entrypoint。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("entrypoint: /code/entrypoint.sh\n")])])]),s("p",[e._v("也可以是以下格式：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("entrypoint:\n    - php\n    - -d\n    - zend_extension=/usr/local/lib/php/extensions/no-debug-non-zts-20100525/xdebug.so\n    - -d\n    - memory_limit=-1\n    - vendor/bin/phpunit\n")])])]),s("p",[e._v("env_file")]),e._v(" "),s("p",[e._v("从文件添加环境变量。可以是单个值或列表的多个值。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("env_file: .env\n")])])]),s("p",[e._v("也可以是列表格式：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("env_file:\n  - ./common.env\n  - ./apps/web.env\n  - /opt/secrets.env\n")])])]),s("p",[e._v("environment")]),e._v(" "),s("p",[e._v("添加环境变量。您可以使用数组或字典、任何布尔值，布尔值需要用引号引起来，以确保 YML 解析器不会将其转换为 True 或 False。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("environment:\n  RACK_ENV: development\n  SHOW: 'true'\n")])])]),s("p",[e._v("expose")]),e._v(" "),s("p",[e._v("暴露端口，但不映射到宿主机，只被连接的服务访问。")]),e._v(" "),s("p",[e._v("仅可以指定内部端口为参数：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('expose:\n - "3000"\n - "8000"\n')])])]),s("p",[e._v("extra_hosts")]),e._v(" "),s("p",[e._v("添加主机名映射。类似 docker client --add-host。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('extra_hosts:\n - "somehost:162.242.195.82"\n - "otherhost:50.31.209.229"\n')])])]),s("p",[e._v("以上会在此服务的内部容器中 /etc/hosts 创建一个具有 ip 地址和主机名的映射关系：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("162.242.195.82  somehost\n50.31.209.229   otherhost\n")])])]),s("p",[e._v("healthcheck")]),e._v(" "),s("p",[e._v("用于检测 docker 服务是否健康运行。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('healthcheck:\n  test: ["CMD", "curl", "-f", "http://localhost"] # 设置检测程序\n  interval: 1m30s # 设置检测间隔\n  timeout: 10s # 设置检测超时时间\n  retries: 3 # 设置重试次数\n  start_period: 40s # 启动后，多少秒开始启动检测程序\n')])])]),s("p",[e._v("image")]),e._v(" "),s("p",[e._v("指定容器运行的镜像。以下格式都可以：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("image: redis\nimage: ubuntu:14.04\nimage: tutum/influxdb\nimage: example-registry.com:4000/postgresql\nimage: a4bc65fd # 镜像id\n")])])]),s("p",[e._v("logging")]),e._v(" "),s("p",[e._v("服务的日志记录配置。")]),e._v(" "),s("p",[e._v("driver：指定服务容器的日志记录驱动程序，默认值为json-file。有以下三个选项")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('driver: "json-file"\ndriver: "syslog"\ndriver: "none"\n')])])]),s("p",[e._v("仅在 json-file 驱动程序下，可以使用以下参数，限制日志得数量和大小。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('logging:\n  driver: json-file\n  options:\n    max-size: "200k" # 单个文件大小为200k\n    max-file: "10" # 最多10个文件\n')])])]),s("p",[e._v("当达到文件限制上限，会自动删除旧得文件。")]),e._v(" "),s("p",[e._v("syslog 驱动程序下，可以使用 syslog-address 指定日志接收地址。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('logging:\n  driver: syslog\n  options:\n    syslog-address: "tcp://192.168.0.42:123"\n')])])]),s("p",[e._v("network_mode")]),e._v(" "),s("p",[e._v("设置网络模式。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('network_mode: "bridge"\nnetwork_mode: "host"\nnetwork_mode: "none"\nnetwork_mode: "service:[service name]"\nnetwork_mode: "container:[container name/id]"\n')])])]),s("p",[e._v("networks")]),e._v(" "),s("p",[e._v("配置容器连接的网络，引用顶级 networks 下的条目 。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("services:\n  some-service:\n    networks:\n      some-network:\n        aliases:\n         - alias1\n      other-network:\n        aliases:\n         - alias2\nnetworks:\n  some-network:\n    # Use a custom driver\n    driver: custom-driver-1\n  other-network:\n    # Use a custom driver which takes special options\n    driver: custom-driver-2\n")])])]),s("p",[e._v("aliases ：同一网络上的其他容器可以使用服务名称或此别名来连接到对应容器的服务。")]),e._v(" "),s("p",[e._v("restart")]),e._v(" "),s("ul",[s("li",[e._v("no：是默认的重启策略，在任何情况下都不会重启容器。")]),e._v(" "),s("li",[e._v("always：容器总是重新启动。")]),e._v(" "),s("li",[e._v("on-failure：在容器非正常退出时（退出状态非0），才会重启容器。")]),e._v(" "),s("li",[e._v("unless-stopped：在容器退出时总是重启容器，但是不考虑在Docker守护进程启动时就已经停止了的容器")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('restart: "no"\nrestart: always\nrestart: on-failure\nrestart: unless-stopped\n')])])]),s("p",[e._v("注：swarm 集群模式，请改用 restart_policy。")]),e._v(" "),s("p",[e._v("secrets")]),e._v(" "),s("p",[e._v("存储敏感数据，例如密码：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('version: "3.1"\nservices:\n\nmysql:\n  image: mysql\n  environment:\n    MYSQL_ROOT_PASSWORD_FILE: /run/secrets/my_secret\n  secrets:\n    - my_secret\n\nsecrets:\n  my_secret:\n    file: ./my_secret.txt\n')])])]),s("p",[e._v("security_opt")]),e._v(" "),s("p",[e._v("修改容器默认的 schema 标签。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("security-opt：\n  - label:user:USER   # 设置容器的用户标签\n  - label:role:ROLE   # 设置容器的角色标签\n  - label:type:TYPE   # 设置容器的安全策略标签\n  - label:level:LEVEL  # 设置容器的安全等级标签\n")])])]),s("p",[e._v("stop_grace_period")]),e._v(" "),s("p",[e._v("指定在容器无法处理 SIGTERM (或者任何 stop_signal 的信号)，等待多久后发送 SIGKILL 信号关闭容器。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("stop_grace_period: 1s # 等待 1 秒\nstop_grace_period: 1m30s # 等待 1 分 30 秒 \n")])])]),s("p",[e._v("默认的等待时间是 10 秒。")]),e._v(" "),s("p",[e._v("stop_signal")]),e._v(" "),s("p",[e._v("设置停止容器的替代信号。默认情况下使用 SIGTERM 。")]),e._v(" "),s("p",[e._v("以下示例，使用 SIGUSR1 替代信号 SIGTERM 来停止容器。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("stop_signal: SIGUSR1\n")])])]),s("p",[e._v("sysctls")]),e._v(" "),s("p",[e._v("设置容器中的内核参数，可以使用数组或字典格式。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("sysctls:\n  net.core.somaxconn: 1024\n  net.ipv4.tcp_syncookies: 0\n\nsysctls:\n  - net.core.somaxconn=1024\n  - net.ipv4.tcp_syncookies=0\n")])])]),s("p",[e._v("tmpfs")]),e._v(" "),s("p",[e._v("在容器内安装一个临时文件系统。可以是单个值或列表的多个值。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("tmpfs: /run\n\ntmpfs:\n  - /run\n  - /tmp\n")])])]),s("p",[e._v("ulimits")]),e._v(" "),s("p",[e._v("覆盖容器默认的 ulimit。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("ulimits:\n  nproc: 65535\n  nofile:\n    soft: 20000\n    hard: 40000\n")])])]),s("p",[e._v("volumes")]),e._v(" "),s("p",[e._v("将主机的数据卷或者文件挂载到容器里。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('version: "3.7"\nservices:\n  db:\n    image: postgres:latest\n    volumes:\n      - "/localhost/postgres.sock:/var/run/postgres/postgres.sock"\n      - "/localhost/data:/var/lib/postgresql/data"\n')])])]),s("h2",{attrs:{id:"下载docker-compose"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#下载docker-compose"}},[e._v("#")]),e._v(" 下载docker-compose:")]),e._v(" "),s("p",[e._v("1.命令行进行下载")]),e._v(" "),s("p",[e._v("高速下载：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("curl -L https://get.daocloud.io/docker/compose/releases/download/v2.4.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n\n")])])]),s("p",[e._v("将可执行权限应用于二进制文件：安装完成后提升权限")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("sudo chmod +x /usr/local/bin/docker-compose\n\n")])])]),s("p",[e._v("检查是否安装成功：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker-compose -v\n\n")])])]),s("p",[e._v("注意：以下结果说明安装失败")]),e._v(" "),s("p",[s("img",{attrs:{src:n(806),alt:"img_71.png"}})]),e._v(" "),s("p",[e._v("此时需要切换到官方github链接去安装（较慢）")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('sudo curl -L "https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose\n\n')])])]),s("p",[e._v("以下为下载安装过程（较慢）")]),e._v(" "),s("p",[s("img",{attrs:{src:n(807),alt:"img_72.png"}})]),e._v(" "),s("h2",{attrs:{id:"_2-下载二进制文件进行安装-本人使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-下载二进制文件进行安装-本人使用"}},[e._v("#")]),e._v(" 2.下载二进制文件进行安装 (本人使用)")]),e._v(" "),s("p",[e._v("确定你的系统架构：")]),e._v(" "),s("p",[e._v("运行uname -s -m命令来确定你的系统类型和架构。例如，你可能会得到Linux x86_64这样的输出，这意味着你正在使用Linux系统，并且是64位架构。")]),e._v(" "),s("p",[e._v("访问Docker Compose的GitHub页面：")]),e._v(" "),s("p",[e._v("打开浏览器，访问Docker Compose的GitHub页面：Releases · docker/compose · GitHub")]),e._v(" "),s("p",[e._v("下载二进制文件：")]),e._v(" "),s("p",[e._v("在GitHub页面上，找到你想要安装的Docker Compose版本。注意要看是否为稳定版（Latest release）")]),e._v(" "),s("p",[e._v("点击该版本，进入该版本的详细页面。")]),e._v(" "),s("p",[e._v("在该页面上，找到适合你系统架构的二进制文件。例如，对于Linux 64位系统，你可能会看到一个名为docker-compose-Linux-x86_64的文件。（如果没有该文件则看其他版本，我的是v2.24.6）")]),e._v(" "),s("p",[e._v("将二进制文件移动到适当的位置：")]),e._v(" "),s("p",[e._v("将下载的二进制文件移动到你的系统路径中，以便你可以在任何位置运行它。通常，你可以将其移动到/usr/local/bin/目录下。")]),e._v(" "),s("h2",{attrs:{id:"可视化操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可视化操作"}},[e._v("#")]),e._v(" 可视化操作")]),e._v(" "),s("p",[e._v("打开新文件管理")]),e._v(" "),s("p",[s("img",{attrs:{src:n(808),alt:"img_73.png"}})]),e._v(" "),s("p",[e._v("进入到 /usr/local/bin 目录中")]),e._v(" "),s("p",[s("img",{attrs:{src:n(809),alt:"img_74.png"}})]),e._v(" "),s("p",[e._v("把下载好的二进制文件上传到该目录")]),e._v(" "),s("p",[s("img",{attrs:{src:n(810),alt:"img_75.png"}})]),e._v(" "),s("p",[e._v("等待上传完成")]),e._v(" "),s("p",[s("img",{attrs:{src:n(811),alt:"img_76.png"}})]),e._v(" "),s("p",[e._v("上传完成后 重命名为 docker-compose")]),e._v(" "),s("p",[s("img",{attrs:{src:n(812),alt:"img_77.png"}})]),e._v(" "),s("p",[e._v("设置可执行权限：")]),e._v(" "),s("p",[e._v("为Docker Compose二进制文件设置可执行权限。运行以下命令：将 /usr/local/bin/docker-compose 文件设置为可执行文件，这样可以通过命令行直接执行 docker-compose 命令，而不必指定脚本的路径。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("sudo chmod +x /usr/local/bin/docker-compose\n\n")])])]),s("p",[e._v("检查是否安装成功：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker-compose -v\n\n")])])]),s("p",[e._v("安装完成！")]),e._v(" "),s("p",[s("img",{attrs:{src:n(813),alt:"img_78.png"}})]),e._v(" "),s("h2",{attrs:{id:"docker安装nginx和jenkins服务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker安装nginx和jenkins服务"}},[e._v("#")]),e._v(" Docker安装Nginx和Jenkins服务")]),e._v(" "),s("p",[e._v("安装Nginx和Jenkins")]),e._v(" "),s("p",[e._v("docker镜像拉取nginx和jenkins环境命令如下：")]),e._v(" "),s("p",[e._v("拉取最新版的 Nginx 镜像")]),e._v(" "),s("p",[e._v("这里我们拉取官方的最新版本的镜像：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker pull nginx:latest\n\n")])])]),s("p",[s("img",{attrs:{src:n(814),alt:"img_79.png"}})]),e._v(" "),s("p",[e._v("拉取jenkins")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker pull jenkins/jenkins:lts\n\n")])])]),s("p",[s("img",{attrs:{src:n(815),alt:"img_80.png"}})]),e._v(" "),s("p",[e._v("安装完成后执行docker images可以清晰的看到当前docker下存在的镜像。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker images\n\n")])])]),s("p",[s("img",{attrs:{src:n(816),alt:"img_81.png"}})]),e._v(" "),s("p",[e._v("创建docker的相关目录，方便维护")]),e._v(" "),s("blockquote",[s("p",[e._v("这条命令 mkdir /docker 的意思是在根目录下创建一个名为 docker 的新目录。 mkdir 是“make directory”的缩写，用于创建新的目录。在这里， /docker 表示在根目录下创建一个名为 docker 的目录。这里假设一个项目中有两个端（admin 、h5端）")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("mkdir /docker           \nmkdir /docker/compose    \nmkdir /docker/jenkins_home   \nmkdir /docker/nginx      \nmkdir /docker/nginx/conf \nmkdir /docker/html       \nmkdir /docker/html/admin   \nmkdir /docker/html/h5  \n\n")])])]),s("p",[e._v("/docker/compose是放置docker-compose.yml配置文件，jenkin_home是放置jenkins相关文件，/nginx/conf是放置nginx.conf配置文件,html是放置代码文件。")]),e._v(" "),s("p",[s("img",{attrs:{src:n(817),alt:"img_82.png"}})]),e._v(" "),s("p",[e._v("docker-compose.yml配置文件如下：(要新建相对应的文件)")]),e._v(" "),s("p",[s("img",{attrs:{src:n(818),alt:"img_83.png"}})]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("version: '3'\n\nnetworks:\n  frontend:\n    external: true\n\nservices:                                      # 容器\n  docker_jenkins:\n    user: root                                 # root权限\n    restart: always                            # 重启方式\n    image: jenkins/jenkins:lts                 # 使用的镜像\n    container_name: jenkins                    # 容器名称\n#    environment:\n#      - TZ=Asia/Shanghai\n#      - \"JENKINS_OPTS=--prefix=/jenkins_home\" ## 自定义 jenkins 访问前缀（上下文context）\n\n\n    ports:                                     # 对外暴露的端口定义\n      - 8080:8080\n      \n\n    volumes:                                   # 卷挂载路径\n      - /docker/jenkins_home/:/var/jenkins_home     # 挂载到容器内的jenkins_home目录\n      - /usr/local/bin/docker-compose:/usr/local/bin/docker-compose\n  \n  docker_nginx:                            # nginx-dev环境\n    restart: always\n    image: nginx\n    container_name: nginx\n    ports:\n      - 80:80\n    volumes:\n      - /docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf\n      - /docker/html:/usr/share/nginx/html\n      - /docker/nginx/logs:/var/log/nginx\n\n")])])]),s("p",[e._v("在Docker的上下文中，特别是当使用docker-compose.yml文件来定义和运行容器时，volumes键用于挂载宿主机上的目录或文件到容器内的目录或文件。")]),e._v(" "),s("blockquote",[s("p",[e._v("1./docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf")])]),e._v(" "),s("p",[e._v("这表示将宿主机上的/docker/nginx/conf/nginx.conf文件挂载到容器内的/etc/nginx/nginx.conf文件。这样，当容器启动时，它会使用宿主机上这个路径的nginx.conf文件作为Nginx的配置文件。任何对容器内/etc/nginx/nginx.conf文件的修改都会反映到宿主机上的/docker/nginx/conf/nginx.conf文件，反之亦然（注意，这里假设是双向挂载，但Docker的默认行为可能会根据文件系统的不同而有所不同）。")]),e._v(" "),s("blockquote",[s("p",[e._v("2./docker/html:/usr/share/nginx/html")])]),e._v(" "),s("p",[e._v("这表示将宿主机上的/docker/html目录挂载到容器内的/usr/share/nginx/html目录。这通常用于存放Nginx服务的静态网页文件。当容器启动时，它会从容器内的/usr/share/nginx/html目录（实际上是宿主机上的/docker/html目录）读取这些文件来提供Web服务。任何在容器内对/usr/share/nginx/html目录的修改都会反映到宿主机上的/docker/html目录，反之亦然。")]),e._v(" "),s("blockquote",[s("p",[e._v("3./docker/nginx/logs:/var/log/nginx")])]),e._v(" "),s("p",[e._v("这表示将宿主机上的/docker/nginx/logs目录挂载到容器内的/var/log/nginx目录。Nginx的日志文件通常存放在/var/log/nginx目录下，通过这个挂载，你可以将容器的日志保存在宿主机上，方便查看和管理。任何在容器内对/var/log/nginx目录的修改（例如新的日志文件被创建或现有日志文件的内容被更新）都会反映到宿主机上的/docker/nginx/logs目录。")]),e._v(" "),s("p",[e._v("nginx.conf配置")]),e._v(" "),s("p",[s("img",{attrs:{src:n(819),alt:"img_84.png"}})]),e._v(" "),s("p",[e._v("root和alias的区别")]),e._v(" "),s("ul",[s("li",[e._v("root与alias主要区别在于nginx如何解释location后面的uri，这会使两者分别以不同的方式将请求映射到服务器文件上。")]),e._v(" "),s("li",[e._v("root的处理结果是：root路径＋location路径。alias的处理结果是：使用alias路径替换location路径")]),e._v(" "),s("li",[e._v("alias是一个目录别名的定义，root则是最上层目录的定义。")]),e._v(" "),s("li",[e._v("一个重要的区别是alias后面必须要用“/”结束，否则会找不到文件的。而root则可有可无。")]),e._v(" "),s("li",[e._v("alias只能位于location块中。（root可以不放在location中）")])]),e._v(" "),s("p",[e._v("location /admin 这定义了当请求的URI以/admin开始时（例如，/admin/, /admin/page.html, /admin/some/path等）如何响应这些请求。")]),e._v(" "),s("ul",[s("li",[e._v("#alias指令指定了一个目录，Nginx将从该目录提供文件以响应匹配的URI。")]),e._v(" "),s("li",[e._v("#这里，/usr/share/nginx/html/h5/dist是Nginx服务器上实际存储文件的目录。")]),e._v(" "),s("li",[e._v("#与root指令不同，alias指令会将请求的URI路径替换为alias指定的路径。")]),e._v(" "),s("li",[e._v("#例如，对于请求/admin/page.html，Nginx将尝试从/usr/share/nginx/html/admin/dist/page.html提供文件，而不是从/usr/share/nginx/html/h5/dist/h5/page.html（如果使用root指令）。")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('# nginx.conf \n# main段配置信息\nuser  nginx;                                # 运行用户，默认即是nginx，可以不进行设置\nworker_processes  2;                        # Nginx 进程数，一般设置为和 CPU 核数一样\nerror_log  /var/log/nginx/error.log warn;   # Nginx 的错误日志存放目录\npid        /var/run/nginx.pid;              # Nginx 服务启动时的 pid 存放位置\n \n# events段配置信息 \nevents {\n#    use epoll;     # 使用epoll的I/O模型(如果你不知道Nginx该使用哪种轮询方法，会自动选择一个最适合你操作系统的)\n    worker_connections  1024;  # 每个进程允许最大并发数\n}\n \n \nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n    # 设置日志模式 默认即可\n    log_format  main  \'$remote_addr - $remote_user [$time_local] "$request" \'\n                      \'$status $body_bytes_sent "$http_referer" \'\n                      \'"$http_user_agent" "$http_x_forwarded_for"\';\n \n    access_log  /var/log/nginx/access.log  main; # Nginx访问日志存放位置\n\n    sendfile            on;   # 开启高效传输模式\n    tcp_nopush          on;   # 减少网络报文段的数量\n    keepalive_timeout   65;   # 保持连接的时间，也叫超时时间，单位秒\n    gzip  on;\n\n    # server段配置信息\n    server {\n            #监听的端口\n        listen  80;               # 配置监听的端口\n        server_name  localhost;   # 配置的域名\n\n        #location目录后加"/",只能匹配目录，不加“/”不仅可以匹配目录还对目录进行模糊匹配。而proxy_pass无论加不加“/”,代理跳转地址都直接拼接。\n        #  http://localhost/jenkins_home/xxx -> http://localhost:8080/jenkins_home/xxx\n        location /jenkins_home/ {  \n        # 假设你的Jenkins服务可以通过宿主机上的8080端口访问  \n        proxy_pass http://localhost:8080;  \n        # 添加其他需要的Nginx指令，如proxy_set_header等  \n        }  \n               \n               \n        #假设一个项目中有 admin 端\n        # location /admin   这定义了当请求的URI以/h5开始时（例如，/admin/, /admin/page.html, /admin/some/path等）如何响应这些请求。\n        #alias指令指定了一个目录，Nginx将从该目录提供文件以响应匹配的URI。\n        #这里，/usr/share/nginx/html/h5/dist是Nginx服务器上实际存储文件的目录。\n        #与root指令不同，alias指令会将请求的URI路径替换为alias指定的路径。\n        #例如，对于请求/admin/page.html，Nginx将尝试从/usr/share/nginx/html/admin/dist/page.html提供文件，\n        #而不是从/usr/share/nginx/html/h5/dist/h5/page.html（如果使用root指令）。\n\n        location /admin {\n        #linux下HTML文件夹,就是你的前端项目文件夹\n        # root是完整路径:相当于/usr/share/nginx/html + /admin + /dist/index.html  \n        # alias是重定向：相当于 /usr/share/nginx/html/admin/dist + /index.html\n        #   root  /usr/share/nginx/html; \n        #注意这里已经在docker做了挂载，所以要写映射目录，而不是硬盘目录（也就是docker下的目录）\n        alias  /usr/share/nginx/html/admin/dist;\n\n        #输入网址（server_name：port）后，默认的访问页面\n        #这指定了当请求的是一个目录（如/h5/）而不是一个具体的文件时，Nginx应该提供哪个文件作为默认页面。\n        #在这里，如果请求的是/h5/并且/usr/share/nginx/html/h5/dist/目录中存在index.html文件，那么Nginx将提供该文件作为响应。\n        #使用root方式写法\n        #index  dist/index.html;  \n\n        #使用alias  写法\n        index  index.html;  # 默认首页文件  \n        #try_files指令用于尝试不同的URI路径来服务请求，并在所有指定路径都失败时提供一个回退。 这里可以自行写一个跟index.html文件同级的文件去回退\n        # try_files $uri $uri/ /error.html;\n        }\n\n        #假设一个项目有 H5 端\n        location /h5 {\n            alias  /usr/share/nginx/html/h5/dist;\n            index  index.html;  \n        }\n    }\n}\n\n')])])]),s("h2",{attrs:{id:"环境启动"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#环境启动"}},[e._v("#")]),e._v(" 环境启动")]),e._v(" "),s("p",[e._v("进入到 docker-compose 同级目录下运行 docker-compose （不然会报错）")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("cd /docker/compose\n\n")])])]),s("p",[s("img",{attrs:{src:n(820),alt:"img_85.png"}})]),e._v(" "),s("p",[e._v("执行 docker-compose up -d 去运行 docker-compose")]),e._v(" "),s("p",[e._v("docker-compose up -d")]),e._v(" "),s("p",[e._v("查看容器运行状态")]),e._v(" "),s("p",[e._v("docker ps -a")]),e._v(" "),s("p",[e._v("分别有了相对应的端口证明运行成功")]),e._v(" "),s("p",[e._v("注意：一定要开启安全组相对应端口（在开头有讲）,以及如果改动了nginx配置文件记得要执行 docker restart nginx 进行重启")]),e._v(" "),s("p",[s("img",{attrs:{src:n(821),alt:"img_86.png"}})]),e._v(" "),s("h2",{attrs:{id:"nginx配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx配置"}},[e._v("#")]),e._v(" Nginx配置")]),e._v(" "),s("p",[e._v("验证nginx环境")]),e._v(" "),s("p",[e._v("在对应目录/docker/html/admin/dist、/docker/html/h5/dist各新建一个index.html")]),e._v(" "),s("p",[e._v("附上代码")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n  </head>\n  <body>\n    <h1>这是一个admin测试</h1>\n  </body>\n</html>\n\n')])])]),s("p",[e._v("输入 "),s("code",[e._v("http://服务器ip地址/admin")]),e._v(" 如果页面正常打开代表nginx配置成功")]),e._v(" "),s("p",[s("img",{attrs:{src:n(822),alt:"img_87.png"}})]),e._v(" "),s("p",[e._v("然后删除对应的dist文件夹，后续会自动生成")]),e._v(" "),s("p",[e._v("验证Jenkins")]),e._v(" "),s("p",[e._v("浏览器输入服务器地址:8080/")]),e._v(" "),s("p",[s("img",{attrs:{src:n(823),alt:"img_88.png"}})]),e._v(" "),s("p",[e._v("会提示要输入密码，密码位于docker/jenkins_home/secrets/initialAdminPassword，")]),e._v(" "),s("h2",{attrs:{id:"jenkins配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jenkins配置"}},[e._v("#")]),e._v(" Jenkins配置")]),e._v(" "),s("p",[e._v("安装推荐插件即可，等待安装完成")]),e._v(" "),s("p",[s("img",{attrs:{src:n(824),alt:"img_89.png"}})]),e._v(" "),s("p",[e._v("创建相关的jenkins账号（也可使用admin登录）")]),e._v(" "),s("p",[e._v("1.设置中文")]),e._v(" "),s("p",[e._v("下载 local 插件")]),e._v(" "),s("p",[e._v("选择【Manage Jenkins】-> 【Plugins】-> 【Plugins】->")]),e._v(" "),s("p",[s("img",{attrs:{src:n(825),alt:"img_90.png"}})]),e._v(" "),s("p",[s("img",{attrs:{src:n(826),alt:"img_91.png"}})]),e._v(" "),s("p",[e._v("如已安装，执行重启即可,地址栏输入http://ip:端口/restart")]),e._v(" "),s("p",[s("img",{attrs:{src:n(827),alt:"img_92.png"}})]),e._v(" "),s("p",[e._v("2.安装Publish Over SSH、NodeJS")]),e._v(" "),s("p",[e._v("同样的方式这里不再具体操作，【Dashboard】——>【Manage Jenkins】——>【Plugins】——>【Available plugins】，搜索Publish Over SSH、NodeJS，安装后重启。")]),e._v(" "),s("p",[e._v("（1）Publish Over SSH配置远程服务器")]),e._v(" "),s("p",[e._v("Publish Over SSH用来连接远程服务器，接下来去设置连接远程服务器验证方式，本案例采用密码验证。")]),e._v(" "),s("p",[s("img",{attrs:{src:n(828),alt:"img_93.png"}})]),e._v(" "),s("p",[e._v("找到Publish Over SSH，点击新增")]),e._v(" "),s("p",[s("img",{attrs:{src:n(829),alt:"img_94.png"}})]),e._v(" "),s("p",[e._v("在新增后出来的面板中输入信息，之后点击高级")]),e._v(" "),s("p",[s("img",{attrs:{src:n(830),alt:"img_95.png"}})]),e._v(" "),s("p",[e._v("输入密码、服务器端口，并点击Test Configuration Success进行测试，显示successs则成功，之后先点击应用，再保存")]),e._v(" "),s("p",[s("img",{attrs:{src:n(831),alt:"img_96.png"}})]),e._v(" "),s("p",[e._v("（2）NodeJS配置")]),e._v(" "),s("p",[e._v("【Dashboard】——>【系统管理】——>【全局工具配置】——>【NodeJS 安装】")]),e._v(" "),s("p",[s("img",{attrs:{src:n(832),alt:"img_97.png"}})]),e._v(" "),s("p",[e._v("点击新增NodeJS")]),e._v(" "),s("p",[s("img",{attrs:{src:n(833),alt:"img_98.png"}})]),e._v(" "),s("p",[e._v("配置安装NodeJS的基本信息，自定义别名、选择安装版本(可以安装多个版本)，最后，先点击应用再保存。")]),e._v(" "),s("p",[s("img",{attrs:{src:n(834),alt:"img_99.png"}})]),e._v(" "),s("p",[e._v("3、添加凭据")]),e._v(" "),s("p",[e._v("添加凭据，也就是GitHub或者其他远程仓库的账号密码，方便之后使用。【系统管理】——>【凭证管理】")]),e._v(" "),s("p",[s("img",{attrs:{src:n(835),alt:"img_100.png"}})]),e._v(" "),s("p",[e._v("点击添加凭证")]),e._v(" "),s("p",[s("img",{attrs:{src:n(836),alt:"img_101.png"}})]),e._v(" "),s("p",[e._v("填写用户名、密码、描述")]),e._v(" "),s("p",[s("img",{attrs:{src:n(837),alt:"img_102.png"}})]),e._v(" "),s("p",[e._v("4、创建Job")]),e._v(" "),s("p",[e._v("第一次部署的Jenkins没用Job，创建一个，首页右边视图中，点击Create a job。")]),e._v(" "),s("p",[s("img",{attrs:{src:n(838),alt:"img_103.png"}})]),e._v(" "),s("p",[e._v("输入项目名称：测试项目，选择构建一个自由风格的软件项目，点击确定")]),e._v(" "),s("p",[s("img",{attrs:{src:n(839),alt:"img_104.png"}})]),e._v(" "),s("p",[e._v("接下来需要配置项目的一些信息")]),e._v(" "),s("p",[s("img",{attrs:{src:n(840),alt:"img_105.png"}})]),e._v(" "),s("p",[e._v("配置完成后，先应用后保存，然后返回首页，打开项目，点击立即构建")]),e._v(" "),s("p",[s("img",{attrs:{src:n(841),alt:"img_106.png"}})]),e._v(" "),s("p",[e._v("查看控制台输出")]),e._v(" "),s("p",[s("img",{attrs:{src:n(842),alt:"img_107.png"}})]),e._v(" "),s("p",[s("img",{attrs:{src:n(843),alt:"img_108.png"}})]),e._v(" "),s("p",[e._v("可以看到构建过程中并没有出现error，并最终显示success，此时基础构建基本完成")]),e._v(" "),s("p",[e._v("5.更多选项配置（根据项目自定义）")]),e._v(" "),s("p",[e._v("（1）勾选参数化构建过程，并配置项目不同端的选项(有些项目可能分后端、手机端等)(勾选参数化构建过程选择选项参数)")]),e._v(" "),s("p",[s("img",{attrs:{src:n(844),alt:"img_109.png"}})]),e._v(" "),s("p",[e._v("（2）代码分支选项，某个端下的代码分支，目前只做master分支，正式项目应该是dev、fixbug等分支")]),e._v(" "),s("p",[s("img",{attrs:{src:n(845),alt:"img_110.png"}})]),e._v(" "),s("p",[e._v("（3）代码环境选项，可指定某一环境进行打包构建(需要结合项目进行配置)")]),e._v(" "),s("p",[s("img",{attrs:{src:n(846),alt:"img_111.png"}})]),e._v(" "),s("p",[e._v("点击保存后可以看到有 Build with Paramerters 选项")]),e._v(" "),s("p",[s("img",{attrs:{src:n(847),alt:"img_112.png"}})]),e._v(" "),s("p",[e._v("6、构建环境")]),e._v(" "),s("p",[e._v("在 Jenkins 中将 Node.js 和 npm 的 bin 文件夹添加到 PATH 中，否则可能就会报错。")]),e._v(" "),s("p",[s("img",{attrs:{src:"img_113.png",alt:"img_113.png"}})]),e._v(" "),s("p",[e._v("7、Build Steps")]),e._v(" "),s("p",[e._v("因为提交服务器代码是没有node_moudle，所以我们需要执行脚本去安装依赖！源码管理可以看到Build Steps模块，选择Execute NodeJS script")]),e._v(" "),s("p",[s("img",{attrs:{src:n(848),alt:"img_114.png"}})]),e._v(" "),s("p",[e._v("选择node版本，这个node版本是在上面我们已经配置过的，如果需要其他版本可通过上面操作新增NodeJs即可")]),e._v(" "),s("p",[s("img",{attrs:{src:n(849),alt:"img_115.png"}})]),e._v(" "),s("p",[e._v("配置完成之后，建议 立即构建 项目")]),e._v(" "),s("p",[e._v("8、shell 命令")]),e._v(" "),s("p",[e._v("在上图中选择增加构建步骤，在下拉框选中执行 shell")]),e._v(" "),s("p",[s("img",{attrs:{src:n(850),alt:"img_116.png"}})]),e._v(" "),s("p",[e._v("然后输入下面的指令")]),e._v(" "),s("p",[e._v("echo 是 Unix/Linux shell 中的一个命令，用于显示一行文本或变量的值。这个命令通常用于脚本、命令行或批处理文件中，以输出信息给用户或记录到日志文件中。同时可以打印变量")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("#!/bin/bash\nnode -v \nnpm -v \necho $PATH\n\n")])])]),s("p",[s("img",{attrs:{src:n(851),alt:"img_117.png"}})]),e._v(" "),s("p",[e._v("之后去构建，可以看到我们打印的版本信息都打印出了")]),e._v(" "),s("p",[s("img",{attrs:{src:n(852),alt:"img_118.png"}})]),e._v(" "),s("p",[e._v("接下来我们脚本中执行安装node_module以及打包命令。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('#!/bin/bash\nnode -v \nnpm -v \nnpm install\necho "依赖安装成功"\nnpm run build\necho "打包成功"\necho $PATH\n\n')])])]),s("p",[s("img",{attrs:{src:n(853),alt:"img_119.png"}})]),e._v(" "),s("p",[e._v("然后先应用后保存，去 Build with Paramerters 执行 build。")]),e._v(" "),s("p",[s("img",{attrs:{src:n(854),alt:"img_120.png"}})]),e._v(" "),s("p",[e._v("并且，还可以再服务器中看到打包后的dist文件。(deploy是git项目)")]),e._v(" "),s("p",[s("img",{attrs:{src:n(855),alt:"img_121.png"}})]),e._v(" "),s("h2",{attrs:{id:"_9、自动部署到对应环境项目目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9、自动部署到对应环境项目目录"}},[e._v("#")]),e._v(" 9、自动部署到对应环境项目目录")]),e._v(" "),s("p",[e._v("上面打包到了Jenkins中的workspace中，但是我们设置的项目环境路径跟这个不同，比如project端项目目录是/docker/html/{project}端项目目录是/docker/html/project端项目目录是/docker/html/{project}/dist/，所以需要打包后，把dist文件内容推送到/docker/html/${project}/dist/目录下。修改一下上面的脚本，改为下面：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('#!/bin/bash\nnode -v \nnpm -v \nnpm install\necho "依赖安装成功"\nnpm run build\necho "打包成功"\nrm -rf dist.tar     # 每次构建删除已存在的dist压缩包\ntar -zcvf dist.tar ./dist  #将dist文件压缩成dist.tar\necho $PATH\n\n')])])]),s("p",[e._v("这个命令使用 tar 工具来创建一个 tar 归档文件（tar archive），并结合了 gzip 压缩。具体来说，这个命令做了以下几件事：")]),e._v(" "),s("ol",[s("li",[e._v("tar：这是 Unix/Linux 系统中用于归档文件的工具。归档文件是一个或多个文件的集合，通常被压缩以节省存储空间。")]),e._v(" "),s("li",[e._v("-z：这个选项告诉 tar 使用 gzip 进行压缩。因此，输出的文件（dist.tar）实际上是一个 gzip 压缩的 tar 归档文件，通常被命名为 .tar.gz 或 .tgz（尽管在这个命令中，输出文件的扩展名是 .tar）。")]),e._v(" "),s("li",[e._v("-c：这个选项告诉 tar 创建一个新的归档文件。")]),e._v(" "),s("li",[e._v("-v：这个选项是“verbose”的简写，意味着 tar 命令在执行过程中会显示正在归档或解归档的文件名。")]),e._v(" "),s("li",[e._v("-f dist.tar：这个选项后面的参数是归档文件的名称。-f 选项告诉 tar 接下来的参数是归档文件的名称，而不是要归档或解归档的文件/目录名。")]),e._v(" "),s("li",[e._v("./dist：这是你想要归档的目录。在这个例子中，tar 会将 ./dist 目录下的所有文件和子目录都归档到 dist.tar 文件中（注意：这里虽然文件名是 dist.tar，但由于使用了 -z 选项，实际上它是一个 gzip 压缩的 tar 文件）。")])]),e._v(" "),s("p",[s("img",{attrs:{src:n(856),alt:"img_122.png"}})]),e._v(" "),s("p",[e._v("然后点击增加构建步骤，选择 Send files or execute commands over SSH ，Send files or execute commands over SSH命令允许你在构建过程中通过SSH连接到远程服务器执行命令或发送文件。")]),e._v(" "),s("p",[s("img",{attrs:{src:n(857),alt:"img_123.png"}})]),e._v(" "),s("p",[e._v("然后填写源文件、目标路径、执行脚本")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("cd /docker/html/${project}\nrm  -rf   dist/\ntar zxvf dist.tar\nrm dist.tar\n\n")])])]),s("p",[s("img",{attrs:{src:n(858),alt:"img_124.png"}})]),e._v(" "),s("p",[e._v("打包流程是：删除之前打包的tar压缩文件dist，把本次打包的dist文件压缩，然以压缩后的dist.tar为源文件，连接到远程服务器，放到/docker/html/admin目录下。然后删除dist目录，解压刚刚远道而来的dist.tar文件，之后删除压缩包。")]),e._v(" "),s("ul",[s("li",[e._v("Source files：准备发送的文件，该文件是相对于这个项目的workspace目录。例如要发送/docker/jenkins_home/workspace/deploy-admin/dist.tar到目标目录，则设置Source files为dist.tar")]),e._v(" "),s("li",[e._v("Remove prefix：目标文件前缀添加，例如要操作src下面的某个文件，就设置成src,本案例是跟目录，无需设置")]),e._v(" "),s("li",[e._v("Remote directory：目标目录，本案例要复制到admin下的dist文件，/docker/html/admin")]),e._v(" "),s("li",[e._v("Exec command：最后执行的命令，可在这里进行解压，删除，复制等操作")])]),e._v(" "),s("p",[e._v("最后再次执行立即构建。打开你的服务器地址+项目地址。可以看到刚刚部署的项目啦。")]),e._v(" "),s("p",[s("img",{attrs:{src:n(859),alt:"img_125.png"}})]),e._v(" "),s("p",[e._v("温馨提示：如果部署成功且打包到相对应目录，可能会出现访问不到assets目录资源（404），需要特殊配置打包路径（根据实际项目改动）")]),e._v(" "),s("p",[s("img",{attrs:{src:n(860),alt:"img_126.png"}})]),e._v(" "),s("h2",{attrs:{id:"进阶-个性化配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进阶-个性化配置"}},[e._v("#")]),e._v(" 进阶：个性化配置")]),e._v(" "),s("p",[e._v("以上只是最基础的简单配置，对于单项目已足够，实际项目会出现一个项目多个端（admin、h5等），所以git代码地址也不仅仅是一个；也会出现多分支情况（dev、其他分支）；包括多接口环境(dev/prod/test等)；以及是否需要先提前编译好（而非直接部署/发布）;钉钉通知等个性化功能。")]),e._v(" "),s("p",[e._v("此时使用源码管理已不能单独拉取指定的git了（目前只学习到这种），所以需要进入服务器不同端的文件夹执行git命令拉取git代码等，以及不需要直接部署，Send files or execute commands over SSH 也不再需要，而是全部 通过shell命令 去操作。")]),e._v(" "),s("p",[e._v("参数化构建配置在上面保持不变，额外添加的参数配置如下，不做过多操作说明，依次添加即可：")]),e._v(" "),s("h3",{attrs:{id:"是否构建-默认勾选"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#是否构建-默认勾选"}},[e._v("#")]),e._v(" 是否构建（默认勾选）")]),e._v(" "),s("p",[s("img",{attrs:{src:n(861),alt:"img_127.png"}})]),e._v(" "),s("h3",{attrs:{id:"是否部署-默认勾选"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#是否部署-默认勾选"}},[e._v("#")]),e._v(" 是否部署（默认勾选）")]),e._v(" "),s("p",[s("img",{attrs:{src:n(862),alt:"img_128.png"}})]),e._v(" "),s("h2",{attrs:{id:"是否需要钉钉通知-默认不勾选"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#是否需要钉钉通知-默认不勾选"}},[e._v("#")]),e._v(" 是否需要钉钉通知（默认不勾选）")]),e._v(" "),s("p",[s("img",{attrs:{src:n(863),alt:"img_129.png"}})]),e._v(" "),s("blockquote",[s("p",[e._v("温馨提示：关于钉钉群聊通知机器人配置自行百度即可，这里不做过多说明（比较简单）")])]),e._v(" "),s("blockquote",[s("p",[e._v("注意：这里不再需要Send files or execute commands over SSH，记得去掉构建后操作，后面通过shell命令执行拷贝操作即可")])]),e._v(" "),s("p",[s("img",{attrs:{src:n(864),alt:"img_130.png"}})]),e._v(" "),s("h2",{attrs:{id:"jenkins配置-nginx-挂载卷"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jenkins配置-nginx-挂载卷"}},[e._v("#")]),e._v(" jenkins配置 nginx 挂载卷")]),e._v(" "),s("p",[e._v("因 jenkins 跟 nginx 容器是相互独立，需要配置挂载卷，这样jenkins在打包后才能把dist文件拷贝到nginx相关的项目目录下,所以要对 docker-compose.yml 文件改写")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("version: '3'\n\nnetworks:\n  frontend:\n    external: true\n\n\nservices:                                      # 容器\n  docker_jenkins:\n    user: root                                 # root权限\n    restart: always                            # 重启方式\n    image: jenkins/jenkins:latest                 # 使用的镜像\n    container_name: jenkins                    # 容器名称\n#    environment:\n#      - TZ=Asia/Shanghai\n#      - \"JENKINS_OPTS=--prefix=/jenkins_home\" ## 自定义 jenkins 访问前缀（上下文context）\n\n\n    ports:                                     # 对外暴露的端口定义\n      - 8080:8080\n\n     \n      \n\n    volumes:                                   # 卷挂载路径\n      - /docker/jenkins_home/:/var/jenkins_home     # 挂载到容器内的jenkins_home目录\n      - /usr/local/bin/docker-compose:/usr/local/bin/docker-compose\n      #将主机上存储的已知主机公钥列表文件挂载到运行的 Docker 容器中，供容器内部的 SSH 客户端使用。\n      #这样做是为了避免每次启动容器时都重新建立主机与远程主机的连接，提高了安全性和便利性。\n      - ~/.ssh/known_hosts:/root/.ssh/known_hosts:ro\n      - /docker/html:/usr/share/nginx/html  # 挂载到 Nginx 容器内的某个路径\n\n  \n  docker_nginx:                            \n    restart: always\n    image: nginx\n    container_name: nginx\n    ports:\n      - 80:80\n    volumes:\n      - /docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf\n      - /docker/html:/usr/share/nginx/html\n      - /docker/nginx/logs:/var/log/nginx\n      \n\n")])])]),s("p",[e._v("这里注意，也要对 SSH 公钥文件挂载到 docker容器，防止每次都需要验证")]),e._v(" "),s("p",[e._v("配置完保存后要对docker-compose进行重启。注意！不能直接使用 docker-compose restart ，这样可能会导致挂载卷不生效。'")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" cd /docker/compose\n docker-compose down\n docker-compose up -d\n\n")])])]),s("p",[s("img",{attrs:{src:n(865),alt:"img_131.png"}})]),e._v(" "),s("p",[e._v("判断此时是否能正常访问到/usr/share/nginx/html相关目录，需要进入 jenkins 容器，输入以下代码")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("ls  /usr/share/nginx/html\n\n")])])]),s("p",[e._v("可以看到nginx下的项目目录已存在")]),e._v(" "),s("p",[s("img",{attrs:{src:n(866),alt:"img_132.png"}})]),e._v(" "),s("blockquote",[s("p",[e._v("这里做一个自我理解(可能有误)：挂载卷的意义其实就是映射，真实目录(/docker下的)映射到主机(虚拟)容器（其他目录），通过操作真实目录下的目录或文件都会同步映射到主机(虚拟)目录，而反过来一样，所以在jenkins通过shell命令操作任何目录/文件，都会同步到真实目录中")])]),e._v(" "),s("h2",{attrs:{id:"jenkins配置-git-的-ssh-公钥"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jenkins配置-git-的-ssh-公钥"}},[e._v("#")]),e._v(" jenkins配置 git 的 SSH 公钥")]),e._v(" "),s("p",[e._v("因为是通过shell命令去执行git操作，所以需要在jenkins容器配置好SSH仓库公钥，回到服务器终端操作页面，执行以下指令获取jenkins容器id")]),e._v(" "),s("p",[e._v("docker ps -a")]),e._v(" "),s("p",[s("img",{attrs:{src:n(867),alt:"img_133.png"}})]),e._v(" "),s("p",[e._v("然后进入 jenkins 容器内部并打开一个交互式的 Bash shell")]),e._v(" "),s("p",[e._v("docker exec -it 564c5b1f3141 /bin/bash")]),e._v(" "),s("p",[s("img",{attrs:{src:n(868),alt:"img_134.png"}})]),e._v(" "),s("ul",[s("li",[e._v("docker exec：这是Docker命令的一部分，用于在运行中的容器内部执行命令。")]),e._v(" "),s("li",[e._v("-it：这是两个选项的组合。-i 表示交互式操作，-t 表示分配一个终端（TTY）。这两个选项一起表示要打开一个交互式的终端来执行命令。")]),e._v(" "),s("li",[e._v("564c5b1f3141：这是容器的ID，它是要在其中执行命令的目标容器的唯一标识符。")]),e._v(" "),s("li",[e._v("/bin/bash：这是要在容器内部执行的实际命令。在这种情况下，它是要启动一个Bash shell。")])]),e._v(" "),s("p",[e._v("然后执行gitee 相关的ssh配置公钥操作，这里不做过多操作解释，跟着gitee一直操作即可")]),e._v(" "),s("p",[s("img",{attrs:{src:n(869),alt:"img_135.png"}})]),e._v(" "),s("p",[s("img",{attrs:{src:n(870),alt:"img_136.png"}})]),e._v(" "),s("p",[e._v("配置完检测连接是否成功！")]),e._v(" "),s("p",[s("img",{attrs:{src:n(871),alt:"img_137.png"}})]),e._v(" "),s("h2",{attrs:{id:"shell命令配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#shell命令配置"}},[e._v("#")]),e._v(" shell命令配置")]),e._v(" "),s("p",[e._v("回到jenkins可视化页面中，对构建步骤shell部分进行改写")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('#!/bin/bash\necho $PATH\necho "当前node版本： $(node -v)"\n\n# 项目字典\ndeclare -A projectDic\nprojectDic=([admin]="XX项目后台端" [h5]="XX项目H5端")\n# 当前服务器时间\nstarttime=`date +\'%Y-%m-%d %H:%M:%S\'`\n# 构建\nfunction build(){\n# 判断分支文件夹是否存在\nif [ -d deploy-${project} ];then\n\t  cd deploy-${project}\n      echo "=============== $(project)项目文件夹存在 执行pull ==============="\n      echo "git fetch && git checkout -f ${branch} && git pull origin ${branch}"\n      git fetch\n      git checkout -f ${branch}\n      git pull origin ${branch}\n     \n    else\n      echo "=============== $(project)项目文件夹不存在 执行clone ====================="\n      echo "git clone -b ${branch} git@gitee.com:cpc0209/deploy-${project}.git"\n      git clone -b ${branch} git@gitee.com:cpc0209/deploy-${project}.git \n      # cd到指定项目目录下操作\n      cd deploy-${project}\n     \n    fi\n\n    echo "=============== deploy-${project} pull/clone ok!start npm install... ====================="\n    # 以特权用户的身份运行 npm\n    npm install --unsafe-perm\n    echo "=============== deploy-${project} install ok! start npm run build... ====================="\n    # 如果是正式环境\n    if [ "${env}" = "prod" ]; then\n\tnpm run build\n    else\n    npm run build:${env} \n    fi\n    echo "=============== deploy-${project} build:${env} success！ ====================="\n}\n    \n# 部署到指定ngnix目录    \nfunction deploy(){\n\techo "=============== deploy-${project} deploy start... ====================="\n    dist_path=$WORKSPACE/deploy-${project}/dist/\n    #web项目路径\n    web_path=/usr/share/nginx/html/${project}\n    echo "web_path路径： $web_path"\n    \n    echo "即将从 $dist_path  拷贝"\n    # 强制删除web项目路径\n\t  rm -rf ${web_dir}\n    # 重新创建一个web项目路径\n    mkdir -p ${web_dir}\n    # 把dist文件夹拷贝到 web项目路径\n    cp -r  $dist_path $web_path\n    echo "copy success!"\n    # 给web_path添加读取权限\n    chmod +r ${web_path}/*\n}   \n\n\n# 项目自动化构建成功通知\nfunction dingNotify() {\n    endtime=`date +\'%Y-%m-%d %H:%M:%S\'`\n    start_seconds=$(date --date="$starttime" +%s);\n    end_seconds=$(date --date="$endtime" +%s);\n\techo "=============================代码发布通知钉钉群================================"\n    text="${env}环境: ${projectDic[$project]}(${branch}) 已部署成功，\\n 构建开始时间：${starttime}， \\n 构建结束时间：${endtime}， \\n 构建用时： "$((end_seconds-start_seconds))"秒"\n    echo "${text}"\n    curl -XPOST \'https://oapi.dingtalk.com/https://oapi.dingtalk.com/这里换成你的钉钉机器人\'  -H \'Content-Type: application/json\' -d "{"msgtype": "text","text": {"content":"$text"},"at": {"isAtAll": false}}"\n    echo "本次构建用时： "$((end_seconds-start_seconds))"秒"\n\techo "=============================代码发布通知完成=================================="\n}\n\n# 项目自动化构建失败通知\nfunction dingErrorNotify() {\n\techo "=============================代码发布通知钉钉群================================"\n    text="${env}环境: ${projectDic[$project]}(${branch}) 构建失败，\\n 构建时间：$(date "+%Y-%m-%d %H:%M:%S")"\n    echo "${text}"\n    curl -XPOST \'https://oapi.dingtalk.com/这里换成你的钉钉机器人\'  -H \'Content-Type: application/json\' -d "{"msgtype": "text","text": {"content":"$text"},"at": {"isAtAll": false}}"\n\techo "=============================代码发布通知完成=================================="\n}\n\n# 是否构建\nif [ "$isBuild" == "true" ];then\n    build\n    if [ $? -eq 0 ]; then\n        echo "[INFO]编译成功"\n    else\n        echo "[ERROR]编译失败"\n        # 退出\n        exit -1\n    fi\n    echo "=============== ${project} 编译成功，等待部署 ====================="\nfi\n\n#是否部署\nif [ "$isDeploy" == "true" ];then\n    deploy\n    if [ $? -ne 0 ];then\n    #部署失败则失败通知\n       dingErrorNotify\n       exit -1\n    fi\n    echo "=============== ${project} 部署完成 ====================="\n\n    #是否钉钉通知\n  \tif [ "$isSendDing" == "true" ];then\n    dingNotify\n    fi\n    \nfi\n\n')])])]),s("p",[e._v("以上代码要注意的点有：")]),e._v(" "),s("p",[s("code",[e._v("#!/bin/bash")]),e._v(" 必须要写，原因自行百度即可。")]),e._v(" "),s("p",[e._v("部署成功后会有钉钉通知：")]),e._v(" "),s("p",[s("img",{attrs:{src:n(872),alt:"img_138.png"}})]),e._v(" "),s("p",[e._v("拓展：")]),e._v(" "),s("p",[e._v("同样可以通过本地ssh连接远程数据库ip，把本地dist文件发送到指定的目录下")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("    # 连接到远程主机，删除目录内容\n    ssh root@$REMOTE_IP rm -rf /项目地址/\n\n    # 连接到远程主机，创建目录\n    ssh root@$REMOTE_IP mkdir -p /项目地址/\n\n    # 将本地文件复制到远程主机\n    scp -r  ./dist/* root@$REMOTE_IP:/项目地址/\n\n")])])])])}),[],!1,null,null,null);s.default=a.exports},803:function(e,s,n){e.exports=n.p+"assets/img/img_68.20abe66a.png"},804:function(e,s,n){e.exports=n.p+"assets/img/img_69.2339f287.png"},805:function(e,s,n){e.exports=n.p+"assets/img/img_70.e72b12db.png"},806:function(e,s,n){e.exports=n.p+"assets/img/img_71.f9109323.png"},807:function(e,s,n){e.exports=n.p+"assets/img/img_72.9a398bbd.png"},808:function(e,s,n){e.exports=n.p+"assets/img/img_73.5079545d.png"},809:function(e,s,n){e.exports=n.p+"assets/img/img_74.ec6400c9.png"},810:function(e,s,n){e.exports=n.p+"assets/img/img_75.023ac9eb.png"},811:function(e,s,n){e.exports=n.p+"assets/img/img_76.d8386377.png"},812:function(e,s,n){e.exports=n.p+"assets/img/img_77.3691a002.png"},813:function(e,s,n){e.exports=n.p+"assets/img/img_78.ca63f91d.png"},814:function(e,s,n){e.exports=n.p+"assets/img/img_79.70ced06e.png"},815:function(e,s,n){e.exports=n.p+"assets/img/img_80.2ff3a220.png"},816:function(e,s,n){e.exports=n.p+"assets/img/img_81.384fe78f.png"},817:function(e,s,n){e.exports=n.p+"assets/img/img_82.2bb77e5a.png"},818:function(e,s,n){e.exports=n.p+"assets/img/img_83.68e5b352.png"},819:function(e,s,n){e.exports=n.p+"assets/img/img_84.90d70e68.png"},820:function(e,s,n){e.exports=n.p+"assets/img/img_85.ac4381d5.png"},821:function(e,s,n){e.exports=n.p+"assets/img/img_86.87e4a5e1.png"},822:function(e,s,n){e.exports=n.p+"assets/img/img_87.f22f7e78.png"},823:function(e,s,n){e.exports=n.p+"assets/img/img_88.d1da2c3e.png"},824:function(e,s,n){e.exports=n.p+"assets/img/img_89.5ae8e646.png"},825:function(e,s,n){e.exports=n.p+"assets/img/img_90.82caff76.png"},826:function(e,s,n){e.exports=n.p+"assets/img/img_91.1c06b9cb.png"},827:function(e,s,n){e.exports=n.p+"assets/img/img_92.b44e5dfe.png"},828:function(e,s,n){e.exports=n.p+"assets/img/img_93.0a36d9bc.png"},829:function(e,s,n){e.exports=n.p+"assets/img/img_94.fa80ead1.png"},830:function(e,s,n){e.exports=n.p+"assets/img/img_95.1ebe3349.png"},831:function(e,s,n){e.exports=n.p+"assets/img/img_96.5240d91f.png"},832:function(e,s,n){e.exports=n.p+"assets/img/img_97.f6815ed0.png"},833:function(e,s,n){e.exports=n.p+"assets/img/img_98.edc19d12.png"},834:function(e,s,n){e.exports=n.p+"assets/img/img_99.b56da74b.png"},835:function(e,s,n){e.exports=n.p+"assets/img/img_100.c347ae7b.png"},836:function(e,s,n){e.exports=n.p+"assets/img/img_101.5e6065b8.png"},837:function(e,s,n){e.exports=n.p+"assets/img/img_102.6f6c9060.png"},838:function(e,s,n){e.exports=n.p+"assets/img/img_103.ffed2add.png"},839:function(e,s,n){e.exports=n.p+"assets/img/img_104.49a71ad2.png"},840:function(e,s,n){e.exports=n.p+"assets/img/img_105.91b43251.png"},841:function(e,s,n){e.exports=n.p+"assets/img/img_106.a1d13aa1.png"},842:function(e,s,n){e.exports=n.p+"assets/img/img_107.89e48cd8.png"},843:function(e,s,n){e.exports=n.p+"assets/img/img_108.64982ca1.png"},844:function(e,s,n){e.exports=n.p+"assets/img/img_109.05e235f4.png"},845:function(e,s,n){e.exports=n.p+"assets/img/img_110.566a186b.png"},846:function(e,s,n){e.exports=n.p+"assets/img/img_111.0a086b57.png"},847:function(e,s,n){e.exports=n.p+"assets/img/img_112.98dc0325.png"},848:function(e,s,n){e.exports=n.p+"assets/img/img_114.72ccba9d.png"},849:function(e,s,n){e.exports=n.p+"assets/img/img_115.910528f9.png"},850:function(e,s,n){e.exports=n.p+"assets/img/img_116.ff044d02.png"},851:function(e,s,n){e.exports=n.p+"assets/img/img_117.5b4a563f.png"},852:function(e,s,n){e.exports=n.p+"assets/img/img_118.7223fb59.png"},853:function(e,s,n){e.exports=n.p+"assets/img/img_119.c1ff3d08.png"},854:function(e,s,n){e.exports=n.p+"assets/img/img_120.e720d4f4.png"},855:function(e,s,n){e.exports=n.p+"assets/img/img_121.ee8e88e7.png"},856:function(e,s,n){e.exports=n.p+"assets/img/img_122.5c69356e.png"},857:function(e,s,n){e.exports=n.p+"assets/img/img_123.c5a72025.png"},858:function(e,s,n){e.exports=n.p+"assets/img/img_124.28ebb596.png"},859:function(e,s,n){e.exports=n.p+"assets/img/img_125.261db777.png"},860:function(e,s,n){e.exports=n.p+"assets/img/img_126.f828e1c7.png"},861:function(e,s,n){e.exports=n.p+"assets/img/img_127.77268bac.png"},862:function(e,s,n){e.exports=n.p+"assets/img/img_128.222c0b68.png"},863:function(e,s,n){e.exports=n.p+"assets/img/img_129.8c002123.png"},864:function(e,s,n){e.exports=n.p+"assets/img/img_130.9ad185c8.png"},865:function(e,s,n){e.exports=n.p+"assets/img/img_131.5c0411f4.png"},866:function(e,s,n){e.exports=n.p+"assets/img/img_132.5c881de2.png"},867:function(e,s,n){e.exports=n.p+"assets/img/img_133.27e9375c.png"},868:function(e,s,n){e.exports=n.p+"assets/img/img_134.215d4bed.png"},869:function(e,s,n){e.exports=n.p+"assets/img/img_135.4c54ce71.png"},870:function(e,s,n){e.exports=n.p+"assets/img/img_136.fe6ff357.png"},871:function(e,s,n){e.exports=n.p+"assets/img/img_137.496657d2.png"},872:function(e,s,n){e.exports=n.p+"assets/img/img_138.abdb8a3c.png"}}]);