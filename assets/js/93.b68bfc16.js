(window.webpackJsonp=window.webpackJsonp||[]).push([[93],{1043:function(t,a,s){"use strict";s.r(a);var n=s(1),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"第19天"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第19天"}},[t._v("#")]),t._v(" 第19天")]),t._v(" "),a("blockquote",[a("p",[t._v("记得定时站起来活动活动，久坐对身体不好呢～")])]),t._v(" "),a("h2",{attrs:{id:"java-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-方法"}},[t._v("#")]),t._v(" Java 方法")]),t._v(" "),a("p",[t._v("了解有哪些，写代码更加轻松，哈哈哈")]),t._v(" "),a("p",[a("img",{attrs:{src:s(552),alt:"img_27.png"}})]),t._v(" "),a("p",[t._v("Java 方法（Method）是Java编程语言中的一个基本概念，用于将一组语句封装在一起，以便在程序中重复使用。方法可以接受参数并返回结果。Java中的方法分为两大类：实例方法和静态方法。")]),t._v(" "),a("h3",{attrs:{id:"方法的基本结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法的基本结构"}},[t._v("#")]),t._v(" 方法的基本结构")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("修饰符 返回类型 方法名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("参数列表"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法体")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法执行的操作")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" 返回值"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果有返回值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"修饰符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修饰符"}},[t._v("#")]),t._v(" 修饰符")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("public")]),t._v("：方法可以被任何其他类访问。")]),t._v(" "),a("li",[a("code",[t._v("private")]),t._v("：方法只能在其定义的类内部访问。")]),t._v(" "),a("li",[a("code",[t._v("protected")]),t._v("：方法可以在同一包内或不同包的子类中访问。")]),t._v(" "),a("li",[a("code",[t._v("default")]),t._v("（无修饰符）：方法可以在同一包内访问。")]),t._v(" "),a("li",[a("code",[t._v("static")]),t._v("：方法属于类本身，而不是类的实例。")])]),t._v(" "),a("h3",{attrs:{id:"返回类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#返回类型"}},[t._v("#")]),t._v(" 返回类型")]),t._v(" "),a("ul",[a("li",[t._v("方法可以返回任何类型的数据，包括基本数据类型（如int、float等）和引用数据类型（如对象、数组等）。如果没有返回值，则使用"),a("code",[t._v("void")]),t._v("。")])]),t._v(" "),a("h3",{attrs:{id:"方法名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法名"}},[t._v("#")]),t._v(" 方法名")]),t._v(" "),a("ul",[a("li",[t._v("方法名应该是一个动词，并且遵循Java的命名规范，通常使用小写字母开头，如果方法名由多个单词组成，后面的每个单词首字母大写。")])]),t._v(" "),a("h3",{attrs:{id:"参数列表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参数列表"}},[t._v("#")]),t._v(" 参数列表")]),t._v(" "),a("ul",[a("li",[t._v("参数列表是方法可以接受的一个或多个参数，参数由参数类型和参数名组成，多个参数之间用逗号分隔。如果没有参数，则参数列表为空。")])]),t._v(" "),a("h3",{attrs:{id:"方法体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法体"}},[t._v("#")]),t._v(" 方法体")]),t._v(" "),a("ul",[a("li",[t._v("方法体是方法执行的操作，可以包含任意数量的语句，包括变量声明、条件语句、循环语句等。")])]),t._v(" "),a("h3",{attrs:{id:"返回值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#返回值"}},[t._v("#")]),t._v(" 返回值")]),t._v(" "),a("ul",[a("li",[t._v("如果方法有返回值，则需要在方法体中使用"),a("code",[t._v("return")]),t._v("语句返回一个值。如果没有返回值，则方法体中不需要"),a("code",[t._v("return")]),t._v("语句。")])]),t._v(" "),a("h3",{attrs:{id:"方法重载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法重载"}},[t._v("#")]),t._v(" 方法重载")]),t._v(" "),a("ul",[a("li",[t._v("方法重载是指在同一个类中，可以定义多个方法，它们的方法名相同但参数列表不同（参数的数量、类型或顺序不同）。Java编译器根据调用方法时提供的参数来决定调用哪个方法。")])]),t._v(" "),a("h3",{attrs:{id:"注意事项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[t._v("#")]),t._v(" 注意事项")]),t._v(" "),a("ul",[a("li",[t._v("方法名应该具有描述性，能够清楚地表达方法的功能。")]),t._v(" "),a("li",[t._v("方法参数应该尽量少，过多的参数会使方法难以理解和维护。")]),t._v(" "),a("li",[t._v("方法应该尽可能短小，每个方法只做一件事，符合单一职责原则。")]),t._v(" "),a("li",[t._v("方法应该避免副作用，即方法不应该改变调用者传入的对象的状态。")]),t._v(" "),a("li",[t._v("方法应该有适当的注释，说明方法的用途、参数和返回值。")])]),t._v(" "),a("h3",{attrs:{id:"示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Example")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 静态方法，返回两个整数的和")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实例方法，返回一个字符串的长度")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getStringLength")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Example")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Sum: "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" sum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Example")]),t._v(" example "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Example")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" example"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getStringLength")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, World!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Length: "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("在这个示例中，"),a("code",[t._v("add")]),t._v("是一个静态方法，它接受两个整数作为参数并返回它们的和。"),a("code",[t._v("getStringLength")]),t._v("是一个实例方法，它接受一个字符串作为参数并返回其长度。在"),a("code",[t._v("main")]),t._v("方法中，我们调用了这两个方法并打印了它们的返回值。")]),t._v(" "),a("hr"),t._v(" "),a("blockquote",[a("p",[t._v("这一章节掌握得怎么样？下一篇会更有趣哦，期待与你继续学习～")])])])}),[],!1,null,null,null);a.default=e.exports},552:function(t,a,s){t.exports=s.p+"assets/img/img_27.6b993f3b.png"}}]);