(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{1047:function(a,s,t){"use strict";t.r(s);var n=t(1),e=Object(n.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"第2天"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第2天"}},[a._v("#")]),a._v(" 第2天")]),a._v(" "),s("blockquote",[s("p",[a._v("学习要循序渐进，不要给自己太大压力哦！")])]),a._v(" "),s("p",[a._v("今天学基础语法，看看得了，很快，坚持一下，第二天就会java了，如果你继续学就直接会了")]),a._v(" "),s("h2",{attrs:{id:"java-基础语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-基础语法"}},[a._v("#")]),a._v(" Java 基础语法")]),a._v(" "),s("p",[a._v("一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。")]),a._v(" "),s("p",[a._v("对象：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。")]),a._v(" "),s("p",[a._v("类：类是一个模板，它描述一类对象的行为和状态。")]),a._v(" "),s("p",[a._v("方法：方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。")]),a._v(" "),s("p",[a._v("实例变量：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。")]),a._v(" "),s("p",[s("img",{attrs:{src:t(560),alt:"img_11.png"}})]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("$ javac "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HelloWorld")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("java\n$ java "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HelloWorld")]),a._v(" \n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Hello")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("World")]),a._v("\n        \n如果遇到编码问题，我们可以使用 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("encoding 选项设置 utf"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),a._v(" 来编译：\n\njavac "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("encoding "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("UTF")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HelloWorld")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("java \njava "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HelloWorld")]),a._v(" \n")])])]),s("h2",{attrs:{id:"基本语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本语法"}},[a._v("#")]),a._v(" 基本语法")]),a._v(" "),s("p",[a._v("大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。")]),a._v(" "),s("p",[a._v("类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。")]),a._v(" "),s("p",[a._v("方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。")]),a._v(" "),s("p",[a._v("源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。")]),a._v(" "),s("p",[a._v("主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。")]),a._v(" "),s("h2",{attrs:{id:"java-标识符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-标识符"}},[a._v("#")]),a._v(" Java 标识符")]),a._v(" "),s("p",[a._v("Java 所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("所有的标识符都应该以字母（"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("A")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Z")]),a._v(" 或者 a"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("z）"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("美元符（$）、或者下划线（_）开始\n首字符之后可以是字母（"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("A")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Z")]),a._v(" 或者 a"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("z）"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("美元符（$）、下划线（_）或数字的任何字符组合\n关键字不能用作标识符\n标识符是大小写敏感的\n合法标识符举例：age、$salary、_value、__1_value\n非法标识符举例："),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("123")]),a._v("abc、"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("salary\n")])])]),s("h2",{attrs:{id:"java修饰符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java修饰符"}},[a._v("#")]),a._v(" Java修饰符")]),a._v(" "),s("p",[a._v("访问控制修饰符 : default, public , protected, private")]),a._v(" "),s("p",[a._v("非访问控制修饰符 : final, abstract, static, synchronized")]),a._v(" "),s("h2",{attrs:{id:"java-变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-变量"}},[a._v("#")]),a._v(" Java 变量")]),a._v(" "),s("p",[a._v("Java 中主要有如下几种类型的变量")]),a._v(" "),s("ol",[s("li",[a._v("局部变量")]),a._v(" "),s("li",[a._v("类变量（静态变量）")]),a._v(" "),s("li",[a._v("成员变量（非静态变量）")])]),a._v(" "),s("h2",{attrs:{id:"java"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java"}},[a._v("#")]),a._v(" Java")]),a._v(" "),s("p",[a._v("数组是储存在"),s("strong",[a._v("堆上")]),a._v("的对象，可以保存多个同类型变量。 (数组名是引用，数组中的每个元素都是一个对象)")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 声明并初始化数组")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 声明并初始化数组")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 声明并初始化数组")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" d "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 声明数组，并指定数组大小")]),a._v("\n")])])]),s("h2",{attrs:{id:"java-枚举"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-枚举"}},[a._v("#")]),a._v(" Java 枚举")]),a._v(" "),s("p",[a._v("Java 5.0引入了枚举，枚举限制变量只能是预先设定好的值。使用枚举可以减少代码中的 bug。")]),a._v(" "),s("p",[a._v("例如，我们为果汁店设计一个程序，它将限制果汁为小杯、中杯、大杯。这就意味着它不允许顾客点除了这三种尺寸外的果汁。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FreshJuice")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("enum")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FreshJuiceSize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("SMALL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("MEDIUM")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("LARGE")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FreshJuiceSize")]),a._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h2",{attrs:{id:"java-关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-关键字"}},[a._v("#")]),a._v(" Java 关键字")]),a._v(" "),s("p",[a._v("过一下")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("访问控制\t\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v("\t私有的\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("protected")]),a._v("\t受保护的\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v("\t公共的\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("default")]),a._v("\t默认\n\n类、方法和变量修饰符\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("abstract")]),a._v("\t声明抽象\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v("\t类\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v("\t扩充、继承\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v("\t最终值、不可改变的\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("implements")]),a._v("\t实现（接口）\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("interface")]),a._v("\t接口\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("native")]),a._v("\t本地、原生方法（非 "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Java")]),a._v(" 实现）\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v("\t创建\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v("\t静态\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("strictfp")]),a._v("\t严格浮点、精准浮点\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("synchronized")]),a._v("\t线程、同步\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("transient")]),a._v("\t短暂\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("volatile")]),a._v("\t易失\n\n程序控制语句\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("break")]),a._v("\t跳出循环\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("case")]),a._v("\t定义一个值以供 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("switch")]),a._v(" 选择\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("continue")]),a._v("\t继续\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v("\t运行\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v("\t否则\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v("\t循环\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v("\t如果\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("instanceof")]),a._v("\t实例\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v("\t返回\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("switch")]),a._v("\t根据值选择执行\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("while")]),a._v("\t循环\n\n错误处理\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("assert")]),a._v("\t断言表达式是否为真\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),a._v("\t捕捉异常\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("finally")]),a._v("\t有没有异常都执行\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throw")]),a._v("\t抛出一个异常对象\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v("\t声明一个异常可能被抛出\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v("\t捕获异常\n\n包相关\n        \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v("\t引入\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("package")]),a._v("\t包\n\n基本类型\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("boolean")]),a._v("\t布尔型\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("byte")]),a._v("\t字节型\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("char")]),a._v("\t字符型\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("double")]),a._v("\t双精度浮点\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("float")]),a._v("\t单精度浮点\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v("\t整型\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("long")]),a._v("\t长整型\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("short")]),a._v("\t短整型\n\n变量引用\n        \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("super")]),a._v("\t父类、超类\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),a._v("\t本类\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v("\t无返回值\n\n保留关键字\n        \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("goto")]),a._v("\t是关键字，但不能使用\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v("\t是关键字，但不能使用\n\n\n注意："),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Java")]),a._v(" 的 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),a._v(" 不是关键字，类似于 "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v(" 和 "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),a._v("，它是一个字面常量，不允许作为标识符使用。\n\n")])])]),s("h2",{attrs:{id:"继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[a._v("#")]),a._v(" 继承")]),a._v(" "),s("p",[a._v("在 Java 中，一个类可以由其他类派生。如果你要创建一个类，而且已经存在一个类具有你所需要的属性或方法，那么你可以将新创建的类继承该类。")]),a._v(" "),s("p",[a._v("利用继承的方法，可以重用已存在类的方法和属性，而不用重写这些代码。被继承的类称为超类（super class），派生类称为子类（sub class）。")]),a._v(" "),s("p",[a._v("示例：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Animal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("eat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"eating..."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Dog")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Animal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("bark")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"barking..."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TestDog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Animal")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Animal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("eat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Dog")]),a._v(" d "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Dog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("bark")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("eat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("Animal类定义了一个名为eat的方法，该方法打印出“eating...”。")]),a._v(" "),s("p",[a._v("Dog类继承自Animal类，这意味着Dog类可以继承Animal类的所有方法和属性。")]),a._v(" "),s("p",[a._v("Dog类定义了一个名为bark的方法，该方法打印出“barking...”。")]),a._v(" "),s("p",[a._v("TestDog类是程序的入口点。")]),a._v(" "),s("p",[a._v("在main方法中，首先创建了一个Animal对象a，并调用了a.eat()方法，输出“eating...”。")]),a._v(" "),s("p",[a._v("然后创建了一个Dog对象d，并调用了d.bark()方法，输出“barking...”。")]),a._v(" "),s("p",[a._v("最后，调用了d.eat()方法，由于Dog类继承了Animal类，所以d.eat()方法实际上是调用了Animal类中的eat方法，输出“eating...”。")]),a._v(" "),s("h3",{attrs:{id:"实现原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现原理"}},[a._v("#")]),a._v(" 实现原理")]),a._v(" "),s("p",[a._v("继承：Dog类继承了Animal类，这意味着Dog类可以访问Animal类中的所有公共（public）和受保护（protected）成员，包括方法。")]),a._v(" "),s("p",[a._v("多态性：虽然Dog类继承了Animal类，但Dog类可以有自己的方法，如bark方法。当调用Dog对象的方法时，会根据实际的对象类型来决定调用哪个方法。例如，d.bark()调用的是Dog类中的bark方法，而d.eat()调用的是Animal类中的eat方法。")]),a._v(" "),s("h3",{attrs:{id:"用途"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用途"}},[a._v("#")]),a._v(" 用途")]),a._v(" "),s("p",[a._v("这个程序展示了面向对象编程的基本概念，如继承和多态性，是学习Java面向对象编程的基础。")]),a._v(" "),s("p",[a._v("通过继承，可以重用代码，减少重复工作。")]),a._v(" "),s("p",[a._v("通过多态性，可以在运行时根据对象的实际类型来决定调用哪个方法，增加了程序的灵活性和可扩展性。")]),a._v(" "),s("p",[a._v("在Java中，类名和文件名应该一致，即TestDog类应该保存在名为TestDog.java的文件中。")]),a._v(" "),s("p",[a._v("继承是面向对象编程中的一个重要特性，但过度使用继承可能会导致代码结构复杂，难以维护。在设计类时，应该根据实际需求谨慎使用继承。")]),a._v(" "),s("h2",{attrs:{id:"接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[a._v("#")]),a._v(" 接口")]),a._v(" "),s("p",[a._v("在 Java 中，接口可理解为对象间相互通信的协议。接口在继承中扮演着很重要的角色。")]),a._v(" "),s("p",[a._v("接口只定义派生要用到的方法，但是方法的具体实现完全取决于派生类。")]),a._v(" "),s("p",[a._v("示例")]),a._v(" "),s("p",[a._v("演示了接口（interface）和继承（inheritance）的基本概念。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 接口是一个完全抽象的类，它包含了一系列未实现的方法。接口定义了类应该具有的方法，但不提供这些方法的具体实现。接口通过interface关键字定义。")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("interface")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Animal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("eat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("travel")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// Animal接口定义了两个方法：eat()和travel()。任何实现Animal接口的类都必须提供这两个方法的具体实现。")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//类（Class）和实现（Implementation）")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//类是对象的蓝图，它包含了数据和操作这些数据的方法。类通过class关键字定义。")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//MammalAnimal类实现了Animal接口，这意味着它必须提供eat()和travel()方法的具体实现。")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MammalAnimal")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("implements")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Animal")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("eat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Mammal eat"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("travel")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Mammal travel"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//继承是面向对象编程中的一个基本概念，它允许一个类（子类）继承另一个类（父类）的属性和方法。子类可以扩展父类的功能，也可以重写父类的方法。")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//Dog类继承了MammalAnimal类，这意味着Dog类不仅继承了MammalAnimal类的属性和方法，还可以添加自己的属性和方法。在这个例子中，Dog类添加了一个bark()方法。")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Dog")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MammalAnimal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("bark")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"dog barking"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 主类（Main Class） 主类是程序的入口点，它包含了main方法。")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 在main方法中，首先创建了一个MammalAnimal对象，并调用了它的eat()和travel()方法。然后创建了一个Dog对象，并调用了它的bark()和eat()方法。")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TestInterface")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Animal")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MammalAnimal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n      a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("eat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n      a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("travel")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n      "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Dog")]),a._v(" d "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Dog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n      d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("bark")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n      d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("eat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("接口和类的区别：接口定义了方法，但不包含实现。类可以包含属性和方法，并且可以继承自其他类或实现一个或多个接口。")]),a._v(" "),s("p",[a._v("实现接口：类通过implements关键字实现一个或多个接口，并必须提供接口中所有方法的具体实现。")]),a._v(" "),s("p",[a._v("继承：类通过extends关键字继承自另一个类，子类可以继承父类的属性和方法，并且可以添加自己的属性和方法。")]),a._v(" "),s("p",[a._v("多态：在Java中，多态允许一个接口或父类的引用指向一个实现了该接口或继承了该父类的子类对象。这允许在运行时根据对象的实际类型调用相应的方法。")]),a._v(" "),s("h2",{attrs:{id:"java-源程序与编译型运行区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-源程序与编译型运行区别"}},[a._v("#")]),a._v(" Java 源程序与编译型运行区别")]),a._v(" "),s("p",[s("img",{attrs:{src:t(561),alt:"img_12.png"}})]),a._v(" "),s("h2",{attrs:{id:"多态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多态"}},[a._v("#")]),a._v(" 多态")]),a._v(" "),s("p",[a._v("多态是同一个行为具有多个不同表现形式或形态的能力。")]),a._v(" "),s("p",[a._v("多态就是同一个接口，使用不同的实例而执行不同操作。")]),a._v(" "),s("p",[a._v("示例")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//Shape 类是所有形状的父类，它有一个 draw() 方法，但这个方法没有具体实现。")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Shape")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("draw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//Circle、Square 和 Triangle 类都继承自 Shape 类，并重写了 draw() 方法，以实现各自独特的绘制逻辑。")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Circle")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Shape")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("draw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n     "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Circle.draw()"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Square")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Shape")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("draw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n     "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Square.draw()"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Triangle")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Shape")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("draw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n     "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Triangle.draw()"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//在 main 方法中，创建了一个 Shape 类型的数组 shapes，长度为3。")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Polymorphism")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n     "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Shape")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" shapes "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Shape")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n     shapes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Circle")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n     shapes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Square")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n     shapes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Triangle")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("shapes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n       shapes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("draw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h3",{attrs:{id:"多态性应用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多态性应用"}},[a._v("#")]),a._v(" 多态性应用：")]),a._v(" "),s("p",[a._v("通过父类引用 Shape 来创建子类对象，并将这些对象存储在数组中。例如，shapes[0] = new Circle(); 创建了一个 Circle 对象，并将其赋值给 Shape 类型的引用。")]),a._v(" "),s("p",[a._v("当通过数组中的引用调用 draw() 方法时，实际调用的是子类重写的方法。例如，shapes[0].draw(); 实际上调用的是 Circle 类的 draw() 方法。")]),a._v(" "),s("h3",{attrs:{id:"遍历数组并调用方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#遍历数组并调用方法"}},[a._v("#")]),a._v(" 遍历数组并调用方法：")]),a._v(" "),s("p",[a._v("使用 for 循环遍历数组中的每个元素，并调用 draw() 方法。由于多态性的存在，实际调用的方法是每个对象的子类实现。")]),a._v(" "),s("h3",{attrs:{id:"用途-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用途-2"}},[a._v("#")]),a._v(" 用途")]),a._v(" "),s("p",[a._v("多态性在面向对象编程中非常有用，因为它允许我们编写更加通用和灵活的代码。通过使用父类引用来操作子类对象，我们可以在不改变代码结构的情况下，轻松地添加新的子类，并让它们与现有代码无缝协作。")]),a._v(" "),s("h2",{attrs:{id:"注意事项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[a._v("#")]),a._v(" 注意事项")]),a._v(" "),s("p",[a._v("方法重写：")]),a._v(" "),s("p",[a._v("子类必须使用 @Override 注解来明确表示它重写了父类的方法。虽然这不是强制性的，但这是一个好的编程习惯，可以帮助我们在编译时发现错误。")]),a._v(" "),s("p",[a._v("父类引用指向子类对象：")]),a._v(" "),s("p",[a._v("在多态性中，父类引用可以指向任何子类对象，但只能调用父类中声明的方法。如果子类重写了这些方法，那么调用时将执行子类的实现。")]),a._v(" "),s("p",[a._v("类型转换：")]),a._v(" "),s("p",[a._v("如果需要调用子类特有的方法，可能需要进行类型转换。例如，如果需要调用 Circle 类特有的方法，需要将 Shape 类型的引用转换为 Circle 类型：((Circle) shapes[0]).someCircleSpecificMethod();。")]),a._v(" "),s("p",[a._v("运行时类型检查：")]),a._v(" "),s("p",[a._v("在进行类型转换之前，可以使用 instanceof 关键字来检查对象是否是特定类的实例，以避免 ClassCastException 异常。例如：if (shapes[0] instanceof Circle) { ((Circle) shapes[0]).someCircleSpecificMethod(); }。")]),a._v(" "),s("hr"),a._v(" "),s("blockquote",[s("p",[a._v("学习编程就像搭积木，一块一块慢慢来，下一篇继续加油！")])])])}),[],!1,null,null,null);s.default=e.exports},560:function(a,s,t){a.exports=t.p+"assets/img/img_11.cc692899.png"},561:function(a,s,t){a.exports=t.p+"assets/img/img_12.4ec71b2f.png"}}]);