(window.webpackJsonp=window.webpackJsonp||[]).push([[429],{1261:function(a,e,t){"use strict";t.r(e);var n=t(1),s=Object(n.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("blockquote",[e("p",[a._v("点击勘误"),e("a",{attrs:{href:"https://github.com/webVueBlog/JavaPlusDoc/issues",target:"_blank",rel:"noopener noreferrer"}},[a._v("issues"),e("OutboundLink")],1),a._v("，哪吒感谢大家的阅读")])]),a._v(" "),e("img",{attrs:{align:"right",width:"100",src:"https://cdn.jsdelivr.net/gh/YunYouJun/yun/images/yun-alpha-compressed.png"}}),a._v(" "),e("h2",{attrs:{id:"从根上理解mysql事务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从根上理解mysql事务"}},[a._v("#")]),a._v(" 从根上理解MySQL事务")]),a._v(" "),e("p",[a._v("事务的概念")]),a._v(" "),e("p",[a._v("MySQL事务是一个或者多个的数据库操作，要么全部执行成功，要么全部失败回滚。")]),a._v(" "),e("p",[a._v("事务是通过事务日志来实现的，事务日志包括：redo log和undo log。")]),a._v(" "),e("p",[a._v("事务的状态")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("活动的（active）\n事务对应的数据库操作正在执行过程中时，我们就说该事务处在活动的状态。\n\n部分提交的（partially committed）\n当事务中的最后一个操作执行完成，但由于操作都在内存中执行，所造成的影响并没有刷新到磁盘时，我们就说该事务处在部分提交的状态。\n\n失败的（failed）\n当事务处在活动的或者部分提交的状态时，可能遇到了某些错误（数据库自身的错误、操作系统错误或者直接断电等）而无法继续执行，或者人为的停止当前事务的执行，我们就说该事务处在失败的状态。\n\n中止的（aborted）\n如果事务执行了半截而变为失败的状态，撤销失败事务对当前数据库造成的影响，我们把这个撤销的过程称之为回滚。\n\n当回滚操作执行完毕时，也就是数据库恢复到了执行事务之前的状态，我们就说该事务处在了中止的状态。\n\n提交的（committed）\n当一个处在部分提交的状态的事务将修改过的数据都同步到磁盘上之后，我们就可以说该事务处在了提交的状态。\n")])])]),e("h2",{attrs:{id:"事务的作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事务的作用"}},[a._v("#")]),a._v(" 事务的作用")]),a._v(" "),e("p",[a._v("事务主要是为了保证复杂数据库操作数据的一致性，尤其是在并发访问数据时。")]),a._v(" "),e("p",[a._v("MySQL 事务主要用于处理操作量大，复杂度高的数据。")]),a._v(" "),e("h2",{attrs:{id:"事务的特点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事务的特点"}},[a._v("#")]),a._v(" 事务的特点")]),a._v(" "),e("p",[a._v("原子性（Atomicity，又称不可分割性）")]),a._v(" "),e("p",[a._v("事务的数据操作，要么全部执行成功，要么全部失败回滚到执行之前的状态，就像这个事务从来没有执行过一样。")]),a._v(" "),e("p",[a._v("隔离性（Isolation，又称独立性）")]),a._v(" "),e("p",[a._v("多个事务之间是相互隔离，互不影响的。数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。")]),a._v(" "),e("p",[a._v("四种隔离状态：")]),a._v(" "),e("ol",[e("li",[a._v("读未提交（Read uncommitted）")]),a._v(" "),e("li",[a._v("读提交（Read committed）")]),a._v(" "),e("li",[a._v("可重复读（Repeatable read）")]),a._v(" "),e("li",[a._v("串行化（Serializable）\n一致性（Consistency）\n在事务操作之前和之后，数据都是保持一个相同的状态，数据库的完整性没有被破坏。")])]),a._v(" "),e("p",[a._v("原子性和隔离性，对一致性有着至关重要的影响。")]),a._v(" "),e("p",[a._v("持久性（Durability）")]),a._v(" "),e("p",[a._v("当事务操作完成后，数据会被刷新到磁盘永久保存，即便是系统故障也不会丢失。")]),a._v(" "),e("h2",{attrs:{id:"事务的语法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事务的语法"}},[a._v("#")]),a._v(" 事务的语法")]),a._v(" "),e("p",[a._v("数据")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("创建数据表：\ncreate table account(\n    -> id int(10) auto_increment,\n    -> name varchar(30),\n    -> balance int(10),\n    -> primary key (id));\n插入数据：\ninsert into account(name,balance) values('aa',100),('bb',10);\n\n\n")])])]),e("p",[a._v("begin")]),a._v(" "),e("p",[a._v("事务启动方式1")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("mysql> begin;\nQuery OK, 0 rows affected (0.00 sec)\nmysql> 事务操作SQL......\n")])])]),e("p",[a._v("start transaction "),e("code",[a._v("[修饰符]")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("修饰符：\n1. read only //只读\n2. read write //读写 默认\n3. WITH CONSISTENT SNAPSHOT //一致性读\n")])])]),e("p",[a._v("事务启动方式2")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("mysql> start transaction read only;\nQuery OK, 0 rows affected (0.00 sec)\nmysql> 事务操作SQL......\n\n如设置read only后，对数据进行修改会报错：\n\nmysql> start transaction read only;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> update account set balance=banlance+30 where id = 2;\nERROR 1792 (25006): Cannot execute statement in a READ ONLY transaction.\n")])])]),e("p",[a._v("commit")]),a._v(" "),e("p",[a._v("事务执行提交，提交成功则刷新到磁盘")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("mysql> commit;\nQuery OK, 0 rows affected (0.00 sec)\n")])])]),e("p",[a._v("rollback")]),a._v(" "),e("p",[a._v("事务执行回滚，回到事务操作之前的状态。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("mysql> rollback;\nQuery OK, 0 rows affected (0.00 sec)\n")])])]),e("p",[a._v("这里需要强调一下，ROLLBACK语句是我们程序员手动的去回滚事务时才去使用的，如果事务在执行过程中遇到了某些错误而无法继续执行的话，事务自身会自动的回滚。")]),a._v(" "),e("p",[a._v("完整的提交例子")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("mysql> begin;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> update account set balance=balance-20 where id = 1;\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> update account set balance=balance+20 where id = 2;\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> commit;\nQuery OK, 0 rows affected (0.01 sec)\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);