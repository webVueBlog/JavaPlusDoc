(window.webpackJsonp=window.webpackJsonp||[]).push([[169],{962:function(t,s,a){"use strict";a.r(s);var n=a(1),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("blockquote",[s("p",[t._v("点击勘误"),s("a",{attrs:{href:"https://github.com/webVueBlog/JavaPlusDoc/issues",target:"_blank",rel:"noopener noreferrer"}},[t._v("issues"),s("OutboundLink")],1),t._v("，哪吒感谢大家的阅读")])]),t._v(" "),s("img",{attrs:{align:"right",width:"100",src:"https://cdn.jsdelivr.net/gh/YunYouJun/yun/images/yun-alpha-compressed.png"}}),t._v(" "),s("h2",{attrs:{id:"jvm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm"}},[t._v("#")]),t._v(" jvm")]),t._v(" "),s("p",[t._v("(1) 基本概念：")]),t._v(" "),s("p",[t._v("JVM 是可运行 Java 代码的假想计算机 ，包括一套字节码指令集、一组寄存器、一个栈、\n一个垃圾回收，堆 和 一个存储方法域。JVM 是运行在操作系统之上的，它与硬件没有直接\n的交互。")]),t._v(" "),s("p",[t._v("java代码的执行：代码编译为class，javac；装载class，ClassLoader；执行class，解释执行，编译执行，client compiler，server compiler。")]),t._v(" "),s("h2",{attrs:{id:"双亲委派机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#双亲委派机制"}},[t._v("#")]),t._v(" 双亲委派机制")]),t._v(" "),s("p",[t._v("双亲委派机制（Parent Delegation Model）是Java类加载器的核心机制，它定义了类加载器之间的层次关系和加载规则。")]),t._v(" "),s("h3",{attrs:{id:"类加载器层次结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类加载器层次结构"}},[t._v("#")]),t._v(" 类加载器层次结构")]),t._v(" "),s("ol",[s("li",[s("p",[s("strong",[t._v("启动类加载器（Bootstrap ClassLoader）")])]),t._v(" "),s("ul",[s("li",[t._v("最顶层的类加载器，由C++实现")]),t._v(" "),s("li",[t._v("负责加载Java核心库（如rt.jar中的类）")]),t._v(" "),s("li",[t._v("加载路径：$JAVA_HOME/lib目录")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("扩展类加载器（Extension ClassLoader）")])]),t._v(" "),s("ul",[s("li",[t._v("由Java实现，继承自ClassLoader")]),t._v(" "),s("li",[t._v("负责加载扩展库中的类")]),t._v(" "),s("li",[t._v("加载路径：$JAVA_HOME/lib/ext目录")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("应用程序类加载器（Application ClassLoader）")])]),t._v(" "),s("ul",[s("li",[t._v("也称为系统类加载器（System ClassLoader）")]),t._v(" "),s("li",[t._v("负责加载应用程序classpath下的类")]),t._v(" "),s("li",[t._v("是用户自定义类加载器的默认父加载器")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("用户自定义类加载器（User Defined ClassLoader）")])]),t._v(" "),s("ul",[s("li",[t._v("继承自ClassLoader类")]),t._v(" "),s("li",[t._v("可以实现特定的类加载逻辑")])])])]),t._v(" "),s("h3",{attrs:{id:"双亲委派工作流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#双亲委派工作流程"}},[t._v("#")]),t._v(" 双亲委派工作流程")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("向上委派")]),t._v("：当一个类加载器收到类加载请求时，首先将请求委派给父类加载器")]),t._v(" "),s("li",[s("strong",[t._v("逐级委派")]),t._v("：父类加载器继续向上委派，直到达到启动类加载器")]),t._v(" "),s("li",[s("strong",[t._v("尝试加载")]),t._v("：启动类加载器尝试加载该类，如果能够加载则返回Class对象")]),t._v(" "),s("li",[s("strong",[t._v("向下返回")]),t._v("：如果父类加载器无法加载，则由子类加载器尝试加载")]),t._v(" "),s("li",[s("strong",[t._v("抛出异常")]),t._v("：如果所有类加载器都无法加载，则抛出ClassNotFoundException")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("loadClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" resolve"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassNotFoundException")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClassLoadingLock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 首先检查类是否已经被加载")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("findLoadedClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 委派给父类加载器")]),t._v("\n                    c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" parent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("loadClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 委派给启动类加载器")]),t._v("\n                    c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("findBootstrapClassOrNull")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassNotFoundException")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 父类加载器无法加载时，由当前加载器尝试加载")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            \n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用findClass方法加载类")]),t._v("\n                c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("findClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("resolve"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolveClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"双亲委派的优势"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#双亲委派的优势"}},[t._v("#")]),t._v(" 双亲委派的优势")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("安全性")]),t._v("：防止核心API被篡改，确保Java核心库的类由启动类加载器加载")]),t._v(" "),s("li",[s("strong",[t._v("避免重复加载")]),t._v("：确保同一个类在JVM中只有一个Class对象")]),t._v(" "),s("li",[s("strong",[t._v("层次清晰")]),t._v("：类加载器之间形成清晰的层次关系")]),t._v(" "),s("li",[s("strong",[t._v("稳定性")]),t._v("：保证Java程序的稳定运行")])]),t._v(" "),s("h3",{attrs:{id:"破坏双亲委派的场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#破坏双亲委派的场景"}},[t._v("#")]),t._v(" 破坏双亲委派的场景")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("自定义类加载器")]),t._v("：重写loadClass方法而不调用父类加载器")]),t._v(" "),s("li",[s("strong",[t._v("线程上下文类加载器")]),t._v("：用于解决SPI（Service Provider Interface）加载问题")]),t._v(" "),s("li",[s("strong",[t._v("OSGi框架")]),t._v("：实现模块化的类加载机制")]),t._v(" "),s("li",[s("strong",[t._v("热部署")]),t._v("：在不重启JVM的情况下更新类文件")])]),t._v(" "),s("p",[t._v("内存管理：内存空间，方法区，堆，方法栈，本地方法栈，pc寄存器；内存分片，堆上分配，TLAB分配，栈上分配；")]),t._v(" "),s("p",[t._v("内存回收：算法 Copy Mark-Sweep， Mark-Compact；Sun JDK 分代回收 GC参数，G1")]),t._v(" "),s("p",[t._v("分代回收：新生代可用的GC 串行copying，并行回收copying，并行copying；  Minor GC 触发机制以及日志格式；\n旧生代可用的GC： 串行 Mark-Sweep-Compact ，并行 Compacting， 并发 Mark-Sweep\nFull GC 触发机制以及日志格式")]),t._v(" "),s("p",[t._v("内存状况分析：jconsole，visualvm，jstat，jmap，mat")]),t._v(" "),s("p",[t._v("线程资源同步和交互机制：")]),t._v(" "),s("p",[t._v("线程资源同步：线程资源执行机制；线程资源同步机制： Synchronized的实现机制，lock/unlock的实现机制")]),t._v(" "),s("p",[t._v("线程交互机制：Object.wait/notify/notifyAll, Thread.join, Thread.sleep, Thread.yield, Thread.interrupt；  并发包提供的交互机制： semaphore，CountdownLatch")]),t._v(" "),s("p",[t._v("线程状态以及分析方法：jstack、 tda")]),t._v(" "),s("p",[t._v("(2) 运行过程：")]),t._v(" "),s("p",[t._v("我们都知道Java源文件，通过编译器，能够生产相应的.Class文件，也就是字节码文件，而字节码文件又通过Java虚拟机中的解释器，编译成特定机器上的机器码。")]),t._v(" "),s("p",[t._v("也就是如下：")]),t._v(" "),s("p",[t._v("① Java 源文件—->编译器—->字节码文件")]),t._v(" "),s("p",[t._v("② 字节码文件—->JVM—->机器码")]),t._v(" "),s("p",[t._v("每一种平台的解释器是不同的，但是实现的虚拟机是相同的，这也就是 Java 为什么能够\n跨平台的原因了 ，当一个程序从开始运行，这时虚拟机就开始实例化了，多个程序启动就会\n存在多个虚拟机实例。程序退出或者关闭，则虚拟机实例消亡，多个虚拟机实例之间数据不\n能共享。")]),t._v(" "),s("p",[t._v("运行时数据区 Runtime Data Area")]),t._v(" "),s("p",[t._v("方法区 Method Area （共享）   虚拟机栈 VM Stack （私有）  本地方法栈 Native Method Stack （私有）  程序计数器 Program Counter Register （私有）")]),t._v(" "),s("p",[t._v("堆 Heap （共享）")]),t._v(" "),s("p",[t._v("执行引擎：即时编译器 JIT  垃圾收集器 GC")]),t._v(" "),s("p",[t._v("本地库接口，本地方法库")])])}),[],!1,null,null,null);s.default=e.exports}}]);