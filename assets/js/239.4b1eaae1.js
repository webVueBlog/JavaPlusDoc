(window.webpackJsonp=window.webpackJsonp||[]).push([[239],{1063:function(s,a,t){"use strict";t.r(a);var e=t(1),n=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"第31天"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第31天"}},[s._v("#")]),s._v(" 第31天")]),s._v(" "),a("blockquote",[a("p",[s._v("给你写一个Hello World，因为你就是我的整个世界！")])]),s._v(" "),a("p",[s._v("认识一个 存储数据 的结构，不同叫法。")]),s._v(" "),a("h2",{attrs:{id:"java-数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-数据结构"}},[s._v("#")]),s._v(" Java 数据结构")]),s._v(" "),a("p",[s._v("Java 数据结构是指 Java 编程语言中用于存储和组织数据的一组类和接口。这些数据结构提供了高效的数据访问和操作方法，是构建复杂应用程序的基础。Java 提供了多种内置的数据结构，包括数组、集合、映射、队列和栈等。下面是一些常见的数据结构及其用途：")]),s._v(" "),a("ol",[a("li",[a("p",[a("strong",[s._v("数组（Array）")]),s._v("：")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("用途")]),s._v("：用于存储固定大小的同类型元素。")]),s._v(" "),a("li",[a("strong",[s._v("实现原理")]),s._v("：数组在内存中连续存储元素，通过索引访问元素。")]),s._v(" "),a("li",[a("strong",[s._v("注意事项")]),s._v("：数组大小固定，一旦创建就不能改变；访问速度较快，但插入和删除元素较慢。")])])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("集合（Collection）")]),s._v("：")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("用途")]),s._v("：用于存储一组不重复的元素。")]),s._v(" "),a("li",[a("strong",[s._v("实现原理")]),s._v("：集合接口定义了一组通用的方法，如添加、删除、查找元素等。")]),s._v(" "),a("li",[a("strong",[s._v("常见实现类")]),s._v("："),a("code",[s._v("ArrayList")]),s._v("、"),a("code",[s._v("LinkedList")]),s._v("、"),a("code",[s._v("HashSet")]),s._v("、"),a("code",[s._v("TreeSet")]),s._v("、"),a("code",[s._v("HashMap")]),s._v("、"),a("code",[s._v("TreeMap")]),s._v("等。")]),s._v(" "),a("li",[a("strong",[s._v("注意事项")]),s._v("：集合可以动态调整大小，但访问速度可能不如数组。")])])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("映射（Map）")]),s._v("：")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("用途")]),s._v("：用于存储键值对，键是唯一的，值可以是任意对象。")]),s._v(" "),a("li",[a("strong",[s._v("实现原理")]),s._v("：映射接口定义了一组方法，用于操作键值对。")]),s._v(" "),a("li",[a("strong",[s._v("常见实现类")]),s._v("："),a("code",[s._v("HashMap")]),s._v("、"),a("code",[s._v("TreeMap")]),s._v("、"),a("code",[s._v("LinkedHashMap")]),s._v("等。")]),s._v(" "),a("li",[a("strong",[s._v("注意事项")]),s._v("：映射提供了快速查找、插入和删除键值对的方法。")])])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("队列（Queue）")]),s._v("：")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("用途")]),s._v("：用于存储一组有序的元素，遵循先进先出（FIFO）的原则。")]),s._v(" "),a("li",[a("strong",[s._v("实现原理")]),s._v("：队列接口定义了一组方法，如添加、删除、获取队首元素等。")]),s._v(" "),a("li",[a("strong",[s._v("常见实现类")]),s._v("："),a("code",[s._v("LinkedList")]),s._v("、"),a("code",[s._v("PriorityQueue")]),s._v("等。")]),s._v(" "),a("li",[a("strong",[s._v("注意事项")]),s._v("：队列通常用于实现生产者-消费者模式。")])])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("栈（Stack）")]),s._v("：")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("用途")]),s._v("：用于存储一组有序的元素，遵循后进先出（LIFO）的原则。")]),s._v(" "),a("li",[a("strong",[s._v("实现原理")]),s._v("：栈接口定义了一组方法，如压栈、出栈、获取栈顶元素等。")]),s._v(" "),a("li",[a("strong",[s._v("常见实现类")]),s._v("："),a("code",[s._v("LinkedList")]),s._v("、"),a("code",[s._v("ArrayDeque")]),s._v("等。")]),s._v(" "),a("li",[a("strong",[s._v("注意事项")]),s._v("：栈通常用于实现递归算法。")])])])]),s._v(" "),a("p",[s._v("在 Java 中，数据结构通常通过类和接口来表示。例如，"),a("code",[s._v("ArrayList")]),s._v(" 是 "),a("code",[s._v("List")]),s._v(" 接口的一个实现类，提供了动态数组的功能。使用数据结构时，需要注意以下几点：")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("选择合适的数据结构")]),s._v("：根据应用场景选择最合适的数据结构，以提高程序的性能和效率。")]),s._v(" "),a("li",[a("strong",[s._v("处理异常情况")]),s._v("：在使用数据结构时，需要处理可能出现的异常情况，如空指针异常、索引越界异常等。")]),s._v(" "),a("li",[a("strong",[s._v("线程安全")]),s._v("：如果多个线程同时访问和修改数据结构，需要考虑线程安全问题，可以使用同步机制或选择线程安全的实现类。")])]),s._v(" "),a("p",[s._v("合理使用数据结构可以大大提高程序的性能和可维护性。")]),s._v(" "),a("p",[s._v("整理：")]),s._v(" "),a("p",[a("code",[s._v("ArrayList")]),s._v("、"),a("code",[s._v("LinkedList")]),s._v("、"),a("code",[s._v("HashSet")]),s._v("、"),a("code",[s._v("TreeSet")]),s._v("、"),a("code",[s._v("HashMap")]),s._v("、"),a("code",[s._v("TreeMap")])]),s._v(" "),a("p",[a("code",[s._v("HashMap")]),s._v("、"),a("code",[s._v("TreeMap")]),s._v("、"),a("code",[s._v("LinkedHashMap")])]),s._v(" "),a("p",[a("code",[s._v("LinkedList")]),s._v("、"),a("code",[s._v("PriorityQueue")])]),s._v(" "),a("p",[a("code",[s._v("LinkedList")]),s._v("、"),a("code",[s._v("ArrayDeque")])]),s._v(" "),a("h2",{attrs:{id:"数组-arrays"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组-arrays"}},[s._v("#")]),s._v(" 数组（Arrays）")]),s._v(" "),a("p",[s._v("特点： 固定大小，存储相同类型的元素。")]),s._v(" "),a("p",[s._v("优点： 随机访问元素效率高。")]),s._v(" "),a("p",[s._v("缺点： 大小固定，插入和删除元素相对较慢。")]),s._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" array "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h2",{attrs:{id:"列表-lists"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#列表-lists"}},[s._v("#")]),s._v(" 列表（Lists）")]),s._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" arrayList "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" linkedList "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkedList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h3",{attrs:{id:"arraylist"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arraylist"}},[s._v("#")]),s._v(" ArrayList:")]),s._v(" "),a("p",[s._v("特点： 动态数组，可变大小。")]),s._v(" "),a("p",[s._v("优点： 高效的随机访问和快速尾部插入。")]),s._v(" "),a("p",[s._v("缺点： 中间插入和删除相对较慢。")]),s._v(" "),a("h3",{attrs:{id:"linkedlist"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linkedlist"}},[s._v("#")]),s._v(" LinkedList:")]),s._v(" "),a("p",[s._v("特点： 双向链表，元素之间通过指针连接。")]),s._v(" "),a("p",[s._v("优点： 插入和删除元素高效，迭代器性能好。")]),s._v(" "),a("p",[s._v("缺点： 随机访问相对较慢。")]),s._v(" "),a("h2",{attrs:{id:"集合-sets"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集合-sets"}},[s._v("#")]),s._v(" 集合（Sets）")]),s._v(" "),a("p",[s._v("集合（Sets）用于存储不重复的元素，常见的实现有 HashSet 和 TreeSet。")]),s._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Set")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" hashSet "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashSet")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Set")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" treeSet "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TreeSet")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h3",{attrs:{id:"hashset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashset"}},[s._v("#")]),s._v(" HashSet:")]),s._v(" "),a("p",[s._v("特点： 无序集合，基于HashMap实现。")]),s._v(" "),a("p",[s._v("优点： 高效的查找和插入操作。")]),s._v(" "),a("p",[s._v("缺点： 不保证顺序。")]),s._v(" "),a("h3",{attrs:{id:"treeset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treeset"}},[s._v("#")]),s._v(" TreeSet:")]),s._v(" "),a("p",[s._v("特点：TreeSet 是有序集合，底层基于红黑树实现，不允许重复元素。")]),s._v(" "),a("p",[s._v("优点： 提供自动排序功能，适用于需要按顺序存储元素的场景。")]),s._v(" "),a("p",[s._v("缺点： 性能相对较差，不允许插入 null 元素。")]),s._v(" "),a("h2",{attrs:{id:"映射-maps"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#映射-maps"}},[s._v("#")]),s._v(" 映射（Maps）")]),s._v(" "),a("p",[s._v("映射（Maps）用于存储键值对，常见的实现有 HashMap 和 TreeMap。")]),s._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" hashMap "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashMap")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" treeMap "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TreeMap")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h3",{attrs:{id:"hashmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap"}},[s._v("#")]),s._v(" HashMap:")]),s._v(" "),a("p",[s._v("特点： 基于哈希表实现的键值对存储结构。")]),s._v(" "),a("p",[s._v("优点： 高效的查找、插入和删除操作。")]),s._v(" "),a("p",[s._v("缺点： 无序，不保证顺序。")]),s._v(" "),a("h3",{attrs:{id:"treemap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treemap"}},[s._v("#")]),s._v(" TreeMap:")]),s._v(" "),a("p",[s._v("特点： 基于红黑树实现的有序键值对存储结构。")]),s._v(" "),a("p",[s._v("优点： 有序，支持按照键的顺序遍历。")]),s._v(" "),a("p",[s._v("缺点： 插入和删除相对较慢。")]),s._v(" "),a("h2",{attrs:{id:"栈-stack"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栈-stack"}},[s._v("#")]),s._v(" 栈（Stack）")]),s._v(" "),a("p",[s._v("栈（Stack）是一种线性数据结构，它按照后进先出（Last In, First Out，LIFO）的原则管理元素。在栈中，新元素被添加到栈的顶部，而只能从栈的顶部移除元素。这就意味着最后添加的元素是第一个被移除的。")]),s._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Stack")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" stack "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Stack")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h3",{attrs:{id:"stack-类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stack-类"}},[s._v("#")]),s._v(" Stack 类:")]),s._v(" "),a("p",[s._v("特点： 代表一个栈，通常按照后进先出（LIFO）的顺序操作元素。")]),s._v(" "),a("h2",{attrs:{id:"队列-queue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#队列-queue"}},[s._v("#")]),s._v(" 队列（Queue）")]),s._v(" "),a("p",[s._v("队列（Queue）遵循先进先出（FIFO）原则，常见的实现有 LinkedList 和 PriorityQueue。")]),s._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Queue")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" queue "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkedList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("Queue 接口:")]),s._v(" "),a("p",[s._v("特点： 代表一个队列，通常按照先进先出（FIFO）的顺序操作元素。")]),s._v(" "),a("p",[s._v("实现类： LinkedList, PriorityQueue, ArrayDeque。")]),s._v(" "),a("h2",{attrs:{id:"堆-heap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#堆-heap"}},[s._v("#")]),s._v(" 堆（Heap）")]),s._v(" "),a("p",[s._v("堆（Heap）优先队列的基础，可以实现最大堆和最小堆。")]),s._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PriorityQueue")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" minHeap "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PriorityQueue")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PriorityQueue")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" maxHeap "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PriorityQueue")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Collections")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("reverseOrder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h2",{attrs:{id:"树-trees"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树-trees"}},[s._v("#")]),s._v(" 树（Trees）")]),s._v(" "),a("p",[s._v("Java 提供了 TreeNode 类型，可以用于构建二叉树等数据结构。")]),s._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TreeNode")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TreeNode")]),s._v(" left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TreeNode")]),s._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TreeNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" val "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("h2",{attrs:{id:"图-graphs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图-graphs"}},[s._v("#")]),s._v(" 图（Graphs）")]),s._v(" "),a("p",[s._v("图的表示通常需要自定义数据结构或使用图库，Java 没有内建的图类。")]),s._v(" "),a("p",[s._v("一种数据结构。")]),s._v(" "),a("hr"),s._v(" "),a("blockquote",[a("p",[s._v("这一篇的知识点都理解了吗？下一篇会更加精彩，不要错过哦～")])])])}),[],!1,null,null,null);a.default=n.exports}}]);