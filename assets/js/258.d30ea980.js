(window.webpackJsonp=window.webpackJsonp||[]).push([[258],{1052:function(t,a,s){"use strict";s.r(a);var n=s(1),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"第27天"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第27天"}},[t._v("#")]),t._v(" 第27天")]),t._v(" "),a("blockquote",[a("p",[t._v("每一行代码都是你进步的见证，为你感到骄傲！")])]),t._v(" "),a("h2",{attrs:{id:"java-封装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-封装"}},[t._v("#")]),t._v(" Java 封装")]),t._v(" "),a("h3",{attrs:{id:"实现java封装的步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现java封装的步骤"}},[t._v("#")]),t._v(" 实现Java封装的步骤")]),t._v(" "),a("ol",[a("li",[t._v("修改属性的可见性来限制对属性的访问（一般限制为private）")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("对每个值属性提供对外的公共方法访问，也就是创建一对赋取值方法，用于对私有属性的访问")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("Java封装是一种面向对象编程（OOP）的概念，它指的是将对象的状态（属性）和行为（方法）捆绑在一起，并对外隐藏对象的具体实现细节，仅通过定义的接口与外部进行交互。封装的主要目的是保护对象的状态，防止外部代码直接访问和修改对象内部的数据，从而提高代码的安全性和可维护性。")]),t._v(" "),a("h3",{attrs:{id:"实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现原理"}},[t._v("#")]),t._v(" 实现原理")]),t._v(" "),a("ol",[a("li",[a("p",[a("strong",[t._v("访问修饰符")]),t._v("：Java提供了四种访问修饰符来控制类的成员（属性和方法）的访问级别：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("private")]),t._v("：仅当前类可以访问。")]),t._v(" "),a("li",[a("code",[t._v("default")]),t._v("（无修饰符）：仅同一包内的类可以访问。")]),t._v(" "),a("li",[a("code",[t._v("protected")]),t._v("：同一包内的类和不同包中的子类可以访问。")]),t._v(" "),a("li",[a("code",[t._v("public")]),t._v("：所有类都可以访问。")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("构造方法")]),t._v("：用于创建对象，并初始化对象的状态。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("getter和setter方法")]),t._v("：用于访问和修改私有属性。getter方法用于获取属性的值，setter方法用于设置属性的值。")])])]),t._v(" "),a("h3",{attrs:{id:"用途"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用途"}},[t._v("#")]),t._v(" 用途")]),t._v(" "),a("ol",[a("li",[a("p",[a("strong",[t._v("数据隐藏")]),t._v("：通过将属性设为私有，外部代码无法直接访问和修改对象的状态，只能通过提供的方法进行操作，从而保护数据的安全性和完整性。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("代码重用")]),t._v("：封装后的类可以被多个对象实例化，并且可以重用，提高了代码的复用性。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("易于维护")]),t._v("：封装后的类内部实现细节被隐藏，外部代码只需关注接口，降低了代码的耦合度，使得代码更容易维护和修改。")])])]),t._v(" "),a("h3",{attrs:{id:"注意事项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[t._v("#")]),t._v(" 注意事项")]),t._v(" "),a("ol",[a("li",[a("p",[a("strong",[t._v("合理使用访问修饰符")]),t._v("：根据实际需求选择合适的访问修饰符，避免过度暴露或过度限制访问。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("避免过度封装")]),t._v("：虽然封装可以提高代码的安全性和可维护性，但过度封装会导致代码难以理解和维护。因此，应该适度封装，保持代码的清晰和简洁。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("提供必要的接口")]),t._v("：封装后的类应该提供必要的接口（getter和setter方法），以便外部代码可以访问和修改对象的状态。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("异常处理")]),t._v("：在setter方法中，应该对输入参数进行验证，并在必要时抛出异常，以保证对象状态的有效性。")])])]),t._v(" "),a("p",[t._v("通过合理使用Java封装，可以提高代码的可读性、可维护性和安全性，是面向对象编程中非常重要的一个概念。")]),t._v(" "),a("hr"),t._v(" "),a("blockquote",[a("p",[t._v("学习编程就像搭积木，一块一块慢慢来，下一篇继续加油！")])])])}),[],!1,null,null,null);a.default=e.exports}}]);