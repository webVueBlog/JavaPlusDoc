(window.webpackJsonp=window.webpackJsonp||[]).push([[218],{1010:function(t,a,e){"use strict";e.r(a);var s=e(1),n=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("blockquote",[a("p",[t._v("点击勘误"),a("a",{attrs:{href:"https://github.com/webVueBlog/JavaPlusDoc/issues",target:"_blank",rel:"noopener noreferrer"}},[t._v("issues"),a("OutboundLink")],1),t._v("，哪吒感谢大家的阅读")])]),t._v(" "),a("img",{attrs:{align:"right",width:"100",src:"https://cdn.jsdelivr.net/gh/YunYouJun/yun/images/yun-alpha-compressed.png"}}),t._v(" "),a("h2",{attrs:{id:"list与set与queue与map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list与set与queue与map"}},[t._v("#")]),t._v(" List与Set与Queue与Map")]),t._v(" "),a("p",[t._v("Java 集合框架可以分为两条大的支线：")]),t._v(" "),a("p",[t._v("①、Collection，主要由 List、Set、Queue 组成：")]),t._v(" "),a("p",[t._v("List 代表有序、可重复的集合，典型代表就是封装了动态数组的 ArrayList 和封装了链表的 LinkedList；")]),t._v(" "),a("p",[t._v("Set 代表无序、不可重复的集合，典型代表就是 HashSet 和 TreeSet；")]),t._v(" "),a("p",[t._v("Queue 代表队列，典型代表就是双端队列 ArrayDeque，以及优先级队列 PriorityQueue。")]),t._v(" "),a("p",[t._v("②、Map，代表键值对的集合，典型代表就是 HashMap。")]),t._v(" "),a("h2",{attrs:{id:"list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[t._v("#")]),t._v(" List")]),t._v(" "),a("p",[t._v("List 的特点是存取有序，可以存放重复的元素，可以用下标对元素进行操作。")]),t._v(" "),a("p",[t._v("1）ArrayList")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// 创建一个集合\nArrayList<String> list = new ArrayList<String>();\n// 添加元素\nlist.add("aa");\nlist.add("bb");\nlist.add("cc");\n\n// 遍历集合 for 循环\nfor (int i = 0; i < list.size(); i++) {\n    String s = list.get(i);\n    System.out.println(s);\n}\n// 遍历集合 for each\nfor (String s : list) {\n    System.out.println(s);\n}\n\n// 删除元素\nlist.remove(1);\n// 遍历集合\nfor (String s : list) {\n    System.out.println(s);\n}\n\n// 修改元素\nlist.set(1, "dd");\n// 遍历集合\nfor (String s : list) {\n    System.out.println(s);\n}\n')])])]),a("ul",[a("li",[t._v("ArrayList 是由数组实现的，支持随机存取，也就是可以通过下标直接存取元素；")]),t._v(" "),a("li",[t._v("从尾部插入和删除元素会比较快捷，从中间插入和删除元素会比较低效，因为涉及到数组元素的复制和移动；")]),t._v(" "),a("li",[t._v("如果内部数组的容量不足时会自动扩容，因此当元素非常庞大的时候，效率会比较低。")])]),t._v(" "),a("p",[t._v("2）LinkedList")]),t._v(" "),a("p",[t._v("同样先来一段 LinkedList 的增删改查，和 ArrayList 几乎没什么差别。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// 创建一个集合\nLinkedList<String> list = new LinkedList<String>();\n// 添加元素\nlist.add("aa");\nlist.add("bb");\nlist.add("cc");\n\n// 遍历集合 for 循环\nfor (int i = 0; i < list.size(); i++) {\n    String s = list.get(i);\n    System.out.println(s);\n}\n// 遍历集合 for each\nfor (String s : list) {\n    System.out.println(s);\n}\n\n// 删除元素\nlist.remove(1);\n// 遍历集合\nfor (String s : list) {\n    System.out.println(s);\n}\n\n// 修改元素\nlist.set(1, "dd");\n// 遍历集合\nfor (String s : list) {\n    System.out.println(s);\n}\n')])])]),a("ul",[a("li",[t._v("LinkedList 是由双向链表实现的，不支持随机存取，只能从一端开始遍历，直到找到需要的元素后返回；")]),t._v(" "),a("li",[t._v("任意位置插入和删除元素都很方便，因为只需要改变前一个节点和后一个节点的引用即可，不像 ArrayList 那样需要复制和移动数组元素；")]),t._v(" "),a("li",[t._v("因为每个元素都存储了前一个和后一个节点的引用，所以相对来说，占用的内存空间会比 ArrayList 多一些。")])]),t._v(" "),a("p",[t._v("3）Vector 和 Stack")]),t._v(" "),a("p",[t._v("List 的实现类还有一个 Vector，是一个元老级的类，比 ArrayList 出现得更早。ArrayList 和 Vector 非常相似，只不过 Vector 是线程安全的，像 get、set、add 这些方法都加了 synchronized 关键字，就导致执行效率会比较低，所以现在已经很少用了。")]),t._v(" "),a("p",[t._v("我就不写太多代码了，只看一下 add 方法的源码就明白了。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    elementData"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("elementCount"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("这种加了同步方法的类，注定会被淘汰掉，就像StringBuilder 取代 StringBuffer那样。JDK 源码也说了：")]),t._v(" "),a("p",[t._v("如果不需要线程安全，建议使用 ArrayList 代替 Vector。")]),t._v(" "),a("p",[t._v("Stack 是 Vector 的一个子类，本质上也是由动态数组实现的，只不过还实现了先进后出的功能（在 get、set、add 方法的基础上追加了 pop「返回并移除栈顶的元素」、peek「只返回栈顶元素」等方法），所以叫栈。")]),t._v(" "),a("p",[t._v("下面是这两个方法的源码，增删改查我就不写了，和 ArrayList 和 LinkedList 几乎一样。")]),t._v(" "),a("p",[t._v("不过，由于 Stack 执行效率比较低（方法上同样加了 synchronized 关键字），就被双端队列 ArrayDeque 取代了")]),t._v(" "),a("h2",{attrs:{id:"set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[t._v("#")]),t._v(" Set")]),t._v(" "),a("p",[t._v("Set 的特点是存取无序，不可以存放重复的元素，不可以用下标对元素进行操作，和 List 有很多不同。")]),t._v(" "),a("p",[t._v("1）HashSet")]),t._v(" "),a("p",[t._v("HashSet 其实是由 HashMap 实现的，只不过值由一个固定的 Object 对象填充，而键用于操作。")]),t._v(" "),a("p",[t._v("实际开发中，HashSet 并不常用，比如，如果我们需要按照顺序存储一组元素，那么 ArrayList 和 LinkedList 可能更适合；如果我们需要存储键值对并根据键进行查找，那么 HashMap 可能更适合。")]),t._v(" "),a("p",[t._v("HashSet 主要用于去重，比如，我们需要统计一篇文章中有多少个不重复的单词，就可以使用 HashSet 来实现。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// 创建一个 HashSet 对象\nHashSet<String> set = new HashSet<>();\n\n// 添加元素\nset.add("aa");\nset.add("bb");\nset.add("cc");\nset.add("bb");\n\n// 输出 HashSet 的元素个数\nSystem.out.println("HashSet size: " + set.size()); // output: 3\n\n// 遍历 HashSet\nfor (String s : set) {\n    System.out.println(s);\n}\n')])])]),a("p",[t._v("2）LinkedHashSet")]),t._v(" "),a("p",[t._v("LinkedHashSet 虽然继承自 HashSet")]),t._v(" "),a("p",[t._v("这是 LinkedHashSet 的无参构造方法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("public LinkedHashSet() {\n    super(16, .75f, true);\n}\n")])])]),a("p",[t._v("super 的意思是它将调用父类的 HashSet 的一个有参构造方法：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashSet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" initialCapacity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" loadFactor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" dummy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    map "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedHashMap")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("initialCapacity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" loadFactor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("来看一段 LinkedHashSet 的增删改查吧。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('LinkedHashSet<String> set = new LinkedHashSet<>();\n\n// 添加元素\nset.add("aa");\nset.add("bb");\nset.add("cc");\n\n// 删除元素\nset.remove("bb");\n\n// 修改元素\nset.remove("aa");\nset.add("dd");\n\n// 查找元素\nboolean hasChenQingYang = set.contains("陈清扬");\nSystem.out.println("set包含陈清扬吗？" + hasChenQingYang);\n')])])]),a("p",[t._v("LinkedHashSet 是一种基于哈希表实现的 Set 接口，它继承自 HashSet，并且使用链表维护了元素的插入顺序。因此，它既具有 HashSet 的快速查找、插入和删除操作的优点，又可以维护元素的插入顺序")]),t._v(" "),a("p",[t._v("3）TreeSet")]),t._v(" "),a("p",[t._v("TreeSet 是由 TreeMap 实现的，只不过同样操作的键位，值由一个固定的 Object 对象填充。")]),t._v(" "),a("p",[t._v("TreeSet 是一种基于红黑树实现的有序集合，它实现了 SortedSet 接口，可以自动对集合中的元素进行排序。按照键的自然顺序或指定的比较器顺序进行排序。")]),t._v(" "),a("p",[t._v("需要注意的是，TreeSet 不允许插入 null 元素，否则会抛出 NullPointerException 异常。")]),t._v(" "),a("p",[t._v("总体上来说，Set 集合不是关注的重点，因为底层都是由 Map 实现的，为什么要用 Map 实现呢？")]),t._v(" "),a("p",[t._v("因为 Map 的键不允许重复、无序")]),t._v(" "),a("h2",{attrs:{id:"queue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#queue"}},[t._v("#")]),t._v(" Queue")]),t._v(" "),a("p",[t._v("Queue，也就是队列，通常遵循先进先出（FIFO）的原则，新元素插入到队列的尾部，访问元素返回队列的头部。")]),t._v(" "),a("p",[t._v("1）ArrayDeque")]),t._v(" "),a("p",[t._v("从名字上可以看得出，ArrayDeque 是一个基于数组实现的双端队列，为了满足可以同时在数组两端插入或删除元素的需求，数组必须是循环的，也就是说数组的任何一点都可以被看作是起点或者终点。")]),t._v(" "),a("p",[t._v("head 指向队首的第一个有效的元素，tail 指向队尾第一个可以插入元素的空位，因为是循环数组，所以 head 不一定从是从 0 开始，tail 也不一定总是比 head 大。")]),t._v(" "),a("p",[t._v("LinkedList 一般应该归在 List 下，只不过，它也实现了 Deque 接口，可以作为队列来使用。等于说，LinkedList 同时实现了 Stack、Queue、PriorityQueue 的所有功能。")]),t._v(" "),a("p",[t._v("换句话说，LinkedList 和 ArrayDeque 都是 Java 集合框架中的双向队列（deque），它们都支持在队列的两端进行元素的插入和删除操作。不过，LinkedList 和 ArrayDeque 在实现上有一些不同：")]),t._v(" "),a("ul",[a("li",[t._v("底层实现方式不同：LinkedList 是基于链表实现的，而 ArrayDeque 是基于数组实现的。")]),t._v(" "),a("li",[t._v("随机访问的效率不同：由于底层实现方式的不同，LinkedList 对于随机访问的效率较低，时间复杂度为 O(n)，而 ArrayDeque 可以通过下标随机访问元素，时间复杂度为 O(1)。")]),t._v(" "),a("li",[t._v("迭代器的效率不同：LinkedList 对于迭代器的效率比较低，因为需要通过链表进行遍历，时间复杂度为 O(n)，而 ArrayDeque 的迭代器效率比较高，因为可以直接访问数组中的元素，时间复杂度为 O(1)。")]),t._v(" "),a("li",[t._v("内存占用不同：由于 LinkedList 是基于链表实现的，它在存储元素时需要额外的空间来存储链表节点，因此内存占用相对较高，而 ArrayDeque 是基于数组实现的，内存占用相对较低。")])]),t._v(" "),a("p",[t._v("因此，在选择使用 LinkedList 还是 ArrayDeque 时，需要根据具体的业务场景和需求来选择。如果需要在双向队列的两端进行频繁的插入和删除操作，并且需要随机访问元素，可以考虑使用 ArrayDeque；如果需要在队列中间进行频繁的插入和删除操作，可以考虑使用 LinkedList。")]),t._v(" "),a("p",[t._v("在使用 LinkedList 作为队列时，可以使用 offer() 方法将元素添加到队列的末尾，使用 poll() 方法从队列的头部删除元素。另外，由于 LinkedList 是链表结构，不支持随机访问元素，因此不能使用下标访问元素，需要使用迭代器或者 poll() 方法依次遍历元素。")]),t._v(" "),a("p",[t._v("3）PriorityQueue")]),t._v(" "),a("p",[t._v("PriorityQueue 是一种优先级队列，它的出队顺序与元素的优先级有关，执行 remove 或者 poll 方法，返回的总是优先级最高的元素。")]),t._v(" "),a("p",[t._v("要想有优先级，元素就需要实现 Comparable 接口或者 Comparator 接口")]),t._v(" "),a("p",[t._v("通过实现 Comparator 接口按照年龄姓名排序的优先级队列")]),t._v(" "),a("h2",{attrs:{id:"map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[t._v("#")]),t._v(" Map")]),t._v(" "),a("p",[t._v("Map 保存的是键值对，键要求保持唯一性，值可以重复。")]),t._v(" "),a("p",[t._v("1）HashMap")]),t._v(" "),a("p",[t._v("HashMap 实现了 Map 接口，可以根据键快速地查找对应的值——通过哈希函数将键映射到哈希表中的一个索引位置，从而实现快速访问。")]),t._v(" "),a("p",[t._v("HashMap 的特点：")]),t._v(" "),a("ul",[a("li",[t._v("HashMap 中的键和值都可以为 null。如果键为 null，则将该键映射到哈希表的第一个位置。")]),t._v(" "),a("li",[t._v("可以使用迭代器或者 forEach 方法遍历 HashMap 中的键值对。")]),t._v(" "),a("li",[t._v("HashMap 有一个初始容量和一个负载因子。初始容量是指哈希表的初始大小，负载因子是指哈希表在扩容之前可以存储的键值对数量与哈希表大小的比率。默认的初始容量是 16，负载因子是 0.75。")])]),t._v(" "),a("p",[t._v("2）LinkedHashMap")]),t._v(" "),a("p",[t._v("HashMap 已经非常强大了，但它是无序的。如果我们需要一个有序的 Map，就要用到 LinkedHashMap。LinkedHashMap 是 HashMap 的子类，它使用链表来记录插入/访问元素的顺序。")]),t._v(" "),a("p",[t._v("LinkedHashMap 可以看作是 HashMap + LinkedList 的合体，它使用了哈希表来存储数据，又用了双向链表来维持顺序。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// 创建一个 LinkedHashMap，插入的键值对为 aa bb cc\nLinkedHashMap<String, String> linkedHashMap = new LinkedHashMap<>();\nlinkedHashMap.put("aa", "cenzhong");\nlinkedHashMap.put("bb", "wanger");\nlinkedHashMap.put("cc", "chenqingyang");\n\n// 遍历 LinkedHashMap\nfor (String key : linkedHashMap.keySet()) {\n    String value = linkedHashMap.get(key);\n    System.out.println(key + " 对应的值为：" + value);\n}\n')])])]),a("p",[t._v("HashMap 没有维持键值对的插入顺序，对吧？")]),t._v(" "),a("p",[t._v("3）TreeMap")]),t._v(" "),a("p",[t._v("TreeMap 实现了 SortedMap 接口，可以自动将键按照自然顺序或指定的比较器顺序排序，并保证其元素的顺序。内部使用红黑树来实现键的排序和查找。")]),t._v(" "),a("p",[t._v("与 HashMap 不同的是，TreeMap 会按照键的顺序来进行排序。")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[t._v("// 创建一个 TreeMap 对象\nMap"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("String,")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(' treeMap = new TreeMap<>();\n\n// 向 TreeMap 中添加键值对\ntreeMap.put("c", "cat");\ntreeMap.put("a", "apple");\ntreeMap.put("b", "banana");\n\n// 遍历 TreeMap\nfor (Map.Entry'),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("String,")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(' entry : treeMap.entrySet()) {\n    System.out.println(entry.getKey() + ": " + entry.getValue());\n}\n')])])]),a("p",[t._v("来看输出结果：")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[t._v("a: apple\nb: banana\nc: cat\n\n")])])]),a("p",[t._v("默认情况下，已经按照键的自然顺序排过了。")])])}),[],!1,null,null,null);a.default=n.exports}}]);