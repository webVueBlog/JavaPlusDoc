(window.webpackJsonp=window.webpackJsonp||[]).push([[391],{1216:function(t,e,s){"use strict";s.r(e);var a=s(1),n=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("blockquote",[e("p",[t._v("点击勘误"),e("a",{attrs:{href:"https://github.com/webVueBlog/JavaPlusDoc/issues",target:"_blank",rel:"noopener noreferrer"}},[t._v("issues"),e("OutboundLink")],1),t._v("，哪吒感谢大家的阅读")])]),t._v(" "),e("img",{attrs:{align:"right",width:"100",src:"https://cdn.jsdelivr.net/gh/YunYouJun/yun/images/yun-alpha-compressed.png"}}),t._v(" "),e("h2",{attrs:{id:"springboot整合mybatis"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#springboot整合mybatis"}},[t._v("#")]),t._v(" SpringBoot整合MyBatis")]),t._v(" "),e("p",[t._v("ORM 框架的本质是简化操作数据库的编码工作，常用的框架有两个，一个是可以灵活执行动态 SQL 的 MyBatis；一个是崇尚不用写 SQL 的 Hibernate。前者互联网行业用的多，后者传统行业用的多。")]),t._v(" "),e("p",[t._v("MyBatis 早些时候用起来比较繁琐，需要各种配置文件，需要实体类和 DAO 的映射关联，经过不断地演化和改进，可以通过 generator 自动生成实体类、配置文件和 DAO 层代码，简化了不少开发工作。")]),t._v(" "),e("p",[t._v("随着 MyBatis-Plus 的出现，又进一步加速了 MyBatis 的发展。经过 MyBatis-Plus 的增强，开发者只需要简单的配置，就可以快速进行单表的 CRUD 操作；同时，MyBatis-Plus又提供了代码生成、自动分页、逻辑删除、自动填充等丰富功能，进一步简化了开发工作。")]),t._v(" "),e("h2",{attrs:{id:"整合-mybatis"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#整合-mybatis"}},[t._v("#")]),t._v(" 整合 MyBatis")]),t._v(" "),e("p",[t._v("第一步，在 pom.xml 文件中引入 starter。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<dependency>\n    <groupId>org.mybatis.spring.boot</groupId>\n    <artifactId>mybatis-spring-boot-starter</artifactId>\n    <version>2.2.2</version>\n</dependency>\n")])])]),e("p",[t._v("第二步，在 application.yml 文件中添加数据库连接配置。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("spring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    username: root\n    password: **\n    url: jdbc:mysql://localhost:3306/xxx-mybatis?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&useSSL=false\n")])])]),e("p",[t._v("这里使用了 lombok 的")]),t._v(" "),e("ol",[e("li",[t._v("@Data 注解自动生成 getter/setter")]),t._v(" "),e("li",[t._v("@Builder 生成链式调用")]),t._v(" "),e("li",[t._v("由于 @Data和@Builder 配合使用的时候会导致无参构造方法丢失，所以我们主动声明了无参构造方法，并使用 @Tolerate 注解来告诉 lombok 请允许我们的无参构造方法存在（没有无参构造方法的时候会导致 ORM 映射出错）")])]),t._v(" "),e("p",[t._v("第五步，新建 UserMapper.java 接口：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('public interface UserMapper {\n    @Select("SELECT * FROM user")\n    List<User> getAll();\n\n    @Select("SELECT * FROM user WHERE id = #{id}")\n    User getOne(Integer id);\n\n    @Insert("INSERT INTO user(name,password,age) VALUES(#{name}, #{password}, #{age})")\n    void insert(User user);\n\n    @Update("UPDATE user SET name=#{name},password=#{password},age=#{age} WHERE id =#{id}")\n    void update(User user);\n\n    @Delete("DELETE FROM user WHERE id =#{id}")\n    void delete(Integer id);\n}\n')])])]),e("ol",[e("li",[t._v("@Select 注解用来查询")]),t._v(" "),e("li",[t._v("@Insert 注解用来插入")]),t._v(" "),e("li",[t._v("@Update 注解用来修改")]),t._v(" "),e("li",[t._v("@Delete 注解用来删除")])]),t._v(" "),e("p",[t._v("第六步，在启动类 CodingmoreMybatisApplication 上添加 @MapperScan 注解来扫描 mapper。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("@SpringBootApplication\n@MapperScan\npublic class CodingmoreMybatisApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(CodingmoreMybatisApplication.class, args);\n\t}\n\n}\n")])])]),e("p",[t._v("如果没有指定 @MapperScan 的扫描路径，将从声明该注解的类的包开始进行扫描。")]),t._v(" "),e("p",[t._v("第七步，在测试类中对 mapper 进行测试。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('@SpringBootTest\n@Slf4j\nclass CodingmoreMybatisApplicationTests {\n\n\t@Autowired\n\tprivate UserMapper userMapper;\n\n\t@Test\n\tvoid testInsert() {\n\t\tuserMapper.insert(User.builder().age(18).name("aa").password("123456").build());\n\t\tuserMapper.insert(User.builder().age(18).name("bb").password("123456").build());\n\t\tuserMapper.insert(User.builder().age(18).name("cc").password("123456").build());\n\t\tlog.info("查询所有：{}",userMapper.getAll().stream().toArray());\n\t}\n\n\t@Test\n\tList<User> testQuery() {\n\t\tList<User> all = userMapper.getAll();\n\t\tlog.info("查询所有：{}",all.stream().toArray());\n\t\treturn all;\n\t}\n\n\t@Test\n\tvoid testUpdate() {\n\t\tUser one = userMapper.getOne(1);\n\t\tlog.info("更新前{}", one);\n\t\tone.setPassword("654321");\n\t\tuserMapper.update(one);\n\t\tlog.info("更新后{}", userMapper.getOne(1));\n\t}\n\n\t@Test\n\tvoid testDelete() {\n\t\tlog.info("删除前{}", userMapper.getAll().toArray());\n\t\tuserMapper.delete(1);\n\t\tlog.info("删除后{}", userMapper.getAll().toArray());\n\n\t}\n}\n')])])]),e("h2",{attrs:{id:"极简-xml-版本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#极简-xml-版本"}},[t._v("#")]),t._v(" 极简 xml 版本")]),t._v(" "),e("p",[t._v("极简 xml 版本比较适合更加复杂的 SQL，接口层只定义空的方法，然后在 xml 中编写对应的 SQL。")]),t._v(" "),e("p",[t._v("第一步，新建 PostMapper。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("public interface PostMapper {\n    List<Posts> getAll();\n    Posts getOne(Long id);\n    void insert(Posts post);\n    void update(Posts post);\n    void delete(Long id);\n}\n")])])]),e("p",[t._v("第二步，在 resources 目录下新建 PostMapper.xml 文件。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">\n<mapper namespace="top.codingmore.mapper.PostMapper">\n    <resultMap id="BaseResultMap" type="top.codingmore.entity.Posts">\n        <id column="posts_id" property="postsId"/>\n        <result column="post_author" property="postAuthor"/>\n        <result column="post_content" property="postContent"/>\n        <result column="post_title" property="postTitle"/>\n    </resultMap>\n\n    <sql id="Base_Column_List">\n        posts_id, post_author, post_content, post_title\n    </sql>\n\n    <select id="getAll" resultMap="BaseResultMap">\n        select\n        <include refid="Base_Column_List" />\n        from posts;\n    </select>\n\n    <select id="getOne" parameterType="java.lang.Long" resultMap="BaseResultMap" >\n        SELECT\n        <include refid="Base_Column_List" />\n        FROM users\n        WHERE id = #{id}\n    </select>\n\n    <insert id="insert" parameterType="top.codingmore.entity.Posts">\n        insert into\n            posts\n            (post_author,post_content,post_title)\n        values\n            (#{postAuthor},#{postContent},#{postTitle});\n    </insert>\n    <update id="update" parameterType="top.codingmore.entity.Posts">\n        update\n            posts\n        set\n        <if test="postAuthor != null">post_author=#{postAuthor},</if>\n        <if test="postContent != null">post_content=#{postContent},</if>\n        post_title=#{postTitle}\n        where id=#{id}\n    </update>\n    <delete id="delete">\n        delete from\n            posts\n        where\n            id=#{id}\n    </delete>\n</mapper>\n')])])]),e("p",[t._v("接口中方法对应的 SQL 直接写在 xml 文件中")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<build>\n    <resources>\n        <resource>\n            <directory>src/main/java</directory>\n            <includes>\n                <include>**/*.xml</include>\n            </includes>\n        </resource>\n        <resource>\n            <directory>src/main/resources</directory>\n        </resource>\n    </resources>\n</build>\n")])])]),e("p",[t._v("如果直接放在 resources 目录下，就不用担心打包时被忽略了，但放在 resources 目录下不会被  MyBatis 自动扫描到，所以需要在 application.yml 配置文件中告诉 MyBatis 具体的扫描路径：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("mybatis:\n  mapper-locations: classpath:mapper/*.xml\n")])])]),e("p",[t._v("第三步，在测试类中添加测试方法：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('@Test\nvoid testPostInsert() {\n    postMapper.insert(Posts.builder()\n            .postAuthor(1L)\n            .postTitle("aa")\n            .postContent("123456")\n            .build());\n    log.info("查询所有：{}",postMapper.getAll().stream().toArray());\n}\n\n@Test\nList<Posts> testPostQuery() {\n    List<Posts> all = postMapper.getAll();\n    log.info("查询所有：{}",all.stream().toArray());\n    return all;\n}\n\n@Test\nvoid testPostUpdate() {\n    Posts one = postMapper.getOne(1L);\n    log.info("更新前{}", one);\n    one.setPostContent("bb");\n    postMapper.update(one);\n    log.info("更新后{}", postMapper.getOne(1L));\n}\n\n@Test\nvoid testPostDelete() {\n    log.info("删除前{}", postMapper.getAll().toArray());\n    postMapper.delete(1L);\n    log.info("删除后{}", postMapper.getAll().toArray());\n\n}\n')])])]),e("p",[t._v("可以看得出，注解版比较适合简单的 SQL 语句，一旦遇到比较复杂的 SQL 查询，比如说多表查询，xml 中写 SQL 语句会容易实现。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<select id="findByPageWithTagPaged" resultMap="PostsVoResultMapWithTagList">\n    SELECT a.*, pt.description, ptr.post_tag_id\n    FROM (\n             SELECT\n                <include refid="Base_Column_List_No_Content" />,\n                 b.term_taxonomy_id,\n                 c.user_nicename\n             FROM\n                 posts a\n                     LEFT JOIN term_relationships b ON a.posts_id = b.term_relationships_id\n                     LEFT JOIN users c ON a.post_author = c.users_id\n             WHERE 1=1\n             <if test="searchTagId != null">\n                and a.posts_id in (select post_id from post_tag_relation where post_tag_id=#{searchTagId})\n             </if>\n             and ${ew.sqlSegment}\n                 LIMIT #{pageStart}, #{pageSize}\n         ) a\n             LEFT JOIN post_tag_relation ptr on a.posts_id = ptr.post_id\n             LEFT JOIN post_tag pt on pt.post_tag_id = ptr.post_tag_id\n</select>\n')])])]),e("h2",{attrs:{id:"通过-mybatis-plus-增强"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通过-mybatis-plus-增强"}},[t._v("#")]),t._v(" 通过 MyBatis-Plus 增强")]),t._v(" "),e("p",[t._v("MP 提供了诸多优秀的特性，比如说：")]),t._v(" "),e("ol",[e("li",[t._v("强大的 CRUD 操作：内置了通用的 mapper、service，可通过少量的配置实现大部分常用的 CRUD，不用再编写 SQL 语句。")]),t._v(" "),e("li",[t._v("支持主键自动生成")]),t._v(" "),e("li",[t._v("支持 ActiveRecord 模式：实体类只需继承 Model 类即可进行强大的 CRUD 操作")]),t._v(" "),e("li",[t._v("强大的代码生成器：可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码")]),t._v(" "),e("li",[t._v("内置分页插件")]),t._v(" "),e("li",[t._v("内置性能分析插件：可输出 SQL 语句以及其执行时间")])]),t._v(" "),e("p",[t._v("第一步，在 pom.xml 文件中添加 MyBatis-Plus 的 starter。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<dependency>\n    <groupId>com.baomidou</groupId>\n    <artifactId>mybatis-plus-boot-starter</artifactId>\n    <version>3.4.2</version>\n</dependency>\n")])])]),e("p",[t._v("第二步，新建 PostTag 实体类。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("@Data\npublic class PostTag {\n    private Long postTagId;\n    private String description;\n}\n")])])]),e("p",[t._v("可以看得出，类名 PostTag，字段名 postTagId 和数据库表 post_tag、字段名 post_tag_id 并不一致，但 mp 自动帮我们做了映射关联。")]),t._v(" "),e("p",[t._v("第二步，新建 PostTagMapper 继承 BaseMapper，继承该接口后，无需编写 mapper.xml 文件，即可获得CRUD功能。")])])}),[],!1,null,null,null);e.default=n.exports}}]);