(window.webpackJsonp=window.webpackJsonp||[]).push([[412],{1243:function(t,s,a){"use strict";a.r(s);var n=a(1),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("blockquote",[s("p",[t._v("点击勘误"),s("a",{attrs:{href:"https://github.com/webVueBlog/JavaPlusDoc/issues",target:"_blank",rel:"noopener noreferrer"}},[t._v("issues"),s("OutboundLink")],1),t._v("，哪吒感谢大家的阅读")])]),t._v(" "),s("img",{attrs:{align:"right",width:"100",src:"https://cdn.jsdelivr.net/gh/YunYouJun/yun/images/yun-alpha-compressed.png"}}),t._v(" "),s("h2",{attrs:{id:"谈谈对stream流的理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#谈谈对stream流的理解"}},[t._v("#")]),t._v(" 谈谈对stream流的理解")]),t._v(" "),s("p",[t._v("Stream流是Java 8引入的一种新的数据处理方式，它提供了一种高效、简洁的方式来处理集合数据。Stream流可以看作是对集合数据的操作管道，它可以将集合数据转换为一个流，然后通过一系列的中间操作（如过滤、映射、排序等）对数据进行处理，最后通过终端操作（如收集、计数、查找等）获取处理结果。")]),t._v(" "),s("p",[t._v("Stream流的主要特点包括：")]),t._v(" "),s("ol",[s("li",[s("p",[s("strong",[t._v("惰性求值")]),t._v("：Stream流中的操作是惰性求值的，即只有当终端操作被调用时，中间操作才会被执行。这样可以避免不必要的计算，提高性能。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("不可变性")]),t._v("：Stream流中的数据是不可变的，即一旦创建，就不能修改。这样可以避免数据被意外修改，提高数据的安全性。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("函数式编程")]),t._v("：Stream流支持函数式编程，可以使用Lambda表达式和函数式接口来简化代码，提高代码的可读性和可维护性。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("并行处理")]),t._v("：Stream流支持并行处理，可以将数据分成多个部分，并行处理，提高处理速度。")])])]),t._v(" "),s("p",[t._v("Stream流的使用步骤包括：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("创建Stream：可以通过集合、数组、Stream.of()等方法创建Stream。")])]),t._v(" "),s("li",[s("p",[t._v("中间操作：对Stream中的数据进行一系列的中间操作，如过滤、映射、排序等。")])]),t._v(" "),s("li",[s("p",[t._v("终端操作：对Stream中的数据进行终端操作，如收集、计数、查找等。")])])]),t._v(" "),s("p",[t._v("Stream流的使用示例如下：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" numbers "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("asList")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" evenNumbers "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" numbers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("collect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collectors")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toList")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),s("p",[t._v("在这个示例中，首先创建了一个包含1到5的整数列表，然后通过"),s("code",[t._v("stream()")]),t._v("方法创建了一个Stream，接着通过"),s("code",[t._v("filter()")]),t._v("方法过滤出偶数，最后通过"),s("code",[t._v("collect()")]),t._v("方法将结果收集到一个新的列表中。")]),t._v(" "),s("p",[t._v("总的来说，Stream流是一种高效、简洁的数据处理方式，它提供了一种新的编程范式，可以简化代码，提高代码的可读性和可维护性。")])])}),[],!1,null,null,null);s.default=e.exports}}]);