(window.webpackJsonp=window.webpackJsonp||[]).push([[255],{1042:function(t,a,s){"use strict";s.r(a);var n=s(1),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"第18天"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第18天"}},[t._v("#")]),t._v(" 第18天")]),t._v(" "),a("blockquote",[a("p",[t._v("学习要循序渐进，不要给自己太大压力哦！")])]),t._v(" "),a("p",[t._v("学习技巧：掌握，先了解内容，理解原理，一旦理解了原理，就运用自如了。")]),t._v(" "),a("h2",{attrs:{id:"java-正则表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-正则表达式"}},[t._v("#")]),t._v(" Java 正则表达式")]),t._v(" "),a("p",[t._v("Java 正则表达式是一种强大的文本处理工具，用于在字符串中查找、替换和匹配特定的模式。正则表达式由一系列字符和符号组成，可以用来描述字符串的模式。在Java中，正则表达式通过"),a("code",[t._v("java.util.regex")]),t._v("包中的类来实现，主要包括"),a("code",[t._v("Pattern")]),t._v("和"),a("code",[t._v("Matcher")]),t._v("两个类。")]),t._v(" "),a("h3",{attrs:{id:"实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现原理"}},[t._v("#")]),t._v(" 实现原理")]),t._v(" "),a("ol",[a("li",[a("p",[a("strong",[t._v("Pattern类")]),t._v("：用于定义正则表达式模式。它提供了静态方法"),a("code",[t._v("compile(String regex)")]),t._v("，用于编译一个正则表达式，并返回一个"),a("code",[t._v("Pattern")]),t._v("对象。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Matcher类")]),t._v("：用于匹配输入的字符串。它提供了"),a("code",[t._v("matches(String input)")]),t._v("方法，用于检查整个输入字符串是否与模式匹配，以及"),a("code",[t._v("find()")]),t._v("和"),a("code",[t._v("group()")]),t._v("方法，用于查找和提取匹配的子字符串。")])])]),t._v(" "),a("h3",{attrs:{id:"用途"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用途"}},[t._v("#")]),t._v(" 用途")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("字符串验证")]),t._v("：验证输入字符串是否符合特定的格式，如电子邮件地址、电话号码等。")]),t._v(" "),a("li",[a("strong",[t._v("字符串查找和替换")]),t._v("：在文本中查找特定的模式，并进行替换。")]),t._v(" "),a("li",[a("strong",[t._v("数据提取")]),t._v("：从复杂的文本中提取有用的信息，如从HTML中提取链接、从日志文件中提取特定信息等。")])]),t._v(" "),a("h3",{attrs:{id:"示例代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#示例代码"}},[t._v("#")]),t._v(" 示例代码")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pattern")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Matcher")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegexExample")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定义正则表达式")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("quot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\\\\b\\\\w"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\\\\b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("quot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" input "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("quot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Hello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" world"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("This")]),t._v(" is a regex example"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("&quot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 编译正则表达式")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pattern")]),t._v(" pattern "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pattern")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建Matcher对象")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Matcher")]),t._v(" matcher "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pattern"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("matcher")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 查找匹配的子字符串")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("matcher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("quot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Found")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("quot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" matcher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("group")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"注意事项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[t._v("#")]),t._v(" 注意事项")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("性能问题")]),t._v("：正则表达式匹配可能比较耗时，特别是在处理大型文本时，应尽量优化正则表达式，避免使用复杂的模式。")]),t._v(" "),a("li",[a("strong",[t._v("转义字符")]),t._v("：正则表达式中的某些字符有特殊含义，如"),a("code",[t._v(".")]),t._v("、"),a("code",[t._v("*")]),t._v("、"),a("code",[t._v("?")]),t._v("等，如果需要匹配这些字符本身，需要使用转义字符"),a("code",[t._v("\\")]),t._v("。")]),t._v(" "),a("li",[a("strong",[t._v("贪婪匹配和懒惰匹配")]),t._v("：正则表达式默认是贪婪匹配，即尽可能多地匹配字符。如果需要懒惰匹配，可以使用"),a("code",[t._v("?")]),t._v("符号，如"),a("code",[t._v(".*?")]),t._v("表示匹配任意字符，但尽可能少地匹配。")])]),t._v(" "),a("p",[t._v("通过掌握Java正则表达式，可以大大提高文本处理的能力，解决各种复杂的字符串操作问题。")]),t._v(" "),a("hr"),t._v(" "),a("blockquote",[a("p",[t._v("又学会了新技能！继续保持这个学习节奏，下一篇见～")])])])}),[],!1,null,null,null);a.default=e.exports}}]);