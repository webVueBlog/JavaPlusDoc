(window.webpackJsonp=window.webpackJsonp||[]).push([[410],{1241:function(t,a,e){"use strict";e.r(a);var r=e(1),s=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("blockquote",[a("p",[t._v("点击勘误"),a("a",{attrs:{href:"https://github.com/webVueBlog/JavaPlusDoc/issues",target:"_blank",rel:"noopener noreferrer"}},[t._v("issues"),a("OutboundLink")],1),t._v("，哪吒感谢大家的阅读")])]),t._v(" "),a("img",{attrs:{align:"right",width:"100",src:"https://cdn.jsdelivr.net/gh/YunYouJun/yun/images/yun-alpha-compressed.png"}}),t._v(" "),a("h2",{attrs:{id:"redis缓存系统常见应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis缓存系统常见应用场景"}},[t._v("#")]),t._v(" Redis缓存系统常见应用场景")]),t._v(" "),a("h2",{attrs:{id:"📦-一、redis-缓存系统常见应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#📦-一、redis-缓存系统常见应用场景"}},[t._v("#")]),t._v(" 📦 一、Redis 缓存系统常见应用场景")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("场景")]),t._v(" "),a("th",[t._v("示例")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("热门商品缓存")]),t._v(" "),a("td",[t._v("电商首页、详情页秒开")])]),t._v(" "),a("tr",[a("td",[t._v("订单信息缓存")]),t._v(" "),a("td",[t._v("避免频繁访问数据库")])]),t._v(" "),a("tr",[a("td",[t._v("登录态存储")]),t._v(" "),a("td",[t._v("Token、Session 缓存")])]),t._v(" "),a("tr",[a("td",[t._v("接口幂等校验")]),t._v(" "),a("td",[t._v("基于 Redis 保证请求唯一")])]),t._v(" "),a("tr",[a("td",[t._v("防刷频控")]),t._v(" "),a("td",[t._v("限制单位时间内的请求次数")])])])]),t._v(" "),a("h2",{attrs:{id:"🔥-二、热点缓存-高频数据缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🔥-二、热点缓存-高频数据缓存"}},[t._v("#")]),t._v(" 🔥 二、热点缓存（高频数据缓存）")]),t._v(" "),a("h3",{attrs:{id:"✅-目标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#✅-目标"}},[t._v("#")]),t._v(" ✅ 目标：")]),t._v(" "),a("p",[t._v("避免对数据库频繁查询相同数据，使用 Redis 缓存住热点。")]),t._v(" "),a("h3",{attrs:{id:"示例代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#示例代码"}},[t._v("#")]),t._v(" 示例代码：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('public Product getProduct(Long productId) {\n    String cacheKey = "product:" + productId;\n    String json = redisTemplate.opsForValue().get(cacheKey);\n    \n    if (StringUtils.hasText(json)) {\n        return JSON.parseObject(json, Product.class);\n    }\n\n    // 查询数据库\n    Product product = productMapper.selectById(productId);\n    if (product != null) {\n        redisTemplate.opsForValue().set(cacheKey, JSON.toJSONString(product), 10, TimeUnit.MINUTES);\n    }\n    return product;\n}\n')])])]),a("h2",{attrs:{id:"🚫-三、缓存穿透-查询不存在的数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🚫-三、缓存穿透-查询不存在的数据"}},[t._v("#")]),t._v(" 🚫 三、缓存穿透（查询不存在的数据）")]),t._v(" "),a("h3",{attrs:{id:"✅-场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#✅-场景"}},[t._v("#")]),t._v(" ✅ 场景：")]),t._v(" "),a("p",[t._v("恶意请求大量不存在的 key，缓存未命中，数据库压力骤增。")]),t._v(" "),a("h3",{attrs:{id:"✅-解决方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#✅-解决方案"}},[t._v("#")]),t._v(" ✅ 解决方案：")]),t._v(" "),a("h4",{attrs:{id:"✅-1-布隆过滤器-bloom-filter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#✅-1-布隆过滤器-bloom-filter"}},[t._v("#")]),t._v(" ✅ 1. 布隆过滤器（Bloom Filter）")]),t._v(" "),a("ul",[a("li",[t._v("将所有合法 ID 加入布隆过滤器，非法请求直接拦截。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("if (!bloomFilter.contains(id)) {\n    return null; // 无效请求\n}\n")])])]),a("h4",{attrs:{id:"✅-2-缓存空值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#✅-2-缓存空值"}},[t._v("#")]),t._v(" ✅ 2. 缓存空值")]),t._v(" "),a("ul",[a("li",[t._v("将查询结果为 "),a("code",[t._v("null")]),t._v(" 也缓存一段时间，避免频繁打数据库。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('if (product == null) {\n    redisTemplate.opsForValue().set(cacheKey, "", 2, TimeUnit.MINUTES);\n}\n')])])]),a("h2",{attrs:{id:"🧊-四、缓存雪崩-大面积缓存同时过期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🧊-四、缓存雪崩-大面积缓存同时过期"}},[t._v("#")]),t._v(" 🧊 四、缓存雪崩（大面积缓存同时过期）")]),t._v(" "),a("h3",{attrs:{id:"✅-场景-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#✅-场景-2"}},[t._v("#")]),t._v(" ✅ 场景：")]),t._v(" "),a("p",[t._v("缓存集中在某一时刻过期，导致短时间大量请求打到数据库。")]),t._v(" "),a("h3",{attrs:{id:"✅-解决方案-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#✅-解决方案-2"}},[t._v("#")]),t._v(" ✅ 解决方案：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("缓存过期加随机")]),t._v(" "),a("td",[t._v("给过期时间增加随机值，避免同时失效")])]),t._v(" "),a("tr",[a("td",[t._v("数据预热")]),t._v(" "),a("td",[t._v("启动时或定时预加载关键数据到缓存")])]),t._v(" "),a("tr",[a("td",[t._v("多级缓存")]),t._v(" "),a("td",[t._v("本地缓存 + 分布式缓存（如 Guava + Redis）")])])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 设置过期时间随机值 10-15 分钟\nlong timeout = 10 + new Random().nextInt(5);\nredisTemplate.opsForValue().set(key, value, timeout, TimeUnit.MINUTES);\n")])])]),a("h2",{attrs:{id:"🔐-五、缓存击穿-单个热点数据失效"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🔐-五、缓存击穿-单个热点数据失效"}},[t._v("#")]),t._v(" 🔐 五、缓存击穿（单个热点数据失效）")]),t._v(" "),a("h3",{attrs:{id:"✅-场景-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#✅-场景-3"}},[t._v("#")]),t._v(" ✅ 场景：")]),t._v(" "),a("p",[t._v("某个高并发访问的 key 刚好失效，大量请求同时打到数据库。")]),t._v(" "),a("h3",{attrs:{id:"✅-解决方案-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#✅-解决方案-3"}},[t._v("#")]),t._v(" ✅ 解决方案：")]),t._v(" "),a("h4",{attrs:{id:"✅-1-分布式锁保护-推荐使用-redisson"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#✅-1-分布式锁保护-推荐使用-redisson"}},[t._v("#")]),t._v(" ✅ 1. 分布式锁保护（推荐使用 Redisson）")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('RLock lock = redissonClient.getLock("lock:product:" + id);\nif (lock.tryLock()) {\n    try {\n        // 查询数据库并写入缓存\n    } finally {\n        lock.unlock();\n    }\n} else {\n    // 其他线程睡眠等待缓存\n    Thread.sleep(50);\n    return redisTemplate.opsForValue().get(cacheKey);\n}\n')])])]),a("h4",{attrs:{id:"✅-2-本地互斥锁-guava-caffeine-本地缓存配合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#✅-2-本地互斥锁-guava-caffeine-本地缓存配合"}},[t._v("#")]),t._v(" ✅ 2. 本地互斥锁（Guava / Caffeine 本地缓存配合）")]),t._v(" "),a("h2",{attrs:{id:"🧠-六、封装模板-伪代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🧠-六、封装模板-伪代码"}},[t._v("#")]),t._v(" 🧠 六、封装模板（伪代码）")]),t._v(" "),a("p",[t._v("可以将缓存逻辑封装成统一的工具类或注解方式（配合 AOP）：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('public <T> T queryWithCache(String keyPrefix, Long id, Function<Long, T> dbFallback) {\n    String key = keyPrefix + id;\n    String json = redis.get(key);\n    if (StringUtils.hasText(json)) {\n        return parse(json);\n    }\n\n    // 加锁防击穿\n    RLock lock = redisson.getLock("lock:" + key);\n    lock.lock();\n\n    try {\n        // 二次检查缓存\n        json = redis.get(key);\n        if (StringUtils.hasText(json)) {\n            return parse(json);\n        }\n\n        // 查数据库\n        T data = dbFallback.apply(id);\n        if (data == null) {\n            redis.set(key, "", 2, TimeUnit.MINUTES); // 缓存空值\n        } else {\n            redis.set(key, toJson(data), 10, TimeUnit.MINUTES);\n        }\n        return data;\n    } finally {\n        lock.unlock();\n    }\n}\n')])])]),a("h2",{attrs:{id:"✅-七、建议的技术选型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#✅-七、建议的技术选型"}},[t._v("#")]),t._v(" ✅ 七、建议的技术选型")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("技术组件")]),t._v(" "),a("th",[t._v("推荐工具")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("缓存客户端")]),t._v(" "),a("td",[a("code",[t._v("Spring Data Redis")]),t._v(" + "),a("code",[t._v("Lettuce")])])]),t._v(" "),a("tr",[a("td",[t._v("分布式锁")]),t._v(" "),a("td",[a("code",[t._v("Redisson")])])]),t._v(" "),a("tr",[a("td",[t._v("本地缓存")]),t._v(" "),a("td",[a("code",[t._v("Caffeine")]),t._v("（支持淘汰 + 异步刷新）")])]),t._v(" "),a("tr",[a("td",[t._v("布隆过滤器")]),t._v(" "),a("td",[a("code",[t._v("Guava BloomFilter")]),t._v(" / RedisBitmap 实现")])]),t._v(" "),a("tr",[a("td",[t._v("可视化监控")]),t._v(" "),a("td",[a("code",[t._v("RedisInsight")]),t._v("、"),a("code",[t._v("Prometheus + Grafana")])])])])]),t._v(" "),a("h2",{attrs:{id:"📌-八、附加功能推荐"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#📌-八、附加功能推荐"}},[t._v("#")]),t._v(" 📌 八、附加功能推荐")]),t._v(" "),a("ul",[a("li",[t._v("定时刷新热点缓存（配合异步线程池）")]),t._v(" "),a("li",[t._v("缓存预加载、预热机制")]),t._v(" "),a("li",[t._v("缓存版本号控制（缓存双写一致性）")]),t._v(" "),a("li",[t._v("接口缓存（AOP + 注解）")])]),t._v(" "),a("h2",{attrs:{id:"🧠-一、ioc-控制反转-inversion-of-control"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🧠-一、ioc-控制反转-inversion-of-control"}},[t._v("#")]),t._v(" 🧠 一、IOC（控制反转，Inversion of Control）")]),t._v(" "),a("h3",{attrs:{id:"✅-作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#✅-作用"}},[t._v("#")]),t._v(" ✅ 作用：")]),t._v(" "),a("p",[t._v("把对象的创建和依赖关系交给 Spring 容器统一管理，而不是由我们手动 "),a("code",[t._v("new")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"✅-理解方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#✅-理解方式"}},[t._v("#")]),t._v(" ✅ 理解方式：")]),t._v(" "),a("p",[t._v("原来我们是自己控制对象的创建，现在是"),a("strong",[t._v("反转给容器")]),t._v("来帮我们创建和注入。")]),t._v(" "),a("h3",{attrs:{id:"✅-举例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#✅-举例"}},[t._v("#")]),t._v(" ✅ 举例：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("@Component\npublic class UserService {\n    @Autowired\n    private OrderService orderService;\n}\n")])])]),a("h3",{attrs:{id:"✅-本质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#✅-本质"}},[t._v("#")]),t._v(" ✅ 本质：")]),t._v(" "),a("ul",[a("li",[t._v("IoC 容器会扫描 "),a("code",[t._v("@Component")]),t._v(" 注解的类，将其放入容器")]),t._v(" "),a("li",[t._v("然后通过 "),a("code",[t._v("@Autowired")]),t._v(" 自动注入所需依赖")])]),t._v(" "),a("h2",{attrs:{id:"⚙️-二、aop-面向切面编程-aspect-oriented-programming"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#⚙️-二、aop-面向切面编程-aspect-oriented-programming"}},[t._v("#")]),t._v(" ⚙️ 二、AOP（面向切面编程，Aspect Oriented Programming）")]),t._v(" "),a("h3",{attrs:{id:"✅-作用-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#✅-作用-2"}},[t._v("#")]),t._v(" ✅ 作用：")]),t._v(" "),a("p",[t._v("将"),a("strong",[t._v("与业务无关的通用逻辑")]),t._v("（如日志、事务、权限）从业务代码中抽离出来，形成切面统一管理。")]),t._v(" "),a("h3",{attrs:{id:"✅-应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#✅-应用场景"}},[t._v("#")]),t._v(" ✅ 应用场景：")]),t._v(" "),a("ul",[a("li",[t._v("日志打印")]),t._v(" "),a("li",[t._v("方法调用监控")]),t._v(" "),a("li",[t._v("权限校验")]),t._v(" "),a("li",[t._v("接口防刷")]),t._v(" "),a("li",[t._v("异常统一处理")])]),t._v(" "),a("h3",{attrs:{id:"✅-示例代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#✅-示例代码"}},[t._v("#")]),t._v(" ✅ 示例代码：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('@Aspect\n@Component\npublic class LogAspect {\n\n    @Before("execution(* com.example.service.*.*(..))")\n    public void logBefore(JoinPoint joinPoint) {\n        System.out.println("调用方法：" + joinPoint.getSignature().getName());\n    }\n}\n')])])]),a("h2",{attrs:{id:"🧩-三、事务管理-transaction-management"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🧩-三、事务管理-transaction-management"}},[t._v("#")]),t._v(" 🧩 三、事务管理（Transaction Management）")]),t._v(" "),a("h3",{attrs:{id:"✅-作用-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#✅-作用-3"}},[t._v("#")]),t._v(" ✅ 作用：")]),t._v(" "),a("p",[t._v("保证数据库操作的一致性、隔离性等事务特性。")]),t._v(" "),a("h3",{attrs:{id:"✅-使用方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#✅-使用方式"}},[t._v("#")]),t._v(" ✅ 使用方式：")]),t._v(" "),a("p",[t._v("只需加上一个注解即可实现事务的开启和回滚。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("@Service\npublic class OrderService {\n\n    @Transactional\n    public void createOrder() {\n        // 操作订单表\n        // 操作库存表\n        // 如果出错自动回滚\n    }\n}\n")])])]),a("h3",{attrs:{id:"✅-事务传播机制-核心内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#✅-事务传播机制-核心内容"}},[t._v("#")]),t._v(" ✅ 事务传播机制（核心内容）：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("REQUIRED")]),t._v("：默认，当前有事务就加入，否则新建一个")]),t._v(" "),a("li",[a("code",[t._v("REQUIRES_NEW")]),t._v("：强制新建事务")]),t._v(" "),a("li",[a("code",[t._v("NESTED")]),t._v("：嵌套事务（可以独立回滚）")])]),t._v(" "),a("h2",{attrs:{id:"📦-总结-spring-三大特性作用表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#📦-总结-spring-三大特性作用表"}},[t._v("#")]),t._v(" 📦 总结：Spring 三大特性作用表")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("特性")]),t._v(" "),a("th",[t._v("简称")]),t._v(" "),a("th",[t._v("功能")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("控制反转")]),t._v(" "),a("td",[t._v("IoC")]),t._v(" "),a("td",[t._v("统一管理 Bean 的生命周期和依赖注入")])]),t._v(" "),a("tr",[a("td",[t._v("面向切面编程")]),t._v(" "),a("td",[t._v("AOP")]),t._v(" "),a("td",[t._v("抽离日志、事务、权限等公共逻辑")])]),t._v(" "),a("tr",[a("td",[t._v("声明式事务")]),t._v(" "),a("td",[t._v("Tx")]),t._v(" "),a("td",[t._v("让数据库操作更安全、可控")])])])]),t._v(" "),a("p",[t._v("Spring 中的事务功能（@Transactional）")]),t._v(" "),a("h2",{attrs:{id:"✅-一、事务生效的必要条件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#✅-一、事务生效的必要条件"}},[t._v("#")]),t._v(" ✅ 一、事务生效的必要条件")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("条件")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1. 方法必须被 "),a("strong",[t._v("Spring 容器管理的类调用")])]),t._v(" "),a("td",[t._v("即类上必须被 "),a("code",[t._v("@Service")]),t._v("、"),a("code",[t._v("@Component")]),t._v("、"),a("code",[t._v("@Repository")]),t._v(" 标注")])]),t._v(" "),a("tr",[a("td",[t._v("2. 方法必须通过 "),a("strong",[t._v("代理对象")]),t._v(" 调用")]),t._v(" "),a("td",[t._v("Spring 事务是基于 AOP 实现的，需要经过代理")])]),t._v(" "),a("tr",[a("td",[t._v("3. 方法必须是 "),a("strong",[a("code",[t._v("public")]),t._v(" 访问级别")])]),t._v(" "),a("td",[t._v("因为 Spring 默认使用 JDK 或 CGLIB 动态代理，私有方法无法被代理拦截")])]),t._v(" "),a("tr",[a("td",[t._v("4. 有真正的 "),a("strong",[t._v("数据库操作")]),t._v("，并被连接管理")]),t._v(" "),a("td",[t._v("Spring 的事务本质是对数据库连接的事务控制")])]),t._v(" "),a("tr",[a("td",[t._v("5. 抛出的异常类型需匹配默认策略")]),t._v(" "),a("td",[t._v("默认只回滚 "),a("strong",[t._v("运行时异常（RuntimeException）及其子类")])])])])]),t._v(" "),a("h2",{attrs:{id:"❌-二、事务失效的常见情况-重点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#❌-二、事务失效的常见情况-重点"}},[t._v("#")]),t._v(" ❌ 二、事务失效的常见情况（重点！）")]),t._v(" "),a("h3",{attrs:{id:"🧨-场景-1-方法内部自调用-事务不生效"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🧨-场景-1-方法内部自调用-事务不生效"}},[t._v("#")]),t._v(" 🧨 场景 1："),a("strong",[t._v("方法内部自调用")]),t._v("，事务不生效")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("@Transactional\npublic void methodA() {\n    methodB(); // ⚠️ 同类内部调用，不会经过代理，事务失效\n}\n\n@Transactional\npublic void methodB() {\n    // 数据库操作\n}\n")])])]),a("p",[t._v("✅ 解决方式：使用代理对象调用，如通过 AopContext.currentProxy() 或将方法拆到新类中。")]),t._v(" "),a("h3",{attrs:{id:"🧨-场景-2-方法不是-public-事务不生效"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🧨-场景-2-方法不是-public-事务不生效"}},[t._v("#")]),t._v(" 🧨 场景 2："),a("strong",[t._v("方法不是 "),a("code",[t._v("public")])]),t._v("，事务不生效")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("@Transactional\nvoid createOrder() {\n    // ⚠️ 非 public 方法，不会被代理，事务失效\n}\n")])])]),a("p",[t._v("✅ 正确写法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("@Transactional\npublic void createOrder() {\n    // 生效 ✅\n}\n")])])]),a("h3",{attrs:{id:"🧨-场景-3-异常被-catch-了-事务不会回滚"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🧨-场景-3-异常被-catch-了-事务不会回滚"}},[t._v("#")]),t._v(" 🧨 场景 3："),a("strong",[t._v("异常被 catch 了，事务不会回滚")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('@Transactional\npublic void process() {\n    try {\n        // 这里会报错\n        int a = 1 / 0;\n    } catch (Exception e) {\n        log.error("异常", e);\n        // ⚠️ 捕获了异常，事务不会自动回滚\n    }\n}\n')])])]),a("p",[t._v("✅ 正确处理方式：")]),t._v(" "),a("ul",[a("li",[t._v("抛出异常让事务感知")]),t._v(" "),a("li",[t._v("或手动触发回滚：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("catch (Exception e) {\n    TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();\n}\n")])])]),a("h3",{attrs:{id:"🧨-场景-4-抛出的是检查异常-事务不会回滚"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🧨-场景-4-抛出的是检查异常-事务不会回滚"}},[t._v("#")]),t._v(" 🧨 场景 4："),a("strong",[t._v("抛出的是检查异常，事务不会回滚")])]),t._v(" "),a("p",[t._v("默认 Spring 只对 "),a("strong",[t._v("RuntimeException 及其子类")]),t._v(" 自动回滚。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('@Transactional\npublic void save() throws Exception { // 抛出的是 checked exception\n    throw new Exception("checked 异常"); // ⚠️ 默认不会回滚\n}\n')])])]),a("p",[t._v("✅ 正确做法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('@Transactional(rollbackFor = Exception.class) // 手动指定回滚策略\npublic void save() throws Exception {\n    throw new Exception("checked 异常");\n}\n')])])]),a("h3",{attrs:{id:"🧨-场景-5-数据库未开启事务支持-或-非数据库操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🧨-场景-5-数据库未开启事务支持-或-非数据库操作"}},[t._v("#")]),t._v(" 🧨 场景 5："),a("strong",[t._v("数据库未开启事务支持")]),t._v(" 或 非数据库操作")]),t._v(" "),a("p",[t._v("例如：")]),t._v(" "),a("ul",[a("li",[t._v("操作 Redis、MQ，不受事务控制")]),t._v(" "),a("li",[t._v("使用了数据库但某些 ORM 配置没有启用事务（如 MyBatis 没有开启事务管理器）")])]),t._v(" "),a("p",[t._v("✅ 正确做法：检查是否使用了 "),a("code",[t._v("DataSourceTransactionManager")]),t._v("，以及操作是否真正落到了数据库连接上。")]),t._v(" "),a("h2",{attrs:{id:"🧠-三、事务失效的图解总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🧠-三、事务失效的图解总结"}},[t._v("#")]),t._v(" 🧠 三、事务失效的图解总结")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("失效原因")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("自调用")]),t._v(" "),a("td",[t._v("未经过代理，不会触发事务切面")])]),t._v(" "),a("tr",[a("td",[t._v("非 "),a("code",[t._v("public")]),t._v(" 方法")]),t._v(" "),a("td",[t._v("Spring AOP 无法代理")])]),t._v(" "),a("tr",[a("td",[t._v("异常被 "),a("code",[t._v("catch")])]),t._v(" "),a("td",[t._v("事务未感知到异常")])]),t._v(" "),a("tr",[a("td",[t._v("抛出 "),a("code",[t._v("checked exception")])]),t._v(" "),a("td",[t._v("默认不会回滚")])]),t._v(" "),a("tr",[a("td",[t._v("不操作数据库")]),t._v(" "),a("td",[t._v("没有真正事务")])]),t._v(" "),a("tr",[a("td",[t._v("Redis、MQ 操作")]),t._v(" "),a("td",[t._v("不受数据库事务控制")])])])]),t._v(" "),a("h2",{attrs:{id:"🎯-四、如何确保事务生效"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-四、如何确保事务生效"}},[t._v("#")]),t._v(" 🎯 四、如何确保事务生效？")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("@Transactional")]),t._v(" 一般加在 "),a("strong",[a("code",[t._v("public")]),t._v(" 的业务方法上")])])]),t._v(" "),a("li",[a("p",[t._v("保证方法是通过 "),a("strong",[t._v("代理对象")]),t._v(" 调用的（不是 this.xx()）")])]),t._v(" "),a("li",[a("p",[t._v("明确异常抛出并让 Spring 能感知（或者加 "),a("code",[t._v("rollbackFor")]),t._v("）")])]),t._v(" "),a("li",[a("p",[t._v("日志调试建议打开：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("logging:\n  level:\n    org.springframework.transaction: DEBUG\n")])])])])])])}),[],!1,null,null,null);a.default=s.exports}}]);