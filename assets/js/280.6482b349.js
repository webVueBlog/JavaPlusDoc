(window.webpackJsonp=window.webpackJsonp||[]).push([[280],{1097:function(t,s,a){"use strict";a.r(s);var n=a(1),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"数据结构与算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据结构与算法"}},[t._v("#")]),t._v(" 数据结构与算法")]),t._v(" "),s("h2",{attrs:{id:"📋-学习目标"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#📋-学习目标"}},[t._v("#")]),t._v(" 📋 学习目标")]),t._v(" "),s("ul",[s("li",[t._v("掌握基本数据结构的实现原理")]),t._v(" "),s("li",[t._v("理解算法的时间和空间复杂度")]),t._v(" "),s("li",[t._v("能够选择合适的数据结构解决问题")]),t._v(" "),s("li",[t._v("熟练实现常用算法")])]),t._v(" "),s("h2",{attrs:{id:"🏗️-数据结构分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#🏗️-数据结构分类"}},[t._v("#")]),t._v(" 🏗️ 数据结构分类")]),t._v(" "),s("h3",{attrs:{id:"线性结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线性结构"}},[t._v("#")]),t._v(" 线性结构")]),t._v(" "),s("h4",{attrs:{id:"数组-array"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组-array"}},[t._v("#")]),t._v(" 数组 (Array)")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("特点")]),t._v("：连续内存，随机访问O(1)")]),t._v(" "),s("li",[s("strong",[t._v("应用")]),t._v("：排序、查找、动态规划")]),t._v(" "),s("li",[s("strong",[t._v("经典题目")]),t._v("：\n"),s("ul",[s("li",[t._v("两数之和")]),t._v(" "),s("li",[t._v("最大子数组和")]),t._v(" "),s("li",[t._v("旋转数组")])])])]),t._v(" "),s("h4",{attrs:{id:"链表-linked-list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链表-linked-list"}},[t._v("#")]),t._v(" 链表 (Linked List)")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("特点")]),t._v("：动态内存，插入删除O(1)")]),t._v(" "),s("li",[s("strong",[t._v("应用")]),t._v("：LRU缓存、图的邻接表")]),t._v(" "),s("li",[s("strong",[t._v("经典题目")]),t._v("：\n"),s("ul",[s("li",[t._v("反转链表")]),t._v(" "),s("li",[t._v("合并两个有序链表")]),t._v(" "),s("li",[t._v("环形链表检测")])])])]),t._v(" "),s("h4",{attrs:{id:"栈-stack"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈-stack"}},[t._v("#")]),t._v(" 栈 (Stack)")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("特点")]),t._v("：后进先出(LIFO)")]),t._v(" "),s("li",[s("strong",[t._v("应用")]),t._v("：表达式求值、函数调用")]),t._v(" "),s("li",[s("strong",[t._v("经典题目")]),t._v("：\n"),s("ul",[s("li",[t._v("有效的括号")]),t._v(" "),s("li",[t._v("最小栈")]),t._v(" "),s("li",[t._v("逆波兰表达式")])])])]),t._v(" "),s("h4",{attrs:{id:"队列-queue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#队列-queue"}},[t._v("#")]),t._v(" 队列 (Queue)")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("特点")]),t._v("：先进先出(FIFO)")]),t._v(" "),s("li",[s("strong",[t._v("应用")]),t._v("：BFS、任务调度")]),t._v(" "),s("li",[s("strong",[t._v("经典题目")]),t._v("：\n"),s("ul",[s("li",[t._v("用栈实现队列")]),t._v(" "),s("li",[t._v("滑动窗口最大值")]),t._v(" "),s("li",[t._v("二叉树层序遍历")])])])]),t._v(" "),s("h3",{attrs:{id:"树形结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#树形结构"}},[t._v("#")]),t._v(" 树形结构")]),t._v(" "),s("h4",{attrs:{id:"二叉树-binary-tree"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二叉树-binary-tree"}},[t._v("#")]),t._v(" 二叉树 (Binary Tree)")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("遍历方式")]),t._v("：前序、中序、后序、层序")]),t._v(" "),s("li",[s("strong",[t._v("应用")]),t._v("：表达式树、决策树")]),t._v(" "),s("li",[s("strong",[t._v("经典题目")]),t._v("：\n"),s("ul",[s("li",[t._v("二叉树的最大深度")]),t._v(" "),s("li",[t._v("对称二叉树")]),t._v(" "),s("li",[t._v("路径总和")])])])]),t._v(" "),s("h4",{attrs:{id:"二叉搜索树-bst"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二叉搜索树-bst"}},[t._v("#")]),t._v(" 二叉搜索树 (BST)")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("特点")]),t._v("：左子树 < 根 < 右子树")]),t._v(" "),s("li",[s("strong",[t._v("应用")]),t._v("：快速查找、范围查询")]),t._v(" "),s("li",[s("strong",[t._v("经典题目")]),t._v("：\n"),s("ul",[s("li",[t._v("验证二叉搜索树")]),t._v(" "),s("li",[t._v("二叉搜索树的最近公共祖先")]),t._v(" "),s("li",[t._v("将有序数组转换为BST")])])])]),t._v(" "),s("h4",{attrs:{id:"堆-heap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆-heap"}},[t._v("#")]),t._v(" 堆 (Heap)")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("特点")]),t._v("：完全二叉树，父节点大于/小于子节点")]),t._v(" "),s("li",[s("strong",[t._v("应用")]),t._v("：优先队列、堆排序")]),t._v(" "),s("li",[s("strong",[t._v("经典题目")]),t._v("：\n"),s("ul",[s("li",[t._v("数组中的第K个最大元素")]),t._v(" "),s("li",[t._v("合并K个排序链表")]),t._v(" "),s("li",[t._v("前K个高频元素")])])])]),t._v(" "),s("h3",{attrs:{id:"图结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#图结构"}},[t._v("#")]),t._v(" 图结构")]),t._v(" "),s("h4",{attrs:{id:"图的表示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#图的表示"}},[t._v("#")]),t._v(" 图的表示")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("邻接矩阵")]),t._v("：适合稠密图")]),t._v(" "),s("li",[s("strong",[t._v("邻接表")]),t._v("：适合稀疏图")])]),t._v(" "),s("h4",{attrs:{id:"图的遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#图的遍历"}},[t._v("#")]),t._v(" 图的遍历")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("深度优先搜索(DFS)")]),t._v("：递归或栈实现")]),t._v(" "),s("li",[s("strong",[t._v("广度优先搜索(BFS)")]),t._v("：队列实现")])]),t._v(" "),s("h4",{attrs:{id:"经典算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#经典算法"}},[t._v("#")]),t._v(" 经典算法")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("最短路径")]),t._v("：Dijkstra、Floyd-Warshall")]),t._v(" "),s("li",[s("strong",[t._v("最小生成树")]),t._v("：Kruskal、Prim")]),t._v(" "),s("li",[s("strong",[t._v("拓扑排序")]),t._v("：Kahn算法、DFS")])]),t._v(" "),s("h2",{attrs:{id:"🎯-经典题目详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#🎯-经典题目详解"}},[t._v("#")]),t._v(" 🎯 经典题目详解")]),t._v(" "),s("h3",{attrs:{id:"_1-两数之和-🟢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-两数之和-🟢"}},[t._v("#")]),t._v(" 1. 两数之和 🟢")]),t._v(" "),s("p",[s("strong",[t._v("题目")]),t._v("：给定一个整数数组和目标值，找出数组中和为目标值的两个数的索引。")]),t._v(" "),s("p",[s("strong",[t._v("解法")]),t._v("：哈希表")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("twoSum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" map "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashMap")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" complement "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" target "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("containsKey")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("complement"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("complement"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("时间复杂度")]),t._v("：O(n)\n"),s("strong",[t._v("空间复杂度")]),t._v("：O(n)")]),t._v(" "),s("h3",{attrs:{id:"_2-反转链表-🟡"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-反转链表-🟡"}},[t._v("#")]),t._v(" 2. 反转链表 🟡")]),t._v(" "),s("p",[s("strong",[t._v("题目")]),t._v("：反转一个单链表。")]),t._v(" "),s("p",[s("strong",[t._v("解法")]),t._v("：迭代")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("reverseList")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" prev "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" curr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("curr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" curr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        curr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prev"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        prev "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" curr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        curr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" prev"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("时间复杂度")]),t._v("：O(n)\n"),s("strong",[t._v("空间复杂度")]),t._v("：O(1)")]),t._v(" "),s("h3",{attrs:{id:"_3-二叉树的最大深度-🟢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-二叉树的最大深度-🟢"}},[t._v("#")]),t._v(" 3. 二叉树的最大深度 🟢")]),t._v(" "),s("p",[s("strong",[t._v("题目")]),t._v("：给定一个二叉树，找出其最大深度。")]),t._v(" "),s("p",[s("strong",[t._v("解法")]),t._v("：递归")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("maxDepth")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeNode")]),t._v(" root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" leftDepth "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("maxDepth")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" rightDepth "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("maxDepth")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Math")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("leftDepth"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rightDepth"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("时间复杂度")]),t._v("：O(n)\n"),s("strong",[t._v("空间复杂度")]),t._v("：O(h)，h为树的高度")]),t._v(" "),s("h2",{attrs:{id:"💡-解题技巧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#💡-解题技巧"}},[t._v("#")]),t._v(" 💡 解题技巧")]),t._v(" "),s("h3",{attrs:{id:"数组相关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组相关"}},[t._v("#")]),t._v(" 数组相关")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("双指针技巧")]),t._v("：左右指针、快慢指针")]),t._v(" "),s("li",[s("strong",[t._v("滑动窗口")]),t._v("：固定/可变窗口大小")]),t._v(" "),s("li",[s("strong",[t._v("前缀和")]),t._v("：快速计算区间和")])]),t._v(" "),s("h3",{attrs:{id:"链表相关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链表相关"}},[t._v("#")]),t._v(" 链表相关")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("虚拟头节点")]),t._v("：简化边界处理")]),t._v(" "),s("li",[s("strong",[t._v("快慢指针")]),t._v("：检测环、找中点")]),t._v(" "),s("li",[s("strong",[t._v("递归思维")]),t._v("：分解子问题")])]),t._v(" "),s("h3",{attrs:{id:"树相关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#树相关"}},[t._v("#")]),t._v(" 树相关")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("递归模板")]),t._v("：明确递归函数定义")]),t._v(" "),s("li",[s("strong",[t._v("层序遍历")]),t._v("：使用队列BFS")]),t._v(" "),s("li",[s("strong",[t._v("路径问题")]),t._v("：回溯算法")])]),t._v(" "),s("h3",{attrs:{id:"图相关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#图相关"}},[t._v("#")]),t._v(" 图相关")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("DFS模板")]),t._v("：递归或栈实现")]),t._v(" "),s("li",[s("strong",[t._v("BFS模板")]),t._v("：队列实现")]),t._v(" "),s("li",[s("strong",[t._v("状态压缩")]),t._v("：位运算优化")])]),t._v(" "),s("h2",{attrs:{id:"📚-推荐资源"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#📚-推荐资源"}},[t._v("#")]),t._v(" 📚 推荐资源")]),t._v(" "),s("h3",{attrs:{id:"书籍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#书籍"}},[t._v("#")]),t._v(" 书籍")]),t._v(" "),s("ul",[s("li",[t._v("《算法导论》- 理论基础")]),t._v(" "),s("li",[t._v("《数据结构与算法分析》- 实现细节")]),t._v(" "),s("li",[t._v("《剑指Offer》- 面试必备")])]),t._v(" "),s("h3",{attrs:{id:"在线平台"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在线平台"}},[t._v("#")]),t._v(" 在线平台")]),t._v(" "),s("ul",[s("li",[t._v("LeetCode - 题目丰富")]),t._v(" "),s("li",[t._v("牛客网 - 笔试练习")]),t._v(" "),s("li",[t._v("HackerRank - 国际平台")])]),t._v(" "),s("h3",{attrs:{id:"可视化工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可视化工具"}},[t._v("#")]),t._v(" 可视化工具")]),t._v(" "),s("ul",[s("li",[t._v("VisuAlgo - 算法可视化")]),t._v(" "),s("li",[t._v("Data Structure Visualizations - 数据结构动画")])]),t._v(" "),s("p",[t._v("继续深入学习，掌握数据结构的精髓！🚀")])])}),[],!1,null,null,null);s.default=r.exports}}]);