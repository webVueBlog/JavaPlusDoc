(window.webpackJsonp=window.webpackJsonp||[]).push([[118],{1385:function(t,a,s){"use strict";s.r(a);var n=s(1),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("blockquote",[a("p",[t._v("点击勘误"),a("a",{attrs:{href:"https://github.com/webVueBlog/JavaPlusDoc/issues",target:"_blank",rel:"noopener noreferrer"}},[t._v("issues"),a("OutboundLink")],1),t._v("，哪吒感谢大家的阅读")])]),t._v(" "),a("img",{attrs:{align:"right",width:"100",src:"https://cdn.jsdelivr.net/gh/YunYouJun/yun/images/yun-alpha-compressed.png"}}),t._v(" "),a("h2",{attrs:{id:"java多线程入门"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java多线程入门"}},[t._v("#")]),t._v(" Java多线程入门")]),t._v(" "),a("ul",[a("li",[t._v("进程，是对运行时程序的封装，是系统进行资源调度和分配的基本单位，实现了操作系统的并发。")]),t._v(" "),a("li",[t._v("线程，是进程的子任务，是 CPU 调度和分派的基本单位，实现了进程内部的并发。")])]),t._v(" "),a("h2",{attrs:{id:"进程和线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程和线程"}},[t._v("#")]),t._v(" 进程和线程")]),t._v(" "),a("p",[t._v("❤1、线程在进程下进行")]),t._v(" "),a("p",[t._v("（单独的英雄角色、野怪、小兵肯定不能运行）")]),t._v(" "),a("p",[t._v("❤2、进程之间不会相互影响，主线程结束将会导致整个进程结束")]),t._v(" "),a("p",[t._v("（两把游戏之间不会有联系和影响。你的水晶被推掉，你这把游戏就结束了）")]),t._v(" "),a("p",[t._v("❤3、不同的进程数据很难共享")]),t._v(" "),a("p",[t._v("（两把游戏之间很难有联系，有联系的情况比如上把的敌人这把又匹配到了）")]),t._v(" "),a("p",[t._v("❤4、同进程下的不同线程之间数据很容易共享")]),t._v(" "),a("p",[t._v("（你开的那一把游戏，你可以看到每个玩家的状态——生死，也可以看到每个玩家的出装等等）")]),t._v(" "),a("p",[t._v("❤5、进程使用内存地址可以限定使用量")]),t._v(" "),a("p",[t._v("（开的房间模式，决定了你可以设置有多少人进，当房间满了后，其他人就进不去了，除非有人退出房间，其他人才能进）")]),t._v(" "),a("h2",{attrs:{id:"创建线程的三种方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建线程的三种方式"}},[t._v("#")]),t._v(" 创建线程的三种方式")]),t._v(" "),a("p",[t._v("继承 Thread 类")]),t._v(" "),a("p",[t._v("♠①：创建一个类继承 Thread 类，并重写 run 方法。")]),t._v(" "),a("p",[t._v("实现 Runnable 接口")]),t._v(" "),a("p",[t._v("♠②：创建一个类实现 Runnable 接口，并重写 run 方法。")]),t._v(" "),a("p",[t._v("实现 Callable 接口")]),t._v(" "),a("p",[t._v("♠③：实现 Callable 接口，重写 call 方法，这种方式可以通过 FutureTask 获取任务执行的返回值。")]),t._v(" "),a("h2",{attrs:{id:"关于线程的一些疑问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于线程的一些疑问"}},[t._v("#")]),t._v(" 关于线程的一些疑问")]),t._v(" "),a("p",[t._v("❤1、为什么要重写 run 方法？")]),t._v(" "),a("p",[t._v("这是因为默认的run()方法不会做任何事情。")]),t._v(" "),a("p",[t._v("为了让线程执行一些实际的任务，我们需要提供自己的run()方法实现，这就需要重写run()方法。")]),t._v(" "),a("h2",{attrs:{id:"❤2、run-方法和-start-方法有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#❤2、run-方法和-start-方法有什么区别"}},[t._v("#")]),t._v(" ❤2、run 方法和 start 方法有什么区别？")]),t._v(" "),a("ul",[a("li",[t._v("run()：封装线程执行的代码，直接调用相当于调用普通方法。")]),t._v(" "),a("li",[t._v("start()：启动线程，然后由 JVM 调用此线程的 run() 方法。")])]),t._v(" "),a("h2",{attrs:{id:"❤3、通过继承-thread-的方法和实现-runnable-接口的方式创建多线程-哪个好"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#❤3、通过继承-thread-的方法和实现-runnable-接口的方式创建多线程-哪个好"}},[t._v("#")]),t._v(" ❤3、通过继承 Thread 的方法和实现 Runnable 接口的方式创建多线程，哪个好？")]),t._v(" "),a("p",[t._v("实现 Runable 接口好，原因有两个：")]),t._v(" "),a("ul",[a("li",[t._v("♠①、避免了 Java 单继承的局限性，Java 不支持多重继承，因此如果我们的类已经继承了另一个类，就不能再继承 Thread 类了。")]),t._v(" "),a("li",[t._v("♠②、适合多个相同的程序代码去处理同一资源的情况，把线程、代码和数据有效的分离，更符合面向对象的设计思想。Callable 接口与 Runnable 非常相似，但可以返回一个结果。")])]),t._v(" "),a("h2",{attrs:{id:"控制线程的其他方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#控制线程的其他方法"}},[t._v("#")]),t._v(" 控制线程的其他方法")]),t._v(" "),a("p",[t._v("1）sleep()")]),t._v(" "),a("p",[t._v("使当前正在执行的线程暂停指定的毫秒数，也就是进入休眠的状态。")]),t._v(" "),a("p",[t._v("需要注意的是，sleep 的时候要对异常进行处理。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("try {//sleep会发生异常要显示处理\n    Thread.sleep(20);//暂停20毫秒\n} catch (InterruptedException e) {\n    e.printStackTrace();\n}\n")])])]),a("p",[t._v("2）join()")]),t._v(" "),a("p",[t._v("等待这个线程执行完才会轮到后续线程得到 cpu 的执行权，使用这个也要捕获异常。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('//创建MyRunnable类\nMyRunnable mr = new MyRunnable();\n//创建Thread类的有参构造,并设置线程名\nThread t1 = new Thread(mr, "张飞");\nThread t2 = new Thread(mr, "貂蝉");\nThread t3 = new Thread(mr, "吕布");\n//启动线程\nt1.start();\ntry {\n    t1.join(); //等待t1执行完才会轮到t2，t3抢\n} catch (InterruptedException e) {\n    e.printStackTrace();\n}\nt2.start();\nt3.start();\n')])])]),a("p",[t._v("3）setDaemon()")]),t._v(" "),a("p",[t._v("将此线程标记为守护线程，准确来说，就是服务其他的线程，像 Java 中的垃圾回收线程，就是典型的守护线程。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('//创建MyRunnable类\nMyRunnable mr = new MyRunnable();\n//创建Thread类的有参构造,并设置线程名\nThread t1 = new Thread(mr, "张飞");\nThread t2 = new Thread(mr, "貂蝉");\nThread t3 = new Thread(mr, "吕布");\n\nt1.setDaemon(true);\nt2.setDaemon(true);\n\n//启动线程\nt1.start();\nt2.start();\nt3.start();\n')])])]),a("p",[t._v("如果其他线程都执行完毕，main 方法（主线程）也执行完毕，JVM 就会退出，也就是停止运行。如果 JVM 都停止运行了，守护线程自然也就停止了。")]),t._v(" "),a("p",[t._v("4）yield()")]),t._v(" "),a("p",[t._v("yield() 方法是一个静态方法，用于暗示当前线程愿意放弃其当前的时间片，允许其他线程执行。然而，它只是向线程调度器提出建议，调度器可能会忽略这个建议。具体行为取决于操作系统和 JVM 的线程调度策略。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("YieldExample")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" thread1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("YieldExample")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printNumbers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"刘备"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" thread2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("YieldExample")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printNumbers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"关羽"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        thread1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        thread2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printNumbers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('": "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当 i 是偶数时，当前线程暂停执行")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" 让出控制权..."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),a("p",[a("img",{attrs:{src:s(478),alt:"img.png"}})])])}),[],!1,null,null,null);a.default=e.exports},478:function(t,a,s){t.exports=s.p+"assets/img/img.b86b2a54.png"}}]);