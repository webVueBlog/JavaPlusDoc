(window.webpackJsonp=window.webpackJsonp||[]).push([[138],{927:function(t,n,s){"use strict";s.r(n);var e=s(1),a=Object(e.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"第21天-web开发"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第21天-web开发"}},[t._v("#")]),t._v(" 第21天-Web开发")]),t._v(" "),n("h2",{attrs:{id:"概述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),n("p",[t._v("Web开发是Python最重要的应用领域之一。Python拥有丰富的Web开发框架，从轻量级的Flask到功能完整的Django，为不同规模的Web应用提供了优秀的解决方案。今天我们将学习Python Web开发的基础知识和实践技能。")]),t._v(" "),n("h2",{attrs:{id:"_1-web开发基础"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-web开发基础"}},[t._v("#")]),t._v(" 1. Web开发基础")]),t._v(" "),n("h3",{attrs:{id:"_1-1-web开发概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-web开发概念"}},[t._v("#")]),t._v(" 1.1 Web开发概念")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("web_development_concepts")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""Web开发基础概念演示"""')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"=== Web开发基础概念 ==="')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1. HTTP协议基础")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n1. HTTP协议基础:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    http_concepts "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HTTP方法"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"GET"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"获取资源，幂等操作"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"POST"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"创建资源，非幂等操作"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"PUT"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"更新资源，幂等操作"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"DELETE"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"删除资源，幂等操作"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"PATCH"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"部分更新资源"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HEAD"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"获取资源头信息"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"OPTIONS"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"获取服务器支持的方法"')]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"状态码"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2xx"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"成功 (200 OK, 201 Created, 204 No Content)"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3xx"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"重定向 (301 Moved, 302 Found, 304 Not Modified)"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"4xx"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"客户端错误 (400 Bad Request, 401 Unauthorized, 404 Not Found)"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5xx"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"服务器错误 (500 Internal Error, 502 Bad Gateway, 503 Service Unavailable)"')]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"请求头"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Content-Type"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"请求体的媒体类型"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Authorization"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"身份验证信息"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"User-Agent"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"客户端信息"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Accept"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"客户端可接受的媒体类型"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Cookie"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"客户端存储的会话信息"')]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"响应头"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Content-Type"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"响应体的媒体类型"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Set-Cookie"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"设置客户端Cookie"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Location"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"重定向地址"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Cache-Control"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"缓存控制"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Access-Control-Allow-Origin"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"CORS跨域控制"')]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" category"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" items "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" http_concepts"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("items"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string-interpolation"}},[n("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"\\n   ')]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("category"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v(':"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" items"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("items"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string-interpolation"}},[n("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"     ')]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v(": ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2. Web架构模式")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n2. Web架构模式:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    architecture_patterns "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MVC (Model-View-Controller)"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Model"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"数据模型，处理业务逻辑和数据访问"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"View"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"视图层，负责用户界面展示"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Controller"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"控制器，处理用户输入和协调Model、View"')]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MTV (Model-Template-View)"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Model"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"数据模型，与MVC中的Model相同"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Template"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"模板，负责页面渲染"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"View"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"视图函数，处理请求逻辑"')]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"RESTful API"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"资源导向"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"将数据和功能视为资源"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"统一接口"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"使用标准HTTP方法操作资源"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"无状态"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"每个请求包含完整信息"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"可缓存"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"响应可以被缓存"')]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" pattern"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" details "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" architecture_patterns"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("items"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string-interpolation"}},[n("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"\\n   ')]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("pattern"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v(':"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" component"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" description "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" details"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("items"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string-interpolation"}},[n("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"     ')]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("component"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v(": ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("description"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3. 前后端交互")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n3. 前后端交互方式:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    interaction_methods "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"传统表单提交: 页面刷新，服务器渲染"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"AJAX请求: 异步数据交换，局部更新"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"WebSocket: 双向实时通信"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Server-Sent Events: 服务器主动推送"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"GraphQL: 灵活的数据查询语言"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"gRPC: 高性能RPC框架"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" method "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("enumerate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("interaction_methods"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string-interpolation"}},[n("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"   ')]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v(". ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("method"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n   ✓ Web开发基础概念介绍完成"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 运行Web开发概念演示")]),t._v("\nweb_development_concepts"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("h3",{attrs:{id:"_1-2-python-web框架概览"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-python-web框架概览"}},[t._v("#")]),t._v(" 1.2 Python Web框架概览")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("python_web_frameworks_overview")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""Python Web框架概览"""')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"=== Python Web框架概览 ==="')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    frameworks "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"微框架"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Flask"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"特点"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"轻量级、灵活、易学习"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"适用场景"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"小型应用、API服务、原型开发"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"核心组件"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"路由、模板、请求处理"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"扩展性"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"丰富的第三方扩展"')]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"FastAPI"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"特点"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"现代、高性能、自动文档"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"适用场景"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"API开发、微服务"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"核心组件"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"类型提示、异步支持、自动验证"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"扩展性"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"基于Starlette和Pydantic"')]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"全栈框架"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Django"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"特点"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"功能完整、开箱即用、安全性高"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"适用场景"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"大型应用、内容管理、企业级开发"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"核心组件"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ORM、管理后台、认证系统、模板引擎"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"扩展性"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"丰富的内置功能和第三方包"')]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Pyramid"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"特点"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"灵活配置、可扩展、企业级"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"适用场景"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"复杂应用、企业开发"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"核心组件"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"路由、视图、模板、安全"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"扩展性"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"高度可配置和可扩展"')]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"异步框架"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Tornado"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"特点"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"异步非阻塞、高并发"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"适用场景"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"实时应用、长连接服务"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"核心组件"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"异步处理、WebSocket支持"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"扩展性"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"内置异步库"')]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Sanic"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"特点"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"类Flask语法、异步支持"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"适用场景"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"高性能API、异步应用"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"核心组件"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"异步路由、中间件"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"扩展性"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"基于asyncio"')]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" category"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" framework_list "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" frameworks"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("items"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string-interpolation"}},[n("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"\\n')]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("category"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v(':"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" details "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" framework_list"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("items"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string-interpolation"}},[n("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"\\n   ')]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v(':"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" details"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("items"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string-interpolation"}},[n("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"     ')]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v(": ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 框架选择建议")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n框架选择建议:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    selection_guide "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"初学者"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"推荐Flask - 简单易学，概念清晰"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"快速原型"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"推荐Flask或FastAPI - 开发效率高"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"企业应用"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"推荐Django - 功能完整，安全性好"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"API服务"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"推荐FastAPI或Flask-RESTful"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"高并发"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"推荐FastAPI、Sanic或Tornado"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"内容管理"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"推荐Django - 内置管理后台"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"微服务"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"推荐FastAPI或Flask"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" scenario"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" recommendation "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" selection_guide"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("items"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string-interpolation"}},[n("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"   ')]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("scenario"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v(": ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("recommendation"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n   ✓ Python Web框架概览完成"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 运行框架概览")]),t._v("\npython_web_frameworks_overview"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("h2",{attrs:{id:"_2-flask基础"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-flask基础"}},[t._v("#")]),t._v(" 2. Flask基础")]),t._v(" "),n("h3",{attrs:{id:"_2-1-flask入门"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-flask入门"}},[t._v("#")]),t._v(" 2.1 Flask入门")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("flask_basics_demo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""Flask基础演示"""')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"=== Flask基础演示 ==="')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 注意：这里只是演示代码结构，实际运行需要安装Flask")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n1. Flask基础应用结构:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    basic_app_code "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v("'''\n# app.py - 基础Flask应用\nfrom flask import Flask, request, jsonify, render_template\n\n# 创建Flask应用实例\napp = Flask(__name__)\napp.config['SECRET_KEY'] = 'your-secret-key-here'\n\n# 基础路由\n@app.route('/')\ndef index():\n    return '<h1>欢迎使用Flask!</h1>'\n\n# 带参数的路由\n@app.route('/user/<username>')\ndef user_profile(username):\n    return f'<h1>用户: {username}</h1>'\n\n# 多种HTTP方法\n@app.route('/api/data', methods=['GET', 'POST'])\ndef api_data():\n    if request.method == 'GET':\n        return jsonify({'message': '获取数据成功'})\n    elif request.method == 'POST':\n        data = request.get_json()\n        return jsonify({'message': '数据已保存', 'data': data})\n\n# 启动应用\nif __name__ == '__main__':\n    app.run(debug=True, host='0.0.0.0', port=5000)\n'''")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"   基础应用代码:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("basic_app_code"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2. Flask配置")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n2. Flask配置管理:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    config_code "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v("'''\n# config.py - 配置文件\nclass Config:\n    SECRET_KEY = 'your-secret-key'\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n\nclass DevelopmentConfig(Config):\n    DEBUG = True\n    SQLALCHEMY_DATABASE_URI = 'sqlite:///dev.db'\n\nclass ProductionConfig(Config):\n    DEBUG = False\n    SQLALCHEMY_DATABASE_URI = 'postgresql://user:pass@localhost/prod'\n\nconfig = {\n    'development': DevelopmentConfig,\n    'production': ProductionConfig,\n    'default': DevelopmentConfig\n}\n\n# 在app.py中使用配置\nfrom config import config\n\napp = Flask(__name__)\napp.config.from_object(config['development'])\n'''")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"   配置管理代码:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("config_code"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3. 请求处理")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n3. 请求处理示例:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    request_handling_code "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v("'''\n# 请求处理示例\nfrom flask import Flask, request, jsonify, session\n\n@app.route('/form', methods=['GET', 'POST'])\ndef handle_form():\n    if request.method == 'GET':\n        # 显示表单\n        return render_template('form.html')\n    \n    elif request.method == 'POST':\n        # 处理表单数据\n        username = request.form.get('username')\n        email = request.form.get('email')\n        \n        # 验证数据\n        if not username or not email:\n            return jsonify({'error': '用户名和邮箱不能为空'}), 400\n        \n        # 保存到会话\n        session['username'] = username\n        session['email'] = email\n        \n        return jsonify({'message': '数据保存成功'})\n\n@app.route('/api/upload', methods=['POST'])\ndef upload_file():\n    if 'file' not in request.files:\n        return jsonify({'error': '没有文件'}), 400\n    \n    file = request.files['file']\n    if file.filename == '':\n        return jsonify({'error': '文件名为空'}), 400\n    \n    if file:\n        filename = secure_filename(file.filename)\n        file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))\n        return jsonify({'message': '文件上传成功', 'filename': filename})\n'''")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"   请求处理代码:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request_handling_code"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 4. 模板渲染")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n4. 模板渲染:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    template_code "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('\'\'\'\n\x3c!-- templates/base.html --\x3e\n<!DOCTYPE html>\n<html>\n<head>\n    <title>{% block title %}Flask应用{% endblock %}</title>\n    <link rel="stylesheet" href="{{ url_for(\'static\', filename=\'css/style.css\') }}">\n</head>\n<body>\n    <nav>\n        <a href="{{ url_for(\'index\') }}">首页</a>\n        <a href="{{ url_for(\'about\') }}">关于</a>\n    </nav>\n    \n    <main>\n        {% block content %}{% endblock %}\n    </main>\n    \n    <script src="{{ url_for(\'static\', filename=\'js/app.js\') }}"><\/script>\n</body>\n</html>\n\n\x3c!-- templates/index.html --\x3e\n{% extends "base.html" %}\n\n{% block title %}首页 - Flask应用{% endblock %}\n\n{% block content %}\n<h1>欢迎来到Flask应用</h1>\n<p>当前用户: {{ session.get(\'username\', \'未登录\') }}</p>\n\n{% if messages %}\n    {% for message in messages %}\n        <div class="alert">{{ message }}</div>\n    {% endfor %}\n{% endif %}\n\n<form method="POST" action="{{ url_for(\'handle_form\') }}">\n    <input type="text" name="username" placeholder="用户名" required>\n    <input type="email" name="email" placeholder="邮箱" required>\n    <button type="submit">提交</button>\n</form>\n{% endblock %}\n\'\'\'')]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"   模板代码:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("template_code"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n   ✓ Flask基础演示完成"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 运行Flask基础演示")]),t._v("\nflask_basics_demo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("h3",{attrs:{id:"_2-2-flask扩展和中间件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-flask扩展和中间件"}},[t._v("#")]),t._v(" 2.2 Flask扩展和中间件")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("flask_extensions_demo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""Flask扩展和中间件演示"""')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"=== Flask扩展和中间件演示 ==="')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1. 常用Flask扩展")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n1. 常用Flask扩展:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    extensions "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Flask-SQLAlchemy"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"功能"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"数据库ORM集成"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"安装"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pip install Flask-SQLAlchemy"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"用途"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"简化数据库操作"')]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Flask-Login"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"功能"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"用户会话管理"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"安装"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pip install Flask-Login"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"用途"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"处理用户登录、登出、会话"')]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Flask-WTF"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"功能"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"表单处理和验证"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"安装"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pip install Flask-WTF"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"用途"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"表单渲染、验证、CSRF保护"')]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Flask-Mail"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"功能"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"邮件发送"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"安装"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pip install Flask-Mail"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"用途"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"发送邮件通知"')]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Flask-Migrate"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"功能"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"数据库迁移"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"安装"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pip install Flask-Migrate"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"用途"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"管理数据库结构变更"')]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Flask-RESTful"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"功能"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"REST API开发"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"安装"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pip install Flask-RESTful"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"用途"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"快速构建RESTful API"')]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" details "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" extensions"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("items"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string-interpolation"}},[n("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"\\n   ')]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v(':"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" details"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("items"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string-interpolation"}},[n("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"     ')]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v(": ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2. Flask-SQLAlchemy使用示例")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n2. Flask-SQLAlchemy使用示例:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    sqlalchemy_code "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v("'''\n# models.py - 数据模型\nfrom flask_sqlalchemy import SQLAlchemy\nfrom datetime import datetime\n\ndb = SQLAlchemy()\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password_hash = db.Column(db.String(128))\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # 关系\n    posts = db.relationship('Post', backref='author', lazy=True)\n    \n    def __repr__(self):\n        return f'<User {self.username}>'\n\nclass Post(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(100), nullable=False)\n    content = db.Column(db.Text, nullable=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    \n    def __repr__(self):\n        return f'<Post {self.title}>'\n\n# app.py - 应用配置\nfrom flask import Flask\nfrom models import db, User, Post\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///blog.db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n\ndb.init_app(app)\n\n# 创建数据库表\nwith app.app_context():\n    db.create_all()\n\n# 数据库操作示例\n@app.route('/api/users', methods=['POST'])\ndef create_user():\n    data = request.get_json()\n    \n    user = User(\n        username=data['username'],\n        email=data['email']\n    )\n    \n    db.session.add(user)\n    db.session.commit()\n    \n    return jsonify({'id': user.id, 'username': user.username})\n\n@app.route('/api/users')\ndef get_users():\n    users = User.query.all()\n    return jsonify([\n        {'id': u.id, 'username': u.username, 'email': u.email}\n        for u in users\n    ])\n'''")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"   SQLAlchemy代码:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sqlalchemy_code"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3. 中间件示例")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n3. Flask中间件示例:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    middleware_code "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v("'''\n# 中间件和钩子函数\nfrom flask import Flask, request, g\nimport time\nimport logging\n\napp = Flask(__name__)\n\n# 请求前处理\n@app.before_request\ndef before_request():\n    g.start_time = time.time()\n    g.user_id = request.headers.get('X-User-ID')\n    \n    # 记录请求日志\n    logging.info(f\"Request: {request.method} {request.path}\")\n\n# 请求后处理\n@app.after_request\ndef after_request(response):\n    # 计算请求处理时间\n    if hasattr(g, 'start_time'):\n        duration = time.time() - g.start_time\n        response.headers['X-Response-Time'] = str(duration)\n    \n    # 添加CORS头\n    response.headers['Access-Control-Allow-Origin'] = '*'\n    response.headers['Access-Control-Allow-Methods'] = 'GET, POST, PUT, DELETE'\n    response.headers['Access-Control-Allow-Headers'] = 'Content-Type, Authorization'\n    \n    return response\n\n# 错误处理\n@app.errorhandler(404)\ndef not_found(error):\n    return jsonify({'error': '资源未找到'}), 404\n\n@app.errorhandler(500)\ndef internal_error(error):\n    return jsonify({'error': '服务器内部错误'}), 500\n\n# 自定义中间件类\nclass AuthMiddleware:\n    def __init__(self, app):\n        self.app = app\n        self.app.before_request(self.authenticate)\n    \n    def authenticate(self):\n        # 跳过公开路由\n        if request.endpoint in ['index', 'login']:\n            return\n        \n        token = request.headers.get('Authorization')\n        if not token:\n            return jsonify({'error': '需要认证'}), 401\n        \n        # 验证token逻辑\n        if not self.validate_token(token):\n            return jsonify({'error': '无效token'}), 401\n    \n    def validate_token(self, token):\n        # 实际的token验证逻辑\n        return token == 'valid-token'\n\n# 应用中间件\nauth_middleware = AuthMiddleware(app)\n'''")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"   中间件代码:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("middleware_code"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n   ✓ Flask扩展和中间件演示完成"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 运行Flask扩展演示")]),t._v("\nflask_extensions_demo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("h2",{attrs:{id:"_3-django基础"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-django基础"}},[t._v("#")]),t._v(" 3. Django基础")]),t._v(" "),n("h3",{attrs:{id:"_3-1-django项目结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-django项目结构"}},[t._v("#")]),t._v(" 3.1 Django项目结构")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("django_basics_demo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""Django基础演示"""')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"=== Django基础演示 ==="')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1. Django项目创建和结构")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n1. Django项目创建和结构:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    project_structure "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v("'''\n# 创建Django项目\n$ django-admin startproject myproject\n$ cd myproject\n$ python manage.py startapp myapp\n\n# 项目结构\nmyproject/\n├── manage.py              # 项目管理脚本\n├── myproject/             # 项目配置目录\n│   ├── __init__.py\n│   ├── settings.py        # 项目设置\n│   ├── urls.py           # 主URL配置\n│   ├── wsgi.py           # WSGI配置\n│   └── asgi.py           # ASGI配置\n└── myapp/                # 应用目录\n    ├── __init__.py\n    ├── admin.py          # 管理后台配置\n    ├── apps.py           # 应用配置\n    ├── models.py         # 数据模型\n    ├── views.py          # 视图函数\n    ├── urls.py           # 应用URL配置\n    ├── tests.py          # 测试文件\n    └── migrations/       # 数据库迁移文件\n        └── __init__.py\n'''")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"   项目结构:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("project_structure"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2. Django设置配置")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n2. Django设置配置:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    settings_code "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v("'''\n# settings.py - Django设置\nimport os\nfrom pathlib import Path\n\n# 基础设置\nBASE_DIR = Path(__file__).resolve().parent.parent\nSECRET_KEY = 'your-secret-key-here'\nDEBUG = True\nALLOWED_HOSTS = ['localhost', '127.0.0.1']\n\n# 应用配置\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp',  # 自定义应用\n    'rest_framework',  # Django REST framework\n]\n\n# 中间件配置\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\n# URL配置\nROOT_URLCONF = 'myproject.urls'\n\n# 模板配置\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\n# 数据库配置\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# 静态文件配置\nSTATIC_URL = '/static/'\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n\n# 媒体文件配置\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\n\n# 国际化配置\nLANGUAGE_CODE = 'zh-hans'\nTIME_ZONE = 'Asia/Shanghai'\nUSE_I18N = True\nUSE_TZ = True\n'''")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"   设置配置:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("settings_code"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3. Django模型")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n3. Django模型示例:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    models_code "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v("'''\n# models.py - 数据模型\nfrom django.db import models\nfrom django.contrib.auth.models import User\nfrom django.utils import timezone\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100, unique=True, verbose_name='分类名称')\n    description = models.TextField(blank=True, verbose_name='描述')\n    created_at = models.DateTimeField(auto_now_add=True, verbose_name='创建时间')\n    \n    class Meta:\n        verbose_name = '分类'\n        verbose_name_plural = '分类'\n        ordering = ['name']\n    \n    def __str__(self):\n        return self.name\n\nclass Post(models.Model):\n    STATUS_CHOICES = [\n        ('draft', '草稿'),\n        ('published', '已发布'),\n        ('archived', '已归档'),\n    ]\n    \n    title = models.CharField(max_length=200, verbose_name='标题')\n    slug = models.SlugField(max_length=200, unique=True, verbose_name='URL别名')\n    content = models.TextField(verbose_name='内容')\n    excerpt = models.TextField(max_length=500, blank=True, verbose_name='摘要')\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, \n                            default='draft', verbose_name='状态')\n    \n    # 关系字段\n    author = models.ForeignKey(User, on_delete=models.CASCADE, \n                              related_name='posts', verbose_name='作者')\n    category = models.ForeignKey(Category, on_delete=models.SET_NULL, \n                               null=True, blank=True, verbose_name='分类')\n    tags = models.ManyToManyField('Tag', blank=True, verbose_name='标签')\n    \n    # 时间字段\n    created_at = models.DateTimeField(auto_now_add=True, verbose_name='创建时间')\n    updated_at = models.DateTimeField(auto_now=True, verbose_name='更新时间')\n    published_at = models.DateTimeField(null=True, blank=True, verbose_name='发布时间')\n    \n    class Meta:\n        verbose_name = '文章'\n        verbose_name_plural = '文章'\n        ordering = ['-created_at']\n        indexes = [\n            models.Index(fields=['status', 'published_at']),\n            models.Index(fields=['author', 'created_at']),\n        ]\n    \n    def __str__(self):\n        return self.title\n    \n    def save(self, *args, **kwargs):\n        if self.status == 'published' and not self.published_at:\n            self.published_at = timezone.now()\n        super().save(*args, **kwargs)\n    \n    @property\n    def is_published(self):\n        return self.status == 'published'\n\nclass Tag(models.Model):\n    name = models.CharField(max_length=50, unique=True, verbose_name='标签名')\n    color = models.CharField(max_length=7, default='#007bff', verbose_name='颜色')\n    \n    class Meta:\n        verbose_name = '标签'\n        verbose_name_plural = '标签'\n        ordering = ['name']\n    \n    def __str__(self):\n        return self.name\n\nclass Comment(models.Model):\n    post = models.ForeignKey(Post, on_delete=models.CASCADE, \n                           related_name='comments', verbose_name='文章')\n    author_name = models.CharField(max_length=100, verbose_name='作者姓名')\n    author_email = models.EmailField(verbose_name='作者邮箱')\n    content = models.TextField(verbose_name='评论内容')\n    is_approved = models.BooleanField(default=False, verbose_name='已审核')\n    created_at = models.DateTimeField(auto_now_add=True, verbose_name='创建时间')\n    \n    class Meta:\n        verbose_name = '评论'\n        verbose_name_plural = '评论'\n        ordering = ['-created_at']\n    \n    def __str__(self):\n        return f'{self.author_name} 对 {self.post.title} 的评论'\n'''")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"   模型代码:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("models_code"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n   ✓ Django基础演示完成"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 运行Django基础演示")]),t._v("\ndjango_basics_demo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("h3",{attrs:{id:"_3-2-django视图和url"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-django视图和url"}},[t._v("#")]),t._v(" 3.2 Django视图和URL")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("django_views_urls_demo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""Django视图和URL演示"""')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"=== Django视图和URL演示 ==="')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1. 函数视图")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n1. Django函数视图:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    function_views_code "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v("'''\n# views.py - 函数视图\nfrom django.shortcuts import render, get_object_or_404, redirect\nfrom django.http import JsonResponse, HttpResponse\nfrom django.contrib.auth.decorators import login_required\nfrom django.views.decorators.http import require_http_methods\nfrom django.core.paginator import Paginator\nfrom .models import Post, Category, Tag\nfrom .forms import PostForm, CommentForm\n\ndef index(request):\n    \"\"\"首页视图\"\"\"\n    posts = Post.objects.filter(status='published').order_by('-published_at')\n    \n    # 分页\n    paginator = Paginator(posts, 10)  # 每页10篇文章\n    page_number = request.GET.get('page')\n    page_obj = paginator.get_page(page_number)\n    \n    context = {\n        'posts': page_obj,\n        'categories': Category.objects.all(),\n        'popular_tags': Tag.objects.all()[:10]\n    }\n    return render(request, 'blog/index.html', context)\n\ndef post_detail(request, slug):\n    \"\"\"文章详情视图\"\"\"\n    post = get_object_or_404(Post, slug=slug, status='published')\n    comments = post.comments.filter(is_approved=True)\n    \n    # 处理评论表单\n    if request.method == 'POST':\n        comment_form = CommentForm(request.POST)\n        if comment_form.is_valid():\n            comment = comment_form.save(commit=False)\n            comment.post = post\n            comment.save()\n            return redirect('post_detail', slug=slug)\n    else:\n        comment_form = CommentForm()\n    \n    context = {\n        'post': post,\n        'comments': comments,\n        'comment_form': comment_form\n    }\n    return render(request, 'blog/post_detail.html', context)\n\n@login_required\ndef post_create(request):\n    \"\"\"创建文章视图\"\"\"\n    if request.method == 'POST':\n        form = PostForm(request.POST)\n        if form.is_valid():\n            post = form.save(commit=False)\n            post.author = request.user\n            post.save()\n            form.save_m2m()  # 保存多对多关系\n            return redirect('post_detail', slug=post.slug)\n    else:\n        form = PostForm()\n    \n    return render(request, 'blog/post_form.html', {'form': form})\n\n@require_http_methods([\"GET\", \"POST\"])\ndef category_posts(request, category_id):\n    \"\"\"分类文章视图\"\"\"\n    category = get_object_or_404(Category, id=category_id)\n    posts = Post.objects.filter(category=category, status='published')\n    \n    context = {\n        'category': category,\n        'posts': posts\n    }\n    return render(request, 'blog/category_posts.html', context)\n\ndef api_posts(request):\n    \"\"\"API视图 - 返回JSON数据\"\"\"\n    posts = Post.objects.filter(status='published').values(\n        'id', 'title', 'slug', 'excerpt', 'published_at'\n    )\n    \n    return JsonResponse({\n        'posts': list(posts),\n        'count': posts.count()\n    })\n'''")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"   函数视图代码:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("function_views_code"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2. 类视图")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n2. Django类视图:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    class_views_code "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v("'''\n# views.py - 类视图\nfrom django.views.generic import (\n    ListView, DetailView, CreateView, UpdateView, DeleteView\n)\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom django.urls import reverse_lazy\nfrom django.db.models import Q\n\nclass PostListView(ListView):\n    \"\"\"文章列表视图\"\"\"\n    model = Post\n    template_name = 'blog/post_list.html'\n    context_object_name = 'posts'\n    paginate_by = 10\n    \n    def get_queryset(self):\n        queryset = Post.objects.filter(status='published')\n        \n        # 搜索功能\n        search_query = self.request.GET.get('search')\n        if search_query:\n            queryset = queryset.filter(\n                Q(title__icontains=search_query) |\n                Q(content__icontains=search_query)\n            )\n        \n        # 分类过滤\n        category_id = self.request.GET.get('category')\n        if category_id:\n            queryset = queryset.filter(category_id=category_id)\n        \n        return queryset.order_by('-published_at')\n    \n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['categories'] = Category.objects.all()\n        context['search_query'] = self.request.GET.get('search', '')\n        return context\n\nclass PostDetailView(DetailView):\n    \"\"\"文章详情视图\"\"\"\n    model = Post\n    template_name = 'blog/post_detail.html'\n    context_object_name = 'post'\n    slug_field = 'slug'\n    slug_url_kwarg = 'slug'\n    \n    def get_queryset(self):\n        return Post.objects.filter(status='published')\n    \n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['comments'] = self.object.comments.filter(is_approved=True)\n        context['comment_form'] = CommentForm()\n        return context\n\nclass PostCreateView(LoginRequiredMixin, CreateView):\n    \"\"\"创建文章视图\"\"\"\n    model = Post\n    form_class = PostForm\n    template_name = 'blog/post_form.html'\n    \n    def form_valid(self, form):\n        form.instance.author = self.request.user\n        return super().form_valid(form)\n    \n    def get_success_url(self):\n        return reverse_lazy('post_detail', kwargs={'slug': self.object.slug})\n\nclass PostUpdateView(LoginRequiredMixin, UpdateView):\n    \"\"\"更新文章视图\"\"\"\n    model = Post\n    form_class = PostForm\n    template_name = 'blog/post_form.html'\n    slug_field = 'slug'\n    slug_url_kwarg = 'slug'\n    \n    def get_queryset(self):\n        # 只允许作者编辑自己的文章\n        return Post.objects.filter(author=self.request.user)\n    \n    def get_success_url(self):\n        return reverse_lazy('post_detail', kwargs={'slug': self.object.slug})\n\nclass PostDeleteView(LoginRequiredMixin, DeleteView):\n    \"\"\"删除文章视图\"\"\"\n    model = Post\n    template_name = 'blog/post_confirm_delete.html'\n    success_url = reverse_lazy('post_list')\n    slug_field = 'slug'\n    slug_url_kwarg = 'slug'\n    \n    def get_queryset(self):\n        return Post.objects.filter(author=self.request.user)\n'''")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"   类视图代码:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("class_views_code"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3. URL配置")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n3. Django URL配置:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    urls_code "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v("'''\n# myproject/urls.py - 主URL配置\nfrom django.contrib import admin\nfrom django.urls import path, include\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),\n    path('api/', include('myapp.api_urls')),\n    path('accounts/', include('django.contrib.auth.urls')),\n]\n\n# 开发环境下提供媒体文件服务\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)\n\n# myapp/urls.py - 应用URL配置\nfrom django.urls import path\nfrom . import views\n\napp_name = 'blog'\n\nurlpatterns = [\n    # 函数视图URL\n    path('', views.index, name='index'),\n    path('post/<slug:slug>/', views.post_detail, name='post_detail'),\n    path('create/', views.post_create, name='post_create'),\n    path('category/<int:category_id>/', views.category_posts, name='category_posts'),\n    \n    # 类视图URL\n    path('posts/', views.PostListView.as_view(), name='post_list'),\n    path('post/<slug:slug>/edit/', views.PostUpdateView.as_view(), name='post_update'),\n    path('post/<slug:slug>/delete/', views.PostDeleteView.as_view(), name='post_delete'),\n    \n    # API URL\n    path('api/posts/', views.api_posts, name='api_posts'),\n]\n\n# myapp/api_urls.py - API URL配置\nfrom django.urls import path, include\nfrom rest_framework.routers import DefaultRouter\nfrom .api_views import PostViewSet, CategoryViewSet\n\nrouter = DefaultRouter()\nrouter.register(r'posts', PostViewSet)\nrouter.register(r'categories', CategoryViewSet)\n\nurlpatterns = [\n    path('', include(router.urls)),\n    path('auth/', include('rest_framework.urls')),\n]\n'''")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"   URL配置代码:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("urls_code"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n   ✓ Django视图和URL演示完成"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 运行Django视图和URL演示")]),t._v("\ndjango_views_urls_demo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("h2",{attrs:{id:"_4-django-rest-framework"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-django-rest-framework"}},[t._v("#")]),t._v(" 4. Django REST Framework")]),t._v(" "),n("h3",{attrs:{id:"_4-1-rest-api开发"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-rest-api开发"}},[t._v("#")]),t._v(" 4.1 REST API开发")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("django_rest_framework_demo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""Django REST Framework演示"""')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"=== Django REST Framework演示 ==="')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1. 安装和配置")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n1. DRF安装和配置:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    installation_code "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v("'''\n# 安装Django REST Framework\npip install djangorestframework\npip install django-filter\npip install djangorestframework-simplejwt\n\n# settings.py - 配置DRF\nINSTALLED_APPS = [\n    # ... 其他应用\n    'rest_framework',\n    'rest_framework.authtoken',\n    'django_filters',\n]\n\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.TokenAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n    ],\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticatedOrReadOnly',\n    ],\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 20,\n    'DEFAULT_FILTER_BACKENDS': [\n        'django_filters.rest_framework.DjangoFilterBackend',\n        'rest_framework.filters.SearchFilter',\n        'rest_framework.filters.OrderingFilter',\n    ],\n    'DEFAULT_RENDERER_CLASSES': [\n        'rest_framework.renderers.JSONRenderer',\n        'rest_framework.renderers.BrowsableAPIRenderer',\n    ],\n}\n'''")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"   安装配置:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("installation_code"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2. 序列化器")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n2. DRF序列化器:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    serializers_code "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v("'''\n# serializers.py - 序列化器\nfrom rest_framework import serializers\nfrom .models import Post, Category, Tag, Comment\nfrom django.contrib.auth.models import User\n\nclass UserSerializer(serializers.ModelSerializer):\n    posts_count = serializers.SerializerMethodField()\n    \n    class Meta:\n        model = User\n        fields = ['id', 'username', 'email', 'date_joined', 'posts_count']\n        read_only_fields = ['date_joined']\n    \n    def get_posts_count(self, obj):\n        return obj.posts.filter(status='published').count()\n\nclass CategorySerializer(serializers.ModelSerializer):\n    posts_count = serializers.SerializerMethodField()\n    \n    class Meta:\n        model = Category\n        fields = ['id', 'name', 'description', 'created_at', 'posts_count']\n        read_only_fields = ['created_at']\n    \n    def get_posts_count(self, obj):\n        return obj.post_set.filter(status='published').count()\n\nclass TagSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Tag\n        fields = ['id', 'name', 'color']\n\nclass CommentSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Comment\n        fields = ['id', 'author_name', 'author_email', 'content', \n                 'is_approved', 'created_at']\n        read_only_fields = ['created_at', 'is_approved']\n\nclass PostListSerializer(serializers.ModelSerializer):\n    author = UserSerializer(read_only=True)\n    category = CategorySerializer(read_only=True)\n    tags = TagSerializer(many=True, read_only=True)\n    comments_count = serializers.SerializerMethodField()\n    \n    class Meta:\n        model = Post\n        fields = ['id', 'title', 'slug', 'excerpt', 'status', \n                 'author', 'category', 'tags', 'created_at', \n                 'published_at', 'comments_count']\n    \n    def get_comments_count(self, obj):\n        return obj.comments.filter(is_approved=True).count()\n\nclass PostDetailSerializer(serializers.ModelSerializer):\n    author = UserSerializer(read_only=True)\n    category = CategorySerializer(read_only=True)\n    tags = TagSerializer(many=True, read_only=True)\n    comments = CommentSerializer(many=True, read_only=True)\n    \n    class Meta:\n        model = Post\n        fields = ['id', 'title', 'slug', 'content', 'excerpt', \n                 'status', 'author', 'category', 'tags', \n                 'created_at', 'updated_at', 'published_at', 'comments']\n        read_only_fields = ['created_at', 'updated_at']\n\nclass PostCreateUpdateSerializer(serializers.ModelSerializer):\n    tags = serializers.PrimaryKeyRelatedField(\n        many=True, queryset=Tag.objects.all(), required=False\n    )\n    \n    class Meta:\n        model = Post\n        fields = ['title', 'slug', 'content', 'excerpt', 'status', \n                 'category', 'tags']\n    \n    def validate_slug(self, value):\n        # 验证slug唯一性\n        if self.instance:\n            if Post.objects.exclude(pk=self.instance.pk).filter(slug=value).exists():\n                raise serializers.ValidationError(\"该URL别名已存在\")\n        else:\n            if Post.objects.filter(slug=value).exists():\n                raise serializers.ValidationError(\"该URL别名已存在\")\n        return value\n'''")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"   序列化器代码:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("serializers_code"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3. API视图")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n3. DRF API视图:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    api_views_code "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v("'''\n# api_views.py - API视图\nfrom rest_framework import viewsets, status, filters\nfrom rest_framework.decorators import action\nfrom rest_framework.response import Response\nfrom rest_framework.permissions import IsAuthenticatedOrReadOnly, IsAuthenticated\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom django.db.models import Q\nfrom .models import Post, Category, Tag, Comment\nfrom .serializers import (\n    PostListSerializer, PostDetailSerializer, PostCreateUpdateSerializer,\n    CategorySerializer, TagSerializer, CommentSerializer\n)\n\nclass PostViewSet(viewsets.ModelViewSet):\n    \"\"\"文章API视图集\"\"\"\n    queryset = Post.objects.all()\n    permission_classes = [IsAuthenticatedOrReadOnly]\n    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]\n    filterset_fields = ['status', 'category', 'author']\n    search_fields = ['title', 'content', 'excerpt']\n    ordering_fields = ['created_at', 'updated_at', 'published_at']\n    ordering = ['-created_at']\n    \n    def get_serializer_class(self):\n        if self.action == 'list':\n            return PostListSerializer\n        elif self.action in ['create', 'update', 'partial_update']:\n            return PostCreateUpdateSerializer\n        return PostDetailSerializer\n    \n    def get_queryset(self):\n        queryset = Post.objects.all()\n        \n        # 非管理员只能看到已发布的文章\n        if not self.request.user.is_staff:\n            queryset = queryset.filter(status='published')\n        \n        # 作者只能看到自己的文章\n        if self.action in ['update', 'partial_update', 'destroy']:\n            if not self.request.user.is_staff:\n                queryset = queryset.filter(author=self.request.user)\n        \n        return queryset\n    \n    def perform_create(self, serializer):\n        serializer.save(author=self.request.user)\n    \n    @action(detail=True, methods=['post'], permission_classes=[IsAuthenticated])\n    def toggle_status(self, request, pk=None):\n        \"\"\"切换文章状态\"\"\"\n        post = self.get_object()\n        \n        if post.author != request.user and not request.user.is_staff:\n            return Response(\n                {'error': '无权限操作'}, \n                status=status.HTTP_403_FORBIDDEN\n            )\n        \n        if post.status == 'published':\n            post.status = 'draft'\n        else:\n            post.status = 'published'\n        \n        post.save()\n        \n        return Response({\n            'message': f'文章状态已更改为{post.get_status_display()}',\n            'status': post.status\n        })\n    \n    @action(detail=False, methods=['get'])\n    def my_posts(self, request):\n        \"\"\"获取当前用户的文章\"\"\"\n        if not request.user.is_authenticated:\n            return Response(\n                {'error': '需要登录'}, \n                status=status.HTTP_401_UNAUTHORIZED\n            )\n        \n        queryset = self.get_queryset().filter(author=request.user)\n        page = self.paginate_queryset(queryset)\n        \n        if page is not None:\n            serializer = PostListSerializer(page, many=True)\n            return self.get_paginated_response(serializer.data)\n        \n        serializer = PostListSerializer(queryset, many=True)\n        return Response(serializer.data)\n\nclass CategoryViewSet(viewsets.ModelViewSet):\n    \"\"\"分类API视图集\"\"\"\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\n    permission_classes = [IsAuthenticatedOrReadOnly]\n    filter_backends = [filters.SearchFilter, filters.OrderingFilter]\n    search_fields = ['name', 'description']\n    ordering_fields = ['name', 'created_at']\n    ordering = ['name']\n    \n    @action(detail=True, methods=['get'])\n    def posts(self, request, pk=None):\n        \"\"\"获取分类下的文章\"\"\"\n        category = self.get_object()\n        posts = Post.objects.filter(\n            category=category, \n            status='published'\n        ).order_by('-published_at')\n        \n        page = self.paginate_queryset(posts)\n        if page is not None:\n            serializer = PostListSerializer(page, many=True)\n            return self.get_paginated_response(serializer.data)\n        \n        serializer = PostListSerializer(posts, many=True)\n        return Response(serializer.data)\n\nclass TagViewSet(viewsets.ModelViewSet):\n    \"\"\"标签API视图集\"\"\"\n    queryset = Tag.objects.all()\n    serializer_class = TagSerializer\n    permission_classes = [IsAuthenticatedOrReadOnly]\n    filter_backends = [filters.SearchFilter, filters.OrderingFilter]\n    search_fields = ['name']\n    ordering_fields = ['name']\n    ordering = ['name']\n\nclass CommentViewSet(viewsets.ModelViewSet):\n    \"\"\"评论API视图集\"\"\"\n    queryset = Comment.objects.all()\n    serializer_class = CommentSerializer\n    permission_classes = [IsAuthenticatedOrReadOnly]\n    filter_backends = [DjangoFilterBackend, filters.OrderingFilter]\n    filterset_fields = ['post', 'is_approved']\n    ordering_fields = ['created_at']\n    ordering = ['-created_at']\n    \n    def get_queryset(self):\n        queryset = Comment.objects.all()\n        \n        # 非管理员只能看到已审核的评论\n        if not self.request.user.is_staff:\n            queryset = queryset.filter(is_approved=True)\n        \n        return queryset\n    \n    @action(detail=True, methods=['post'], permission_classes=[IsAuthenticated])\n    def approve(self, request, pk=None):\n        \"\"\"审核评论\"\"\"\n        if not request.user.is_staff:\n            return Response(\n                {'error': '无权限操作'}, \n                status=status.HTTP_403_FORBIDDEN\n            )\n        \n        comment = self.get_object()\n        comment.is_approved = True\n        comment.save()\n        \n        return Response({'message': '评论已审核通过'})\n'''")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"   API视图代码:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("api_views_code"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n   ✓ Django REST Framework演示完成"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 运行DRF演示")]),t._v("\ndjango_rest_framework_demo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("h2",{attrs:{id:"_5-fastapi基础"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-fastapi基础"}},[t._v("#")]),t._v(" 5. FastAPI基础")]),t._v(" "),n("h3",{attrs:{id:"_5-1-fastapi入门"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-fastapi入门"}},[t._v("#")]),t._v(" 5.1 FastAPI入门")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fastapi_basics_demo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""FastAPI基础演示"""')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"=== FastAPI基础演示 ==="')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1. FastAPI基础应用")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n1. FastAPI基础应用:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    basic_app_code "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('\'\'\'\n# main.py - FastAPI基础应用\nfrom fastapi import FastAPI, HTTPException, Depends, status\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\nfrom pydantic import BaseModel, EmailStr\nfrom typing import List, Optional\nfrom datetime import datetime\nimport uvicorn\n\n# 创建FastAPI应用实例\napp = FastAPI(\n    title="博客API",\n    description="一个简单的博客API示例",\n    version="1.0.0",\n    docs_url="/docs",\n    redoc_url="/redoc"\n)\n\n# 安全认证\nsecurity = HTTPBearer()\n\n# Pydantic模型\nclass UserBase(BaseModel):\n    username: str\n    email: EmailStr\n\nclass UserCreate(UserBase):\n    password: str\n\nclass User(UserBase):\n    id: int\n    created_at: datetime\n    \n    class Config:\n        orm_mode = True\n\nclass PostBase(BaseModel):\n    title: str\n    content: str\n    excerpt: Optional[str] = None\n\nclass PostCreate(PostBase):\n    category_id: Optional[int] = None\n    tags: Optional[List[str]] = []\n\nclass Post(PostBase):\n    id: int\n    slug: str\n    status: str\n    author_id: int\n    created_at: datetime\n    updated_at: datetime\n    \n    class Config:\n        orm_mode = True\n\nclass PostResponse(Post):\n    author: User\n    comments_count: int\n\n# 依赖注入\ndef get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security)):\n    """获取当前用户"""\n    token = credentials.credentials\n    # 这里应该验证token并返回用户信息\n    # 简化示例，直接返回模拟用户\n    if token != "valid-token":\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail="无效的认证凭据",\n            headers={"WWW-Authenticate": "Bearer"},\n        )\n    return {"id": 1, "username": "testuser", "email": "test@example.com"}\n\n# 路由定义\n@app.get("/")\nasync def root():\n    """根路径"""\n    return {"message": "欢迎使用博客API"}\n\n@app.get("/health")\nasync def health_check():\n    """健康检查"""\n    return {"status": "healthy", "timestamp": datetime.now()}\n\n# 用户相关路由\n@app.post("/users/", response_model=User, status_code=status.HTTP_201_CREATED)\nasync def create_user(user: UserCreate):\n    """创建用户"""\n    # 这里应该保存到数据库\n    return {\n        "id": 1,\n        "username": user.username,\n        "email": user.email,\n        "created_at": datetime.now()\n    }\n\n@app.get("/users/me", response_model=User)\nasync def get_current_user_info(current_user: dict = Depends(get_current_user)):\n    """获取当前用户信息"""\n    return {\n        "id": current_user["id"],\n        "username": current_user["username"],\n        "email": current_user["email"],\n        "created_at": datetime.now()\n    }\n\n# 文章相关路由\n@app.get("/posts/", response_model=List[PostResponse])\nasync def get_posts(\n    skip: int = 0, \n    limit: int = 10,\n    search: Optional[str] = None,\n    category: Optional[int] = None\n):\n    """获取文章列表"""\n    # 模拟数据\n    posts = [\n        {\n            "id": 1,\n            "title": "FastAPI入门",\n            "content": "FastAPI是一个现代、快速的Web框架...",\n            "excerpt": "FastAPI简介",\n            "slug": "fastapi-intro",\n            "status": "published",\n            "author_id": 1,\n            "created_at": datetime.now(),\n            "updated_at": datetime.now(),\n            "author": {\n                "id": 1,\n                "username": "admin",\n                "email": "admin@example.com",\n                "created_at": datetime.now()\n            },\n            "comments_count": 5\n        }\n    ]\n    \n    return posts[skip:skip + limit]\n\n@app.get("/posts/{post_id}", response_model=PostResponse)\nasync def get_post(post_id: int):\n    """获取单篇文章"""\n    if post_id != 1:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail="文章未找到"\n        )\n    \n    return {\n        "id": 1,\n        "title": "FastAPI入门",\n        "content": "FastAPI是一个现代、快速的Web框架...",\n        "excerpt": "FastAPI简介",\n        "slug": "fastapi-intro",\n        "status": "published",\n        "author_id": 1,\n        "created_at": datetime.now(),\n        "updated_at": datetime.now(),\n        "author": {\n            "id": 1,\n            "username": "admin",\n            "email": "admin@example.com",\n            "created_at": datetime.now()\n        },\n        "comments_count": 5\n    }\n\n@app.post("/posts/", response_model=Post, status_code=status.HTTP_201_CREATED)\nasync def create_post(\n    post: PostCreate, \n    current_user: dict = Depends(get_current_user)\n):\n    """创建文章"""\n    return {\n        "id": 2,\n        "title": post.title,\n        "content": post.content,\n        "excerpt": post.excerpt,\n        "slug": post.title.lower().replace(" ", "-"),\n        "status": "draft",\n        "author_id": current_user["id"],\n        "created_at": datetime.now(),\n        "updated_at": datetime.now()\n    }\n\n@app.put("/posts/{post_id}", response_model=Post)\nasync def update_post(\n    post_id: int,\n    post: PostCreate,\n    current_user: dict = Depends(get_current_user)\n):\n    """更新文章"""\n    if post_id != 1:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail="文章未找到"\n        )\n    \n    return {\n        "id": post_id,\n        "title": post.title,\n        "content": post.content,\n        "excerpt": post.excerpt,\n        "slug": post.title.lower().replace(" ", "-"),\n        "status": "published",\n        "author_id": current_user["id"],\n        "created_at": datetime.now(),\n        "updated_at": datetime.now()\n    }\n\n@app.delete("/posts/{post_id}", status_code=status.HTTP_204_NO_CONTENT)\nasync def delete_post(\n    post_id: int,\n    current_user: dict = Depends(get_current_user)\n):\n    """删除文章"""\n    if post_id != 1:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail="文章未找到"\n        )\n    \n    # 删除逻辑\n    return\n\n# 启动应用\nif __name__ == "__main__":\n    uvicorn.run(app, host="0.0.0.0", port=8000, reload=True)\n\'\'\'')]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"   基础应用代码:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("basic_app_code"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2. 中间件和异常处理")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n2. FastAPI中间件和异常处理:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    middleware_code "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('\'\'\'\n# middleware.py - 中间件和异常处理\nfrom fastapi import FastAPI, Request, HTTPException\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom fastapi.middleware.trustedhost import TrustedHostMiddleware\nfrom fastapi.responses import JSONResponse\nfrom starlette.middleware.base import BaseHTTPMiddleware\nimport time\nimport logging\n\napp = FastAPI()\n\n# CORS中间件\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=["*"],  # 生产环境应该指定具体域名\n    allow_credentials=True,\n    allow_methods=["*"],\n    allow_headers=["*"],\n)\n\n# 信任主机中间件\napp.add_middleware(\n    TrustedHostMiddleware,\n    allowed_hosts=["localhost", "127.0.0.1", "*.example.com"]\n)\n\n# 自定义中间件\nclass LoggingMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request: Request, call_next):\n        start_time = time.time()\n        \n        # 记录请求信息\n        logging.info(f"Request: {request.method} {request.url}")\n        \n        response = await call_next(request)\n        \n        # 计算处理时间\n        process_time = time.time() - start_time\n        response.headers["X-Process-Time"] = str(process_time)\n        \n        # 记录响应信息\n        logging.info(f"Response: {response.status_code} - {process_time:.4f}s")\n        \n        return response\n\napp.add_middleware(LoggingMiddleware)\n\n# 全局异常处理\n@app.exception_handler(HTTPException)\nasync def http_exception_handler(request: Request, exc: HTTPException):\n    return JSONResponse(\n        status_code=exc.status_code,\n        content={\n            "error": {\n                "code": exc.status_code,\n                "message": exc.detail,\n                "path": str(request.url)\n            }\n        }\n    )\n\n@app.exception_handler(ValueError)\nasync def value_error_handler(request: Request, exc: ValueError):\n    return JSONResponse(\n        status_code=400,\n        content={\n            "error": {\n                "code": 400,\n                "message": "请求参数错误",\n                "detail": str(exc),\n                "path": str(request.url)\n            }\n        }\n    )\n\n@app.exception_handler(Exception)\nasync def general_exception_handler(request: Request, exc: Exception):\n    logging.error(f"Unhandled exception: {exc}", exc_info=True)\n    return JSONResponse(\n        status_code=500,\n        content={\n            "error": {\n                "code": 500,\n                "message": "服务器内部错误",\n                "path": str(request.url)\n            }\n        }\n    )\n\'\'\'')]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"   中间件代码:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("middleware_code"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3. 数据库集成")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n3. FastAPI数据库集成:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    database_code "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('\'\'\'\n# database.py - 数据库配置\nfrom sqlalchemy import create_engine, Column, Integer, String, Text, DateTime, ForeignKey\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker, Session, relationship\nfrom datetime import datetime\n\n# 数据库配置\nSQLALCHEMY_DATABASE_URL = "sqlite:///./blog.db"\n# SQLALCHEMY_DATABASE_URL = "postgresql://user:password@localhost/dbname"\n\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL,\n    connect_args={"check_same_thread": False}  # SQLite特有配置\n)\n\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n\n# 数据库模型\nclass User(Base):\n    __tablename__ = "users"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    username = Column(String, unique=True, index=True)\n    email = Column(String, unique=True, index=True)\n    hashed_password = Column(String)\n    created_at = Column(DateTime, default=datetime.utcnow)\n    \n    posts = relationship("Post", back_populates="author")\n\nclass Post(Base):\n    __tablename__ = "posts"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    title = Column(String, index=True)\n    slug = Column(String, unique=True, index=True)\n    content = Column(Text)\n    excerpt = Column(Text)\n    status = Column(String, default="draft")\n    author_id = Column(Integer, ForeignKey("users.id"))\n    created_at = Column(DateTime, default=datetime.utcnow)\n    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    \n    author = relationship("User", back_populates="posts")\n\n# 创建数据库表\nBase.metadata.create_all(bind=engine)\n\n# 数据库依赖\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n# CRUD操作\nclass UserCRUD:\n    @staticmethod\n    def create_user(db: Session, user_data: dict):\n        db_user = User(**user_data)\n        db.add(db_user)\n        db.commit()\n        db.refresh(db_user)\n        return db_user\n    \n    @staticmethod\n    def get_user(db: Session, user_id: int):\n        return db.query(User).filter(User.id == user_id).first()\n    \n    @staticmethod\n    def get_user_by_username(db: Session, username: str):\n        return db.query(User).filter(User.username == username).first()\n\nclass PostCRUD:\n    @staticmethod\n    def create_post(db: Session, post_data: dict, author_id: int):\n        db_post = Post(**post_data, author_id=author_id)\n        db.add(db_post)\n        db.commit()\n        db.refresh(db_post)\n        return db_post\n    \n    @staticmethod\n    def get_posts(db: Session, skip: int = 0, limit: int = 10):\n        return db.query(Post).offset(skip).limit(limit).all()\n    \n    @staticmethod\n    def get_post(db: Session, post_id: int):\n        return db.query(Post).filter(Post.id == post_id).first()\n    \n    @staticmethod\n    def update_post(db: Session, post_id: int, post_data: dict):\n        db_post = db.query(Post).filter(Post.id == post_id).first()\n        if db_post:\n            for key, value in post_data.items():\n                setattr(db_post, key, value)\n            db_post.updated_at = datetime.utcnow()\n            db.commit()\n            db.refresh(db_post)\n        return db_post\n    \n    @staticmethod\n    def delete_post(db: Session, post_id: int):\n        db_post = db.query(Post).filter(Post.id == post_id).first()\n        if db_post:\n            db.delete(db_post)\n            db.commit()\n        return db_post\n\n# 在main.py中使用数据库\nfrom fastapi import Depends\nfrom sqlalchemy.orm import Session\nfrom database import get_db, UserCRUD, PostCRUD\n\n@app.post("/users/", response_model=User)\nasync def create_user(user: UserCreate, db: Session = Depends(get_db)):\n    # 检查用户是否已存在\n    existing_user = UserCRUD.get_user_by_username(db, user.username)\n    if existing_user:\n        raise HTTPException(status_code=400, detail="用户名已存在")\n    \n    # 创建用户（实际应用中需要加密密码）\n    user_data = {\n        "username": user.username,\n        "email": user.email,\n        "hashed_password": user.password  # 应该使用bcrypt等加密\n    }\n    \n    return UserCRUD.create_user(db, user_data)\n\n@app.get("/posts/", response_model=List[Post])\nasync def get_posts(\n    skip: int = 0, \n    limit: int = 10, \n    db: Session = Depends(get_db)\n):\n    return PostCRUD.get_posts(db, skip=skip, limit=limit)\n\'\'\'')]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"   数据库集成代码:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("database_code"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n   ✓ FastAPI基础演示完成"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 运行FastAPI基础演示")]),t._v("\nfastapi_basics_demo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);