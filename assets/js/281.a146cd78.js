(window.webpackJsonp=window.webpackJsonp||[]).push([[281],{1098:function(t,s,a){"use strict";a.r(s);var n=a(1),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"动态规划-dynamic-programming"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动态规划-dynamic-programming"}},[t._v("#")]),t._v(" 动态规划 (Dynamic Programming)")]),t._v(" "),s("h2",{attrs:{id:"📋-学习目标"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#📋-学习目标"}},[t._v("#")]),t._v(" 📋 学习目标")]),t._v(" "),s("ul",[s("li",[t._v("理解动态规划的核心思想")]),t._v(" "),s("li",[t._v("掌握状态定义和转移方程")]),t._v(" "),s("li",[t._v("熟练运用记忆化搜索和递推")]),t._v(" "),s("li",[t._v("能够优化空间复杂度")])]),t._v(" "),s("h2",{attrs:{id:"🎯-核心概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#🎯-核心概念"}},[t._v("#")]),t._v(" 🎯 核心概念")]),t._v(" "),s("h3",{attrs:{id:"什么是动态规划"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是动态规划"}},[t._v("#")]),t._v(" 什么是动态规划")]),t._v(" "),s("p",[t._v("动态规划是一种通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。")]),t._v(" "),s("h3",{attrs:{id:"适用条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#适用条件"}},[t._v("#")]),t._v(" 适用条件")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("最优子结构")]),t._v("：问题的最优解包含子问题的最优解")]),t._v(" "),s("li",[s("strong",[t._v("重叠子问题")]),t._v("：递归算法反复求解相同的子问题")]),t._v(" "),s("li",[s("strong",[t._v("无后效性")]),t._v("：子问题的解一旦确定，不会再改变")])]),t._v(" "),s("h3",{attrs:{id:"解题步骤"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解题步骤"}},[t._v("#")]),t._v(" 解题步骤")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("定义状态")]),t._v("：确定dp数组的含义")]),t._v(" "),s("li",[s("strong",[t._v("状态转移")]),t._v("：找出状态间的递推关系")]),t._v(" "),s("li",[s("strong",[t._v("初始化")]),t._v("：确定边界条件")]),t._v(" "),s("li",[s("strong",[t._v("计算顺序")]),t._v("：确定计算的顺序")]),t._v(" "),s("li",[s("strong",[t._v("返回结果")]),t._v("：从dp数组中得到答案")])]),t._v(" "),s("h2",{attrs:{id:"🏗️-dp分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#🏗️-dp分类"}},[t._v("#")]),t._v(" 🏗️ DP分类")]),t._v(" "),s("h3",{attrs:{id:"线性dp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线性dp"}},[t._v("#")]),t._v(" 线性DP")]),t._v(" "),s("p",[t._v("状态转移呈线性关系")]),t._v(" "),s("h4",{attrs:{id:"经典问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#经典问题"}},[t._v("#")]),t._v(" 经典问题")]),t._v(" "),s("ul",[s("li",[t._v("斐波那契数列")]),t._v(" "),s("li",[t._v("爬楼梯")]),t._v(" "),s("li",[t._v("最大子数组和")]),t._v(" "),s("li",[t._v("最长递增子序列")])]),t._v(" "),s("h3",{attrs:{id:"区间dp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#区间dp"}},[t._v("#")]),t._v(" 区间DP")]),t._v(" "),s("p",[t._v("在区间上进行动态规划")]),t._v(" "),s("h4",{attrs:{id:"经典问题-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#经典问题-2"}},[t._v("#")]),t._v(" 经典问题")]),t._v(" "),s("ul",[s("li",[t._v("最长回文子串")]),t._v(" "),s("li",[t._v("矩阵链乘法")]),t._v(" "),s("li",[t._v("石子合并")])]),t._v(" "),s("h3",{attrs:{id:"背包dp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#背包dp"}},[t._v("#")]),t._v(" 背包DP")]),t._v(" "),s("p",[t._v("资源分配类问题")]),t._v(" "),s("h4",{attrs:{id:"经典问题-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#经典问题-3"}},[t._v("#")]),t._v(" 经典问题")]),t._v(" "),s("ul",[s("li",[t._v("0-1背包")]),t._v(" "),s("li",[t._v("完全背包")]),t._v(" "),s("li",[t._v("多重背包")]),t._v(" "),s("li",[t._v("分组背包")])]),t._v(" "),s("h3",{attrs:{id:"树形dp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#树形dp"}},[t._v("#")]),t._v(" 树形DP")]),t._v(" "),s("p",[t._v("在树上进行动态规划")]),t._v(" "),s("h4",{attrs:{id:"经典问题-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#经典问题-4"}},[t._v("#")]),t._v(" 经典问题")]),t._v(" "),s("ul",[s("li",[t._v("树的直径")]),t._v(" "),s("li",[t._v("树上最大独立集")]),t._v(" "),s("li",[t._v("树的重心")])]),t._v(" "),s("h3",{attrs:{id:"状态机dp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#状态机dp"}},[t._v("#")]),t._v(" 状态机DP")]),t._v(" "),s("p",[t._v("状态之间有转移限制")]),t._v(" "),s("h4",{attrs:{id:"经典问题-5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#经典问题-5"}},[t._v("#")]),t._v(" 经典问题")]),t._v(" "),s("ul",[s("li",[t._v("买卖股票")]),t._v(" "),s("li",[t._v("打家劫舍")]),t._v(" "),s("li",[t._v("状态压缩DP")])]),t._v(" "),s("h2",{attrs:{id:"🎯-经典题目详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#🎯-经典题目详解"}},[t._v("#")]),t._v(" 🎯 经典题目详解")]),t._v(" "),s("h3",{attrs:{id:"_1-爬楼梯-🟢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-爬楼梯-🟢"}},[t._v("#")]),t._v(" 1. 爬楼梯 🟢")]),t._v(" "),s("p",[s("strong",[t._v("题目")]),t._v("：假设你正在爬楼梯。需要n阶你才能到达楼顶。每次你可以爬1或2个台阶。有多少种不同的方法可以爬到楼顶？")]),t._v(" "),s("p",[s("strong",[t._v("状态定义")]),t._v("：dp[i] = 爬到第i阶的方法数")]),t._v(" "),s("p",[s("strong",[t._v("状态转移")]),t._v("：dp[i] = dp[i-1] + dp[i-2]")]),t._v(" "),s("p",[s("strong",[t._v("代码实现")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("climbStairs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" dp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    dp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    dp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        dp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" dp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" dp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("空间优化")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("climbStairs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" prev2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prev1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" curr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prev1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" prev2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        prev2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prev1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        prev1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" curr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" prev1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"_2-最长递增子序列-🟡"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-最长递增子序列-🟡"}},[t._v("#")]),t._v(" 2. 最长递增子序列 🟡")]),t._v(" "),s("p",[s("strong",[t._v("题目")]),t._v("：给定一个无序的整数数组，找到其中最长上升子序列的长度。")]),t._v(" "),s("p",[s("strong",[t._v("状态定义")]),t._v("：dp[i] = 以nums[i]结尾的最长递增子序列长度")]),t._v(" "),s("p",[s("strong",[t._v("状态转移")]),t._v("：dp[i] = max(dp[j] + 1) for all j < i and nums[j] < nums[i]")]),t._v(" "),s("p",[s("strong",[t._v("代码实现")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lengthOfLIS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" dp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fill")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" maxLen "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                dp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Math")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        maxLen "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Math")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("maxLen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" maxLen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("时间复杂度")]),t._v("：O(n²)"),s("br"),t._v(" "),s("strong",[t._v("空间复杂度")]),t._v("：O(n)")]),t._v(" "),s("h3",{attrs:{id:"_3-0-1背包问题-🟡"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-0-1背包问题-🟡"}},[t._v("#")]),t._v(" 3. 0-1背包问题 🟡")]),t._v(" "),s("p",[s("strong",[t._v("题目")]),t._v("：给定n个物品，每个物品有重量w[i]和价值v[i]，背包容量为W，求能装入背包的最大价值。")]),t._v(" "),s("p",[s("strong",[t._v("状态定义")]),t._v("：dp[i][w] = 前i个物品，背包容量为w时的最大价值")]),t._v(" "),s("p",[s("strong",[t._v("状态转移")]),t._v("：")])])}),[],!1,null,null,null);s.default=r.exports}}]);