(window.webpackJsonp=window.webpackJsonp||[]).push([[428],{1260:function(t,e,a){"use strict";a.r(e);var v=a(1),_=Object(v.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("blockquote",[e("p",[t._v("点击勘误"),e("a",{attrs:{href:"https://github.com/webVueBlog/JavaPlusDoc/issues",target:"_blank",rel:"noopener noreferrer"}},[t._v("issues"),e("OutboundLink")],1),t._v("，哪吒感谢大家的阅读")])]),t._v(" "),e("img",{attrs:{align:"right",width:"100",src:"https://cdn.jsdelivr.net/gh/YunYouJun/yun/images/yun-alpha-compressed.png"}}),t._v(" "),e("h2",{attrs:{id:"为什么使用消息队列"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么使用消息队列"}},[t._v("#")]),t._v(" 为什么使用消息队列")]),t._v(" "),e("ul",[e("li",[t._v("为什么使用消息队列？")]),t._v(" "),e("li",[t._v("消息队列有什么优点和缺点？")]),t._v(" "),e("li",[t._v("Kafka、ActiveMQ、RabbitMQ、RocketMQ 都有什么区别，以及适合哪些场景？")])]),t._v(" "),e("p",[t._v("消息队列常见的使用场景吧，其实场景有很多，但是比较核心的有 3 个：解耦、异步、削峰。")]),t._v(" "),e("h3",{attrs:{id:"解耦"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解耦"}},[t._v("#")]),t._v(" 解耦")]),t._v(" "),e("p",[t._v("A 系统发送数据到 BCD 三个系统，通过接口调用发送。如果 E 系统也要这个数据呢？那如果 D 系统现在不需要了呢？A 系统负责人几乎崩溃......")]),t._v(" "),e("p",[t._v("在这个场景中，A 系统跟其它各种乱七八糟的系统严重耦合，A 系统产生一条比较关键的数据，很多系统都需要 A 系统将这个数据发送过来。A 系统要时时刻刻考虑 BCDE 四个系统如果挂了该咋办？要不要重发，要不要把消息存起来？")]),t._v(" "),e("p",[t._v("如果使用 MQ，A 系统产生一条数据，发送到 MQ 里面去，哪个系统需要数据自己去 MQ 里面消费。如果新系统需要数据，直接从 MQ 里消费即可；如果某个系统不需要这条数据了，就取消对 MQ 消息的消费即可。这样下来，A 系统压根儿不需要去考虑要给谁发送数据，不需要维护这个代码，也不需要考虑人家是否调用成功、失败超时等情况。")]),t._v(" "),e("p",[t._v("总结：通过一个 MQ，Pub/Sub 发布订阅消息这么一个模型，A 系统就跟其它系统彻底解耦了。")]),t._v(" "),e("h3",{attrs:{id:"异步"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#异步"}},[t._v("#")]),t._v(" 异步")]),t._v(" "),e("p",[t._v("再来看一个场景，A 系统接收一个请求，需要在自己本地写库，还需要在 BCD 三个系统写库，自己本地写库要 3ms，BCD 三个系统分别写库要 300ms、450ms、200ms。最终请求总延时是 3 + 300 + 450 + 200 = 953ms，接近 1s，用户感觉搞个什么东西，慢死了慢死了。用户通过浏览器发起请求，等待个 1s，这几乎是不可接受的。")]),t._v(" "),e("p",[t._v("一般互联网类的企业，对于用户直接的操作，一般要求是每个请求都必须在 200 ms 以内完成，对用户几乎是无感知的。")]),t._v(" "),e("p",[t._v("如果使用 MQ，那么 A 系统连续发送 3 条消息到 MQ 队列中，假如耗时 5ms，A 系统从接受一个请求到返回响应给用户，总时长是 3 + 5 = 8ms，对于用户而言，其实感觉上就是点个按钮，8ms 以后就直接返回了")]),t._v(" "),e("h3",{attrs:{id:"削峰"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#削峰"}},[t._v("#")]),t._v(" 削峰")]),t._v(" "),e("p",[t._v("每天 0:00 到 12:00，A 系统风平浪静，每秒并发请求数量就 50 个。结果每次一到 12:00 ~ 13:00 ，每秒并发请求数量突然会暴增到 5k+ 条。但是系统是直接基于 MySQL 的，大量的请求涌入 MySQL，每秒钟对 MySQL 执行约 5k 条 SQL。")]),t._v(" "),e("p",[t._v("一般的 MySQL，扛到每秒 2k 个请求就差不多了，如果每秒请求到 5k 的话，可能就直接把 MySQL 给打死了，导致系统崩溃，用户也就没法再使用系统了。")]),t._v(" "),e("p",[t._v("但是高峰期一过，到了下午的时候，就成了低峰期，可能也就 1w 的用户同时在网站上操作，每秒中的请求数量可能也就 50 个请求，对整个系统几乎没有任何的压力。")]),t._v(" "),e("p",[t._v("如果使用 MQ，每秒 5k 个请求写入 MQ，A 系统每秒钟最多处理 2k 个请求，因为 MySQL 每秒钟最多处理 2k 个。A 系统从 MQ 中慢慢拉取请求，每秒钟就拉取 2k 个请求，不要超过自己每秒能处理的最大请求数量就 ok，这样下来，哪怕是高峰期的时候，A 系统也绝对不会挂掉。而 MQ 每秒钟 5k 个请求进来，就 2k 个请求出去，结果就导致在中午高峰期（1 个小时），可能有几十万甚至几百万的请求积压在 MQ 中。")]),t._v(" "),e("p",[t._v("这个短暂的高峰期积压是 ok 的，因为高峰期过了之后，每秒钟就 50 个请求进 MQ，但是 A 系统依然会按照每秒 2k 个请求的速度在处理。所以说，只要高峰期一过，A 系统就会快速将积压的消息给解决掉。")]),t._v(" "),e("h3",{attrs:{id:"缺点有以下几个"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缺点有以下几个"}},[t._v("#")]),t._v(" 缺点有以下几个：")]),t._v(" "),e("p",[t._v("系统可用性降低")]),t._v(" "),e("p",[t._v("系统引入的外部依赖越多，越容易挂掉。本来你就是 A 系统调用 BCD 三个系统的接口就好了，ABCD 四个系统还好好的，没啥问题，你偏加个 MQ 进来，万一 MQ 挂了咋整？MQ 一挂，整套系统崩溃，你不就完了？如何保证消息队列的高可用。")]),t._v(" "),e("p",[t._v("系统复杂度提高")]),t._v(" "),e("p",[t._v("硬生生加个 MQ 进来，你怎么保证消息没有重复消费？怎么处理消息丢失的情况？怎么保证消息传递的顺序性？")]),t._v(" "),e("p",[t._v("一致性问题")]),t._v(" "),e("p",[t._v("A 系统处理完了直接返回成功了，人都以为你这个请求就成功了；但是问题是，要是 BCD 三个系统那里，BD 两个系统写库成功了，结果 C 系统写库失败了，咋整？你这数据就不一致了。")]),t._v(" "),e("p",[t._v("所以消息队列实际是一种非常复杂的架构，你引入它有很多好处，但是也得针对它带来的坏处做各种额外的技术方案和架构来规避掉，做好之后，你会发现，妈呀，系统复杂度提升了一个数量级，也许是复杂了 10 倍。但是关键时刻，用，还是得用的。")]),t._v(" "),e("p",[t._v("一般的业务系统要引入 MQ，最早大家都用 ActiveMQ，但是现在确实大家用的不多了，没经过大规模吞吐量场景的验证，社区也不是很活跃，所以大家还是算了吧，我个人不推荐用这个了。")]),t._v(" "),e("p",[t._v("后来大家开始用 RabbitMQ，但是确实 erlang 语言阻止了大量的 Java 工程师去深入研究和掌控它，对公司而言，几乎处于不可控的状态，但是确实人家是开源的，比较稳定的支持，活跃度也高。")]),t._v(" "),e("h2",{attrs:{id:"kafka、activemq、rabbitmq、rocketmq-有什么优缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#kafka、activemq、rabbitmq、rocketmq-有什么优缺点"}},[t._v("#")]),t._v(" Kafka、ActiveMQ、RabbitMQ、RocketMQ 有什么优缺点？")]),t._v(" "),e("p",[t._v("不过现在确实越来越多的公司会去用 RocketMQ，确实很不错，毕竟是阿里出品，但社区可能有突然黄掉的风险（目前 RocketMQ 已捐给 Apache，但 GitHub 上的活跃度其实不算高）对自己公司技术实力有绝对自信的，推荐用 RocketMQ，否则回去老老实实用 RabbitMQ 吧，人家有活跃的开源社区，绝对不会黄。")]),t._v(" "),e("p",[t._v("所以中小型公司，技术实力较为一般，技术挑战不是特别高，用 RabbitMQ 是不错的选择；大型公司，基础架构研发实力较强，用 RocketMQ 是很好的选择。")]),t._v(" "),e("p",[t._v("如果是大数据领域的实时计算、日志采集等场景，用 Kafka 是业内标准的，绝对没问题，社区活跃度很高，绝对不会黄，何况几乎是全世界这个领域的事实性规范。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("特性")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("ActiveMQ")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("RabbitMQ")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("RocketMQ")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Kafka")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("单机吞吐量")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("万级，比 RocketMQ、Kafka 低一个数量级")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("同 ActiveMQ")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("10 万级，支撑高吞吐")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("10 万级，高吞吐，一般配合大数据类的系统来进行实时数据计算、日志采集等场景")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("topic 数量对吞吐量的影响")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}}),t._v(" "),e("td",{staticStyle:{"text-align":"center"}}),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("topic 可以达到几百/几千的级别，吞吐量会有较小幅度的下降，这是 RocketMQ 的一大优势，在同等机器下，可以支撑大量的 topic")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("topic 从几十到几百个时候，吞吐量会大幅度下降，在同等机器下，Kafka 尽量保证 topic 数量不要过多，如果要支撑大规模的 topic，需要增加更多的机器资源")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("时效性")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("ms 级")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("微秒级，这是 RabbitMQ 的一大特点，延迟最低")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("ms 级")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("延迟在 ms 级以内")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("可用性")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("高，基于主从架构实现高可用")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("同 ActiveMQ")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("非常高，分布式架构")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("非常高，分布式，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("消息可靠性")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("有较低的概率丢失数据")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("基本不丢")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("经过参数优化配置，可以做到 0 丢失")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("同 RocketMQ")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("功能支持")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("MQ 领域的功能极其完备")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("基于 erlang 开发，并发能力很强，性能极好，延时很低")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("MQ 功能较为完善，还是分布式的，扩展性好")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("功能较为简单，主要支持简单的 MQ 功能，在大数据领域的实时计算以及日志采集被大规模使用")])])])])])}),[],!1,null,null,null);e.default=_.exports}}]);