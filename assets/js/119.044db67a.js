(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{1386:function(t,s,a){"use strict";a.r(s);var n=a(1),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("blockquote",[s("p",[t._v("点击勘误"),s("a",{attrs:{href:"https://github.com/webVueBlog/JavaPlusDoc/issues",target:"_blank",rel:"noopener noreferrer"}},[t._v("issues"),s("OutboundLink")],1),t._v("，哪吒感谢大家的阅读")])]),t._v(" "),s("img",{attrs:{align:"right",width:"100",src:"https://cdn.jsdelivr.net/gh/YunYouJun/yun/images/yun-alpha-compressed.png"}}),t._v(" "),s("h2",{attrs:{id:"java线程池原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java线程池原理"}},[t._v("#")]),t._v(" Java线程池原理")]),t._v(" "),s("p",[t._v("在高并发环境下，频繁创建和销毁线程会带来极大的性能开销。线程池通过复用已创建的线程，可以显著提高系统性能。Java中的"),s("code",[t._v("ThreadPoolExecutor")]),t._v("是线程池的核心实现类，它提供了强大的线程池管理功能。")]),t._v(" "),s("h3",{attrs:{id:"为什么需要线程池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要线程池"}},[t._v("#")]),t._v(" 为什么需要线程池")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("降低资源消耗")]),t._v("：通过复用已创建的线程，减少线程创建和销毁的开销")]),t._v(" "),s("li",[s("strong",[t._v("提高响应速度")]),t._v("：任务到达时，无需等待线程创建即可立即执行")]),t._v(" "),s("li",[s("strong",[t._v("提高线程的可管理性")]),t._v("：统一管理线程，避免无限制创建线程导致的系统崩溃")]),t._v(" "),s("li",[s("strong",[t._v("提供更多更强大的功能")]),t._v("：如延时执行、定期执行、监控等")])]),t._v(" "),s("h2",{attrs:{id:"threadpoolexecutor核心参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#threadpoolexecutor核心参数"}},[t._v("#")]),t._v(" ThreadPoolExecutor核心参数")]),t._v(" "),s("p",[s("code",[t._v("ThreadPoolExecutor")]),t._v("构造函数有7个参数，每个参数都对线程池的行为有重要影响：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" corePoolSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 核心线程数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" maximumPoolSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("              "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最大线程数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" keepAliveTime"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("               "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 线程空闲时间")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),t._v(" unit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 时间单位")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BlockingQueue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" workQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 工作队列")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadFactory")]),t._v(" threadFactory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 线程工厂")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RejectedExecutionHandler")]),t._v(" handler  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 拒绝策略")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"核心参数详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#核心参数详解"}},[t._v("#")]),t._v(" 核心参数详解")]),t._v(" "),s("h4",{attrs:{id:"_1-corepoolsize-核心线程数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-corepoolsize-核心线程数"}},[t._v("#")]),t._v(" 1. corePoolSize（核心线程数）")]),t._v(" "),s("p",[t._v("线程池中应该保持活跃的线程数量，即使它们处于空闲状态。只有当"),s("code",[t._v("allowCoreThreadTimeOut")]),t._v("设置为true时，核心线程在空闲超时后才会被回收。")]),t._v(" "),s("h4",{attrs:{id:"_2-maximumpoolsize-最大线程数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-maximumpoolsize-最大线程数"}},[t._v("#")]),t._v(" 2. maximumPoolSize（最大线程数）")]),t._v(" "),s("p",[t._v("线程池允许创建的最大线程数。当工作队列已满且活动线程数小于最大线程数时，线程池会创建新线程来处理任务。")]),t._v(" "),s("h4",{attrs:{id:"_3-keepalivetime-线程空闲时间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-keepalivetime-线程空闲时间"}},[t._v("#")]),t._v(" 3. keepAliveTime（线程空闲时间）")]),t._v(" "),s("p",[t._v("当线程数大于核心线程数时，多余的空闲线程在终止前等待新任务的最长时间。")]),t._v(" "),s("h4",{attrs:{id:"_4-unit-时间单位"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-unit-时间单位"}},[t._v("#")]),t._v(" 4. unit（时间单位）")]),t._v(" "),s("p",[s("code",[t._v("keepAliveTime")]),t._v("参数的时间单位，如"),s("code",[t._v("TimeUnit.SECONDS")]),t._v("、"),s("code",[t._v("TimeUnit.MILLISECONDS")]),t._v("等。")]),t._v(" "),s("h4",{attrs:{id:"_5-workqueue-工作队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-workqueue-工作队列"}},[t._v("#")]),t._v(" 5. workQueue（工作队列）")]),t._v(" "),s("p",[t._v("用于保存等待执行的任务的阻塞队列。常用的队列有：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("ArrayBlockingQueue")]),t._v("：基于数组的有界阻塞队列，按FIFO原则对元素进行排序")]),t._v(" "),s("li",[s("strong",[t._v("LinkedBlockingQueue")]),t._v("：基于链表的阻塞队列，按FIFO排序，吞吐量通常高于ArrayBlockingQueue")]),t._v(" "),s("li",[s("strong",[t._v("SynchronousQueue")]),t._v("：不存储元素的阻塞队列，每个插入操作必须等待另一个线程调用移除操作")]),t._v(" "),s("li",[s("strong",[t._v("PriorityBlockingQueue")]),t._v("：具有优先级的无界阻塞队列")]),t._v(" "),s("li",[s("strong",[t._v("DelayQueue")]),t._v("：用于延迟执行任务的无界阻塞队列")])]),t._v(" "),s("h4",{attrs:{id:"_6-threadfactory-线程工厂"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-threadfactory-线程工厂"}},[t._v("#")]),t._v(" 6. threadFactory（线程工厂）")]),t._v(" "),s("p",[t._v("用于创建新线程的工厂。通过自定义ThreadFactory，可以给线程设置有意义的名称、设置守护状态或优先级等。")]),t._v(" "),s("h4",{attrs:{id:"_7-handler-拒绝策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-handler-拒绝策略"}},[t._v("#")]),t._v(" 7. handler（拒绝策略）")]),t._v(" "),s("p",[t._v("当线程池和工作队列都已满时，对新提交任务的处理策略。Java提供了四种标准拒绝策略：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("AbortPolicy")]),t._v("：默认策略，抛出RejectedExecutionException异常")]),t._v(" "),s("li",[s("strong",[t._v("CallerRunsPolicy")]),t._v("：在调用者线程中执行任务，有反馈调节机制")]),t._v(" "),s("li",[s("strong",[t._v("DiscardPolicy")]),t._v("：直接丢弃新任务，不做任何处理")]),t._v(" "),s("li",[s("strong",[t._v("DiscardOldestPolicy")]),t._v("：丢弃队列头部（最旧）的任务，然后重试执行当前任务")])]),t._v(" "),s("h2",{attrs:{id:"线程池工作原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程池工作原理"}},[t._v("#")]),t._v(" 线程池工作原理")]),t._v(" "),s("p",[s("img",{attrs:{src:a(478),alt:"线程池工作流程"}})]),t._v(" "),s("h3",{attrs:{id:"线程池执行流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程池执行流程"}},[t._v("#")]),t._v(" 线程池执行流程")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("提交任务")]),t._v("：当任务被提交到线程池时")]),t._v(" "),s("li",[s("strong",[t._v("核心线程处理")]),t._v("：如果运行的线程数少于核心线程数，则创建新线程来处理任务，即使其他线程是空闲的")]),t._v(" "),s("li",[s("strong",[t._v("工作队列缓存")]),t._v("：如果运行的线程数等于或多于核心线程数，则将任务加入工作队列而不是创建新线程")]),t._v(" "),s("li",[s("strong",[t._v("创建临时线程")]),t._v("：如果工作队列已满，且运行的线程数少于最大线程数，则创建新线程来处理任务")]),t._v(" "),s("li",[s("strong",[t._v("触发拒绝策略")]),t._v("：如果工作队列已满，且运行的线程数等于或多于最大线程数，则根据拒绝策略处理该任务")])]),t._v(" "),s("h3",{attrs:{id:"线程池状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程池状态"}},[t._v("#")]),t._v(" 线程池状态")]),t._v(" "),s("p",[s("code",[t._v("ThreadPoolExecutor")]),t._v("使用一个原子整数"),s("code",[t._v("ctl")]),t._v("同时记录线程池状态和工作线程数量：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("RUNNING")]),t._v("：接受新任务并处理队列中的任务")]),t._v(" "),s("li",[s("strong",[t._v("SHUTDOWN")]),t._v("：不接受新任务，但处理队列中的任务")]),t._v(" "),s("li",[s("strong",[t._v("STOP")]),t._v("：不接受新任务，不处理队列中的任务，中断正在执行的任务")]),t._v(" "),s("li",[s("strong",[t._v("TIDYING")]),t._v("：所有任务已终止，工作线程数为0，线程转换到此状态后会调用"),s("code",[t._v("terminated()")]),t._v("方法")]),t._v(" "),s("li",[s("strong",[t._v("TERMINATED")]),t._v("："),s("code",[t._v("terminated()")]),t._v("方法执行完成")])]),t._v(" "),s("h2",{attrs:{id:"常见线程池类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见线程池类型"}},[t._v("#")]),t._v(" 常见线程池类型")]),t._v(" "),s("p",[t._v("Java通过"),s("code",[t._v("Executors")]),t._v("工厂类提供了几种预定义的线程池配置：")]),t._v(" "),s("h3",{attrs:{id:"_1-fixedthreadpool"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-fixedthreadpool"}},[t._v("#")]),t._v(" 1. FixedThreadPool")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" fixedThreadPool "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Executors")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("newFixedThreadPool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" nThreads"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("特点：")]),t._v(" "),s("ul",[s("li",[t._v("核心线程数等于最大线程数，即线程数固定")]),t._v(" "),s("li",[t._v("使用无界队列LinkedBlockingQueue")]),t._v(" "),s("li",[t._v("适用于负载较重的服务器，固定线程数有助于防止资源耗尽")])]),t._v(" "),s("h3",{attrs:{id:"_2-cachedthreadpool"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-cachedthreadpool"}},[t._v("#")]),t._v(" 2. CachedThreadPool")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" cachedThreadPool "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Executors")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("newCachedThreadPool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("特点：")]),t._v(" "),s("ul",[s("li",[t._v("核心线程数为0，最大线程数为Integer.MAX_VALUE")]),t._v(" "),s("li",[t._v("使用SynchronousQueue，不存储任务")]),t._v(" "),s("li",[t._v("线程空闲60秒后回收")]),t._v(" "),s("li",[t._v("适用于执行大量短期异步任务的程序")])]),t._v(" "),s("h3",{attrs:{id:"_3-singlethreadexecutor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-singlethreadexecutor"}},[t._v("#")]),t._v(" 3. SingleThreadExecutor")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" singleThreadExecutor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Executors")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("newSingleThreadExecutor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("特点：")]),t._v(" "),s("ul",[s("li",[t._v("核心线程数和最大线程数都为1")]),t._v(" "),s("li",[t._v("使用无界队列LinkedBlockingQueue")]),t._v(" "),s("li",[t._v("适用于需要保证顺序执行各个任务的应用场景")])]),t._v(" "),s("h3",{attrs:{id:"_4-scheduledthreadpool"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-scheduledthreadpool"}},[t._v("#")]),t._v(" 4. ScheduledThreadPool")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ScheduledExecutorService")]),t._v(" scheduledThreadPool "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Executors")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("newScheduledThreadPool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" corePoolSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("特点：")]),t._v(" "),s("ul",[s("li",[t._v("核心线程数固定，最大线程数为Integer.MAX_VALUE")]),t._v(" "),s("li",[t._v("使用DelayedWorkQueue")]),t._v(" "),s("li",[t._v("适用于需要定期执行任务的场景")])]),t._v(" "),s("h2",{attrs:{id:"线程池的正确使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程池的正确使用"}},[t._v("#")]),t._v(" 线程池的正确使用")]),t._v(" "),s("h3",{attrs:{id:"线程池大小设置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程池大小设置"}},[t._v("#")]),t._v(" 线程池大小设置")]),t._v(" "),s("p",[t._v("线程池大小的设置需要考虑多种因素：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("CPU密集型任务")]),t._v("：线程数 = CPU核心数 + 1")]),t._v(" "),s("li",[s("strong",[t._v("IO密集型任务")]),t._v("：线程数 = CPU核心数 * (1 + 平均等待时间/平均工作时间)")])]),t._v(" "),s("p",[t._v("一个简单的经验公式：线程数 = CPU核心数 * (1 + 等待时间/计算时间)")]),t._v(" "),s("h3",{attrs:{id:"避免使用executors创建线程池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#避免使用executors创建线程池"}},[t._v("#")]),t._v(" 避免使用Executors创建线程池")]),t._v(" "),s("p",[t._v("虽然"),s("code",[t._v("Executors")]),t._v("提供了便捷的工厂方法，但在生产环境中应避免直接使用，原因如下：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("FixedThreadPool和SingleThreadExecutor")]),t._v("：使用无界队列LinkedBlockingQueue，可能导致OOM")]),t._v(" "),s("li",[s("strong",[t._v("CachedThreadPool")]),t._v("：最大线程数为Integer.MAX_VALUE，可能创建大量线程导致OOM")]),t._v(" "),s("li",[s("strong",[t._v("ScheduledThreadPool")]),t._v("：最大线程数为Integer.MAX_VALUE，可能创建大量线程导致OOM")])]),t._v(" "),s("p",[t._v("建议直接使用"),s("code",[t._v("ThreadPoolExecutor")]),t._v("构造函数，明确指定各个参数。")]),t._v(" "),s("h2",{attrs:{id:"线程池监控"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程池监控"}},[t._v("#")]),t._v(" 线程池监控")]),t._v(" "),s("p",[s("code",[t._v("ThreadPoolExecutor")]),t._v("提供了多种方法来监控线程池的运行状态：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取线程池当前线程数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPoolSize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取活动线程数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getActiveCount")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取完成任务数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getCompletedTaskCount")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取任务总数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTaskCount")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取队列中等待执行的任务数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getQueue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("可以通过继承"),s("code",[t._v("ThreadPoolExecutor")]),t._v("并重写"),s("code",[t._v("beforeExecute")]),t._v("、"),s("code",[t._v("afterExecute")]),t._v("和"),s("code",[t._v("terminated")]),t._v("方法来添加自定义监控逻辑。")]),t._v(" "),s("h2",{attrs:{id:"线程池最佳实践"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程池最佳实践"}},[t._v("#")]),t._v(" 线程池最佳实践")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("根据业务场景，合理设置线程池参数")])]),t._v(" "),s("li",[s("strong",[t._v("使用有界队列，防止OOM")])]),t._v(" "),s("li",[s("strong",[t._v("根据任务类型（CPU密集型、IO密集型）设置合适的线程数")])]),t._v(" "),s("li",[s("strong",[t._v("为线程池里的线程指定有意义的名称，方便问题排查")])]),t._v(" "),s("li",[s("strong",[t._v("根据实际情况实现自定义拒绝策略")])]),t._v(" "),s("li",[s("strong",[t._v("关注线程池的监控指标，及时调整参数")])]),t._v(" "),s("li",[s("strong",[t._v("优雅关闭线程池")]),t._v("：先调用"),s("code",[t._v("shutdown()")]),t._v("，再调用"),s("code",[t._v("awaitTermination()")]),t._v("等待任务执行完成")])]),t._v(" "),s("h2",{attrs:{id:"实际应用案例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实际应用案例"}},[t._v("#")]),t._v(" 实际应用案例")]),t._v(" "),s("h3",{attrs:{id:"案例一-自定义线程池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#案例一-自定义线程池"}},[t._v("#")]),t._v(" 案例一：自定义线程池")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建自定义线程池")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),t._v(" executor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 核心线程数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runtime")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRuntime")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("availableProcessors")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最大线程数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runtime")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRuntime")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("availableProcessors")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 线程空闲时间")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("60L")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 时间单位")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SECONDS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 工作队列")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayBlockingQueue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 线程工厂")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadFactory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AtomicInteger")]),t._v(" threadNumber "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AtomicInteger")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("newThread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" t "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"custom-thread-"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" threadNumber"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAndIncrement")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置为非守护线程")]),t._v("\n            t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setDaemon")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置线程优先级")]),t._v("\n            t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setPriority")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NORM_PRIORITY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 拒绝策略")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CallerRunsPolicy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 提交任务")]),t._v("\nexecutor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("execute")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"任务正在执行..."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 关闭线程池")]),t._v("\nexecutor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("shutdown")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"案例二-处理异步任务结果"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#案例二-处理异步任务结果"}},[t._v("#")]),t._v(" 案例二：处理异步任务结果")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建线程池")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" executor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("60L")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SECONDS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedBlockingQueue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Executors")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("defaultThreadFactory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("AbortPolicy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 提交有返回值的任务")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Future")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" future "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" executor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("submit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 模拟耗时操作")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"任务执行结果"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取任务执行结果，最多等待2秒")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" future"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SECONDS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"获取到结果: "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前线程被中断")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("interrupt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutionException")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 任务执行异常")]),t._v("\n    e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getCause")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeoutException")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取结果超时")]),t._v("\n    future"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cancel")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 关闭线程池")]),t._v("\n    executor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("shutdown")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"常见问题与解决方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见问题与解决方案"}},[t._v("#")]),t._v(" 常见问题与解决方案")]),t._v(" "),s("h3",{attrs:{id:"_1-线程池任务堆积问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-线程池任务堆积问题"}},[t._v("#")]),t._v(" 1. 线程池任务堆积问题")]),t._v(" "),s("p",[s("strong",[t._v("问题")]),t._v("：任务提交速度远大于处理速度，导致队列堆积。")]),t._v(" "),s("p",[s("strong",[t._v("解决方案")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("增加线程池核心线程数和最大线程数")]),t._v(" "),s("li",[t._v("使用更高效的任务处理逻辑")]),t._v(" "),s("li",[t._v("对任务进行分流，使用多个线程池处理不同类型的任务")]),t._v(" "),s("li",[t._v("实现合适的拒绝策略，避免系统崩溃")])]),t._v(" "),s("h3",{attrs:{id:"_2-线程池内存泄漏"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-线程池内存泄漏"}},[t._v("#")]),t._v(" 2. 线程池内存泄漏")]),t._v(" "),s("p",[s("strong",[t._v("问题")]),t._v("：线程池中的线程持有外部对象引用，导致对象无法被垃圾回收。")]),t._v(" "),s("p",[s("strong",[t._v("解决方案")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("避免使用ThreadLocal存储大量数据")]),t._v(" "),s("li",[t._v("任务完成后清理ThreadLocal")]),t._v(" "),s("li",[t._v("使用弱引用或软引用持有外部对象")])]),t._v(" "),s("h3",{attrs:{id:"_3-线程池死锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-线程池死锁"}},[t._v("#")]),t._v(" 3. 线程池死锁")]),t._v(" "),s("p",[s("strong",[t._v("问题")]),t._v("：线程池中的任务相互依赖，导致死锁。")]),t._v(" "),s("p",[s("strong",[t._v("解决方案")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("避免在线程池中提交依赖当前线程池处理结果的任务")]),t._v(" "),s("li",[t._v("对于相互依赖的任务，使用不同的线程池处理")]),t._v(" "),s("li",[t._v("使用CompletableFuture等工具处理任务依赖关系")])]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("线程池是Java并发编程中非常重要的工具，合理使用线程池可以显著提高应用程序的性能和稳定性。在实际应用中，需要根据业务场景和系统资源合理配置线程池参数，并做好监控和调优工作。")]),t._v(" "),s("p",[t._v("通过本文的学习，我们深入了解了"),s("code",[t._v("ThreadPoolExecutor")]),t._v("的工作原理、核心参数、常见线程池类型以及最佳实践，希望能够帮助大家在实际开发中更好地使用线程池。")])])}),[],!1,null,null,null);s.default=e.exports},478:function(t,s,a){t.exports=a.p+"assets/img/img.b86b2a54.png"}}]);