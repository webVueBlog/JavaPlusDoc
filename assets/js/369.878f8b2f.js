(window.webpackJsonp=window.webpackJsonp||[]).push([[369],{1188:function(a,s,v){"use strict";v.r(s);var _=v(1),r=Object(_.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("blockquote",[s("p",[a._v("点击勘误"),s("a",{attrs:{href:"https://github.com/webVueBlog/JavaPlusDoc/issues",target:"_blank",rel:"noopener noreferrer"}},[a._v("issues"),s("OutboundLink")],1),a._v("，哪吒感谢大家的阅读")])]),a._v(" "),s("img",{attrs:{align:"right",width:"100",src:"https://cdn.jsdelivr.net/gh/YunYouJun/yun/images/yun-alpha-compressed.png"}}),a._v(" "),s("h2",{attrs:{id:"物联网kafka"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#物联网kafka"}},[a._v("#")]),a._v(" 物联网kafka")]),a._v(" "),s("p",[a._v("KafkaEventHandle 类是一个处理 Kafka 消息的服务类，它使用了 Spring Kafka 的 @KafkaListener 注解来监听来自 Kafka 的消息，并处理不同类型的事件。该类的主要功能是处理 两个主题的消息，并执行相应的业务逻辑。")]),a._v(" "),s("p",[a._v("关键功能和过程：")]),a._v(" "),s("p",[a._v("监听 Kafka 消息：")]),a._v(" "),s("ul",[s("li",[s("code",[a._v('@KafkaListener(topics ="${xxx}", containerFactory = "kafkaEventConsumerFactory")')]),a._v(" 用于监听 xxx 主题的消息。")]),a._v(" "),s("li",[s("code",[a._v('@KafkaListener(topics ="xxx", containerFactory = "kafkaEventConsumerFactory")')]),a._v(" 用于监听 xxx 主题的消息。")])]),a._v(" "),s("p",[s("strong",[a._v("处理定向事件")]),a._v(" 原始数据 存储内存")]),a._v(" "),s("p",[s("code",[a._v("ack.acknowledge();")]),a._v(" //手动提交偏移量")]),a._v(" "),s("p",[s("strong",[a._v("处理广播事件")])]),a._v(" "),s("p",[a._v("根据 eventId 判断事件类型")]),a._v(" "),s("p",[s("strong",[a._v("消息确认与偏移量提交")]),a._v("：")]),a._v(" "),s("p",[a._v("每个方法的最后都会调用 ack.acknowledge() 来手动提交偏移量，确保消息被成功处理后才提交。")]),a._v(" "),s("ol",[s("li",[a._v("定义处理定向事件的方法")]),a._v(" "),s("li",[a._v("定义处理广播事件的方法")]),a._v(" "),s("li",[a._v("处理设备上线事件")]),a._v(" "),s("li",[a._v("清除设备相关的数据")]),a._v(" "),s("li",[a._v("记录处理耗时的日志")])]),a._v(" "),s("p",[a._v("CassandraConfig 类是一个 Spring 配置类，用于配置连接到 Cassandra 数据库的相关设置，提供 Cassandra 数据库集群和会话（Session）的配置。主要用途是连接到 Cassandra 备份数据库），并通过 Spring 的 @Bean 注解将 Cassandra 集群和会话对象作为 Spring 的 Bean 提供给其他组件使用。")]),a._v(" "),s("p",[a._v("主要功能：")]),a._v(" "),s("ol",[s("li",[a._v("配置 Cassandra 集群连接：")])]),a._v(" "),s("ul",[s("li",[a._v("通过注入 Cassandra 数据库连接的配置参数（如 IP、端口、用户名和密码），配置一个 Cassandra 集群连接实例。")]),a._v(" "),s("li",[a._v("使用 PoolingOptions 设置 Cassandra 连接池的相关参数。")])]),a._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[a._v("创建 Cassandra 会话：")])]),a._v(" "),s("ul",[s("li",[a._v("使用配置好的集群连接实例来创建一个 Session 对象，代表与 Cassandra 集群的一个会话。")]),a._v(" "),s("li",[a._v("Session 提供执行查询的能力，可以与 Cassandra 数据库交互。")])]),a._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[a._v("Cassandra 集群的连接配置（getCasandraCluster() 方法）：")])]),a._v(" "),s("ul",[s("li",[a._v("创建一个 PoolingOptions 对象，配置 Cassandra 连接池的连接数量。")]),a._v(" "),s("li",[a._v("设置每个主机的核心连接数为 2（setCoreConnectionsPerHost）。")]),a._v(" "),s("li",[a._v("设置每个主机的最大连接数为 4（setMaxConnectionsPerHost）。")]),a._v(" "),s("li",[a._v("根据是否提供了用户名和密码，动态创建 Cluster 对象：")]),a._v(" "),s("li",[a._v("如果没有用户名和密码，直接通过 IP 和端口连接。")]),a._v(" "),s("li",[a._v("如果有用户名和密码，则使用 withCredentials 方法提供凭证进行连接。")]),a._v(" "),s("li",[a._v("返回配置好的 Cluster 对象，并记录日志，输出 Cassandra 集群的名称。")]),a._v(" "),s("li",[a._v("记录当前 Cassandra 连接的相关信息（IP、端口、用户名、密码）。")])]),a._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[a._v("Cassandra 会话配置（getCasandraClusterSession() 方法）：")])]),a._v(" "),s("ul",[s("li",[a._v("通过传入的 Cluster 对象，创建 Session 会话对象，表示与 Cassandra 集群的连接。")]),a._v(" "),s("li",[a._v("输出集群的信息，包括所有连接的节点信息和集群中的所有键空间（KeyspaceMetadata）。")]),a._v(" "),s("li",[a._v("返回创建好的 Session 对象，供应用程序执行查询操作。")])]),a._v(" "),s("h2",{attrs:{id:"存储在数据库中的数据流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#存储在数据库中的数据流程"}},[a._v("#")]),a._v(" 存储在数据库中的数据流程：")]),a._v(" "),s("p",[a._v("数据结构：")]),a._v(" "),s("ul",[s("li",[a._v("数据存储在 Cassandra 数据库中，主要由 表（Table） 和 键空间（Keyspace） 构成。")]),a._v(" "),s("li",[a._v("键空间（Keyspace）：相当于关系型数据库中的数据库，用于组织表。")]),a._v(" "),s("li",[a._v("表（Table）：包含实际存储的数据，表由行（Row）和列（Column）组成。")]),a._v(" "),s("li",[a._v("在这个配置类中，代码并没有显式地定义表的结构，而是配置了与 Cassandra 的连接和会话，表结构的设计应该在其他部分的代码或数据库中进行。")])]),a._v(" "),s("p",[a._v("实现了连接到 Cassandra 集群并配置相关的 Session 和 Cluster。")]),a._v(" "),s("ol",[s("li",[a._v("定义 Cassandra Cluster 的连接池和连接配置")]),a._v(" "),s("li",[a._v("定义 Cassandra Session Bean")]),a._v(" "),s("li",[a._v("打印 Cassandra 集群的元数据，包括节点信息和键空间")])]),a._v(" "),s("h2",{attrs:{id:"优化这段代码可以从以下几个方面着手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优化这段代码可以从以下几个方面着手"}},[a._v("#")]),a._v(" 优化这段代码可以从以下几个方面着手：")]),a._v(" "),s("ol",[s("li",[a._v("日志优化：日志输出可以更加结构化，且提高可读性。")]),a._v(" "),s("li",[a._v("异常处理：增加必要的异常处理，避免 Cassandra 连接配置失败时程序崩溃。")]),a._v(" "),s("li",[a._v("简化代码：减少重复的代码，优化配置项的读取。")]),a._v(" "),s("li",[a._v("连接池优化：根据业务需求，进一步细化连接池配置。")]),a._v(" "),s("li",[a._v("配置项优化：减少硬编码，并确保代码可扩展性。")]),a._v(" "),s("li",[a._v("性能考虑：避免静态字段用于存储敏感信息（如 msgPersitId）。")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("创建 Cassandra 集群连接池配置 Bean\n根据配置创建 Cluster 对象。\n创建 Cassandra Session 对象。\n打印 Cassandra 集群的元数据，包括节点信息和键空间。\n")])])]),s("p",[a._v("优化这段 Kafka 生产者配置代码可以从以下几个方面着手：")]),a._v(" "),s("ol",[s("li",[a._v("提升代码可维护性和扩展性：简化冗余的配置，确保参数可扩展。")]),a._v(" "),s("li",[a._v("日志输出：增加日志输出，帮助调试和生产环境监控。")]),a._v(" "),s("li",[a._v("错误处理：增加配置读取失败的处理逻辑，避免出现未定义的配置项。")]),a._v(" "),s("li",[a._v("性能优化：尽量减少不必要的操作，优化配置的创建过程。")]),a._v(" "),s("li",[a._v("代码结构清晰：分离配置项和具体配置方法，使得每个方法职责单一，便于维护。")])]),a._v(" "),s("p",[a._v("KafkaPConfig 类是一个 Spring 配置类，主要用于配置 Kafka 生产者（Producer），使得应用能够通过 Kafka 发送消息。它包含了 Kafka 生产者的基本配置，如 Kafka 集群地址、重试次数、批处理大小、延迟发送时间、缓冲区大小等。通过这段配置，应用能够向 Kafka 集群发送 消息或其他类型的消息。")]),a._v(" "),s("h2",{attrs:{id:"主要功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#主要功能"}},[a._v("#")]),a._v(" 主要功能：")]),a._v(" "),s("p",[a._v("配置 Kafka 生产者的连接参数：")]),a._v(" "),s("p",[a._v("通过 @Value 注解从配置文件中读取 Kafka 的相关配置，如 Kafka 集群的服务器地址、重试次数、批量大小、延迟时间、缓冲区大小等。")]),a._v(" "),s("p",[a._v("定义 Kafka 生产者配置（producerConfigs() 方法）：")]),a._v(" "),s("p",[a._v("使用 Kafka 提供的 ProducerConfig 类来配置生产者的各项参数，包括重试次数、批量大小、延迟时间等，以确保消息发送的高效性和稳定性。")]),a._v(" "),s("p",[a._v("创建 Kafka 生产者工厂（producerFactory() 方法）：")]),a._v(" "),s("p",[a._v("使用 DefaultKafkaProducerFactory 创建 Kafka 生产者工厂，该工厂用于创建 Kafka 生产者实例。")]),a._v(" "),s("p",[a._v("创建 KafkaTemplate：")]),a._v(" "),s("p",[a._v("KafkaTemplate 是 Spring Kafka 提供的用于与 Kafka 进行交互的高层抽象类。通过 @Bean 注解将其注册到 Spring 容器中，使得应用可以通过它发送消息到 Kafka 集群。")])])}),[],!1,null,null,null);s.default=r.exports}}]);